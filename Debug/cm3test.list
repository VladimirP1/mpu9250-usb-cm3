
cm3test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002228  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .preinit_array 00000000  08002228  08002228  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .init_array   00000000  08002228  08002228  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000000  08002228  08002228  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000028  20000000  08002228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000260  20000028  08002250  00020028  2**2
                  ALLOC
  6 .ccm          00000000  10000000  10000000  00020028  2**0
                  CONTENTS
  7 .debug_info   0000ee9f  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002a42  00000000  00000000  0002eec7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008a8  00000000  00000000  00031909  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007e8  00000000  00000000  000321b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00005dce  00000000  00000000  00032999  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000186cd  00000000  00000000  00038767  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      000000ee  00000000  00000000  00050e34  2**0
                  CONTENTS, READONLY
 14 .ARM.attributes 00000037  00000000  00000000  00050f22  2**0
                  CONTENTS, READONLY
 15 .debug_frame  000013e8  00000000  00000000  00050f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00003259  00000000  00000000  00052344  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00005d0f  00000000  00000000  0005559d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 00 02 20 a5 1a 00 08 a3 1a 00 08 a1 1a 00 08     ... ............
 8000010:	a1 1a 00 08 a1 1a 00 08 a1 1a 00 08 00 00 00 00     ................
	...
 800002c:	a3 1a 00 08 a3 1a 00 08 00 00 00 00 a3 1a 00 08     ................
 800003c:	a3 1a 00 08 a1 1a 00 08 a1 1a 00 08 a1 1a 00 08     ................
 800004c:	a1 1a 00 08 a1 1a 00 08 a1 1a 00 08 a1 1a 00 08     ................
 800005c:	a1 1a 00 08 a1 1a 00 08 a1 1a 00 08 a5 02 00 08     ................
 800006c:	a1 1a 00 08 a1 1a 00 08 a1 1a 00 08 a1 1a 00 08     ................
 800007c:	a1 1a 00 08 a1 1a 00 08 a1 1a 00 08 a1 1a 00 08     ................
 800008c:	a1 1a 00 08 a1 1a 00 08 a1 1a 00 08 a1 1a 00 08     ................
 800009c:	a1 1a 00 08 a1 1a 00 08 a1 1a 00 08 a1 1a 00 08     ................
 80000ac:	a1 1a 00 08 a1 1a 00 08 a1 1a 00 08 a1 1a 00 08     ................
 80000bc:	a1 1a 00 08 a1 1a 00 08 a1 1a 00 08 a1 1a 00 08     ................
 80000cc:	a1 1a 00 08 a1 1a 00 08 a1 1a 00 08 a1 1a 00 08     ................
 80000dc:	a1 1a 00 08 a1 1a 00 08 a1 1a 00 08 a1 1a 00 08     ................
 80000ec:	a1 1a 00 08 a1 1a 00 08 a1 1a 00 08 a1 1a 00 08     ................
 80000fc:	a1 1a 00 08 a1 1a 00 08 a1 1a 00 08 a1 1a 00 08     ................
 800010c:	a1 1a 00 08 a1 1a 00 08 a1 1a 00 08 a1 1a 00 08     ................
 800011c:	a1 1a 00 08 a1 1a 00 08 a1 1a 00 08 a1 1a 00 08     ................
 800012c:	a1 1a 00 08 a1 1a 00 08 a1 1a 00 08 a1 1a 00 08     ................
 800013c:	a1 1a 00 08 a1 1a 00 08 a1 1a 00 08 a1 1a 00 08     ................
 800014c:	05 0b 00 08 a1 1a 00 08 a1 1a 00 08 a1 1a 00 08     ................
 800015c:	a1 1a 00 08 a1 1a 00 08 a1 1a 00 08 a1 1a 00 08     ................
 800016c:	a1 1a 00 08 a1 1a 00 08 a1 1a 00 08 a1 1a 00 08     ................
 800017c:	a1 1a 00 08 a1 1a 00 08 a1 1a 00 08 a1 1a 00 08     ................
 800018c:	a1 1a 00 08 a1 1a 00 08 a1 1a 00 08 a1 1a 00 08     ................
 800019c:	a1 1a 00 08 a1 1a 00 08 a1 1a 00 08 a1 1a 00 08     ................

080001ac <cm_enable_interrupts>:
/** @brief Cortex M Enable interrupts
 *
 * Disable the interrupt mask and enable interrupts globally
 */
static inline void cm_enable_interrupts(void)
{
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0
	__asm__ volatile ("CPSIE I\n");
 80001b0:	b662      	cpsie	i
}
 80001b2:	bf00      	nop
 80001b4:	46bd      	mov	sp, r7
 80001b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ba:	4770      	bx	lr

080001bc <cm_disable_interrupts>:
/** @brief Cortex M Disable interrupts
 *
 * Mask all interrupts globally
 */
static inline void cm_disable_interrupts(void)
{
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0
	__asm__ volatile ("CPSID I\n");
 80001c0:	b672      	cpsid	i
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ca:	4770      	bx	lr

080001cc <push>:
struct{
	uint8_t buf[128];
	uint32_t wpoint, rpoint, len;
} simq;

uint8_t push(void* x) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	if(simq.len >= 8) return 0;
 80001d4:	4b12      	ldr	r3, [pc, #72]	; (8000220 <push+0x54>)
 80001d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001da:	2b07      	cmp	r3, #7
 80001dc:	d901      	bls.n	80001e2 <push+0x16>
 80001de:	2300      	movs	r3, #0
 80001e0:	e01a      	b.n	8000218 <push+0x4c>
	memcpy(simq.buf + simq.wpoint, x, 16);
 80001e2:	4b0f      	ldr	r3, [pc, #60]	; (8000220 <push+0x54>)
 80001e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80001e8:	4a0d      	ldr	r2, [pc, #52]	; (8000220 <push+0x54>)
 80001ea:	4413      	add	r3, r2
 80001ec:	2210      	movs	r2, #16
 80001ee:	6879      	ldr	r1, [r7, #4]
 80001f0:	4618      	mov	r0, r3
 80001f2:	f001 ff53 	bl	800209c <memcpy>
	simq.wpoint = (simq.wpoint + 16) % 128;
 80001f6:	4b0a      	ldr	r3, [pc, #40]	; (8000220 <push+0x54>)
 80001f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80001fc:	3310      	adds	r3, #16
 80001fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000202:	4a07      	ldr	r2, [pc, #28]	; (8000220 <push+0x54>)
 8000204:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	simq.len ++;
 8000208:	4b05      	ldr	r3, [pc, #20]	; (8000220 <push+0x54>)
 800020a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800020e:	3301      	adds	r3, #1
 8000210:	4a03      	ldr	r2, [pc, #12]	; (8000220 <push+0x54>)
 8000212:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	return 1;
 8000216:	2301      	movs	r3, #1
}
 8000218:	4618      	mov	r0, r3
 800021a:	3708      	adds	r7, #8
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}
 8000220:	20000154 	.word	0x20000154

08000224 <pop>:
uint8_t pop(void* x) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	if(simq.len == 0) return 0;
 800022c:	4b12      	ldr	r3, [pc, #72]	; (8000278 <pop+0x54>)
 800022e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000232:	2b00      	cmp	r3, #0
 8000234:	d101      	bne.n	800023a <pop+0x16>
 8000236:	2300      	movs	r3, #0
 8000238:	e01a      	b.n	8000270 <pop+0x4c>
	memcpy(x, simq.buf + simq.rpoint, 16);
 800023a:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <pop+0x54>)
 800023c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000240:	4a0d      	ldr	r2, [pc, #52]	; (8000278 <pop+0x54>)
 8000242:	4413      	add	r3, r2
 8000244:	2210      	movs	r2, #16
 8000246:	4619      	mov	r1, r3
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f001 ff27 	bl	800209c <memcpy>
	simq.rpoint = (simq.rpoint + 16) % 128;
 800024e:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <pop+0x54>)
 8000250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000254:	3310      	adds	r3, #16
 8000256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800025a:	4a07      	ldr	r2, [pc, #28]	; (8000278 <pop+0x54>)
 800025c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	simq.len --;
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <pop+0x54>)
 8000262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000266:	3b01      	subs	r3, #1
 8000268:	4a03      	ldr	r2, [pc, #12]	; (8000278 <pop+0x54>)
 800026a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	return 1;
 800026e:	2301      	movs	r3, #1
 8000270:	4618      	mov	r0, r3
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000154 	.word	0x20000154

0800027c <comms_init>:
usbd_device * usb;
struct params_t params;

//void apply_offsets(int16_t* buf);

void comms_init(usbd_device * usbd){
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	usb = usbd;
 8000284:	4a05      	ldr	r2, [pc, #20]	; (800029c <comms_init+0x20>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	6013      	str	r3, [r2, #0]
	memset(&params, 0, sizeof(struct params_t));
 800028a:	220c      	movs	r2, #12
 800028c:	2100      	movs	r1, #0
 800028e:	4804      	ldr	r0, [pc, #16]	; (80002a0 <comms_init+0x24>)
 8000290:	f001 ff0f 	bl	80020b2 <memset>
	//usbd_ep_write_packet(usb, 0x81, simq.buf, 32);
}
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	200001e0 	.word	0x200001e0
 80002a0:	20000148 	.word	0x20000148

080002a4 <exti4_isr>:

// From here we get notified of new data
// So we need to read it out
void exti4_isr(){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	exti_reset_request(EXTI4);
 80002a8:	2010      	movs	r0, #16
 80002aa:	f000 fe13 	bl	8000ed4 <exti_reset_request>
	gpio_toggle(GPIOD, GPIO14);
 80002ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002b2:	4806      	ldr	r0, [pc, #24]	; (80002cc <exti4_isr+0x28>)
 80002b4:	f000 fd85 	bl	8000dc2 <gpio_toggle>
	mpu_getsample();
 80002b8:	f000 fa06 	bl	80006c8 <mpu_getsample>
	gpio_clear(GPIOD, GPIO13);
 80002bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c0:	4802      	ldr	r0, [pc, #8]	; (80002cc <exti4_isr+0x28>)
 80002c2:	f000 fd7b 	bl	8000dbc <gpio_clear>
}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40020c00 	.word	0x40020c00

080002d0 <comms_new_sample>:

// Data has been read out, push it into FIFO
void comms_new_sample(uint8_t* buf){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	//apply_offsets((int16_t*) buf);
	cm_disable_interrupts();
 80002d8:	f7ff ff70 	bl	80001bc <cm_disable_interrupts>
	push(buf);
 80002dc:	6878      	ldr	r0, [r7, #4]
 80002de:	f7ff ff75 	bl	80001cc <push>
	cm_enable_interrupts();
 80002e2:	f7ff ff63 	bl	80001ac <cm_enable_interrupts>
}
 80002e6:	bf00      	nop
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <tx_callback>:

// Data has been transmitted, transmit new data
void tx_callback(usbd_device *usbd_dev, uint8_t ep){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	460b      	mov	r3, r1
 80002fa:	70fb      	strb	r3, [r7, #3]
	static uint8_t localbuf[32];
	gpio_set(GPIOD, GPIO13);
 80002fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000300:	480e      	ldr	r0, [pc, #56]	; (800033c <tx_callback+0x4c>)
 8000302:	f000 fd59 	bl	8000db8 <gpio_set>
	memset(localbuf, 0, 32);
 8000306:	2220      	movs	r2, #32
 8000308:	2100      	movs	r1, #0
 800030a:	480d      	ldr	r0, [pc, #52]	; (8000340 <tx_callback+0x50>)
 800030c:	f001 fed1 	bl	80020b2 <memset>
	cm_disable_interrupts();
 8000310:	f7ff ff54 	bl	80001bc <cm_disable_interrupts>
	pop(localbuf);
 8000314:	480a      	ldr	r0, [pc, #40]	; (8000340 <tx_callback+0x50>)
 8000316:	f7ff ff85 	bl	8000224 <pop>
	pop(localbuf + 16);
 800031a:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <tx_callback+0x54>)
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ff81 	bl	8000224 <pop>
	cm_enable_interrupts();
 8000322:	f7ff ff43 	bl	80001ac <cm_enable_interrupts>
	usbd_ep_write_packet(usb, 0x81, localbuf, 32);
 8000326:	4b08      	ldr	r3, [pc, #32]	; (8000348 <tx_callback+0x58>)
 8000328:	6818      	ldr	r0, [r3, #0]
 800032a:	2320      	movs	r3, #32
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <tx_callback+0x50>)
 800032e:	2181      	movs	r1, #129	; 0x81
 8000330:	f000 ff25 	bl	800117e <usbd_ep_write_packet>
}
 8000334:	bf00      	nop
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	40020c00 	.word	0x40020c00
 8000340:	20000028 	.word	0x20000028
 8000344:	20000038 	.word	0x20000038
 8000348:	200001e0 	.word	0x200001e0

0800034c <hid_control_request_class>:

// Handle GET_REPORT and SET_REPORT
enum usbd_request_return_codes hid_control_request_class(usbd_device *dev, struct usb_setup_data *req, uint8_t **buf, uint16_t *len,
		void (**complete)(usbd_device *dev, struct usb_setup_data *req))
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
 8000358:	603b      	str	r3, [r7, #0]
	(void)complete;
	(void)dev;
	if((req->bRequest == USB_REQ_GET_REPORT) && USB_VAL_IS_FEATURE(req->wValue)) {
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	785b      	ldrb	r3, [r3, #1]
 800035e:	2b01      	cmp	r3, #1
 8000360:	d10f      	bne.n	8000382 <hid_control_request_class+0x36>
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	885b      	ldrh	r3, [r3, #2]
 8000366:	b29b      	uxth	r3, r3
 8000368:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800036c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000370:	d107      	bne.n	8000382 <hid_control_request_class+0x36>
		//gpio_set(GPIOD, GPIO13);
		*buf = (uint8_t*) &params;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4a13      	ldr	r2, [pc, #76]	; (80003c4 <hid_control_request_class+0x78>)
 8000376:	601a      	str	r2, [r3, #0]
		*len = sizeof(struct params_t);
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	220c      	movs	r2, #12
 800037c:	801a      	strh	r2, [r3, #0]
		return USBD_REQ_HANDLED;
 800037e:	2301      	movs	r3, #1
 8000380:	e01b      	b.n	80003ba <hid_control_request_class+0x6e>
	}
	if((req->bRequest == USB_REQ_SET_REPORT) && USB_VAL_IS_FEATURE(req->wValue)) {
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	785b      	ldrb	r3, [r3, #1]
 8000386:	2b09      	cmp	r3, #9
 8000388:	d116      	bne.n	80003b8 <hid_control_request_class+0x6c>
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	885b      	ldrh	r3, [r3, #2]
 800038e:	b29b      	uxth	r3, r3
 8000390:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000394:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000398:	d10e      	bne.n	80003b8 <hid_control_request_class+0x6c>
		//gpio_set(GPIOD, GPIO13);
		memcpy(&params, *buf, sizeof(params));
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	220c      	movs	r2, #12
 80003a0:	4619      	mov	r1, r3
 80003a2:	4808      	ldr	r0, [pc, #32]	; (80003c4 <hid_control_request_class+0x78>)
 80003a4:	f001 fe7a 	bl	800209c <memcpy>
		*buf = (uint8_t*) &params;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a06      	ldr	r2, [pc, #24]	; (80003c4 <hid_control_request_class+0x78>)
 80003ac:	601a      	str	r2, [r3, #0]
		*len = 0;
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	2200      	movs	r2, #0
 80003b2:	801a      	strh	r2, [r3, #0]

		return USBD_REQ_HANDLED;
 80003b4:	2301      	movs	r3, #1
 80003b6:	e000      	b.n	80003ba <hid_control_request_class+0x6e>
	}
	return USBD_REQ_NOTSUPP;
 80003b8:	2300      	movs	r3, #0

}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3710      	adds	r7, #16
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	20000148 	.word	0x20000148

080003c8 <led_setup>:
#include <init.h>

unsigned long SystemCoreClock = 16000000UL;

void led_setup(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	rcc_periph_clock_enable(RCC_GPIOD);
 80003cc:	f240 6003 	movw	r0, #1539	; 0x603
 80003d0:	f000 fdf2 	bl	8000fb8 <rcc_periph_clock_enable>
	gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO12 | GPIO13 | GPIO14 | GPIO15);
 80003d4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80003d8:	2200      	movs	r2, #0
 80003da:	2101      	movs	r1, #1
 80003dc:	4802      	ldr	r0, [pc, #8]	; (80003e8 <led_setup+0x20>)
 80003de:	f000 fcf9 	bl	8000dd4 <gpio_mode_setup>

}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40020c00 	.word	0x40020c00

080003ec <spi_setup>:
void spi_setup(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	rcc_periph_clock_enable(RCC_SPI1);
 80003f0:	f640 008c 	movw	r0, #2188	; 0x88c
 80003f4:	f000 fde0 	bl	8000fb8 <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_GPIOA);
 80003f8:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80003fc:	f000 fddc 	bl	8000fb8 <rcc_periph_clock_enable>

	gpio_mode_setup(GPIOA, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO4);
 8000400:	2310      	movs	r3, #16
 8000402:	2200      	movs	r2, #0
 8000404:	2101      	movs	r1, #1
 8000406:	481c      	ldr	r0, [pc, #112]	; (8000478 <spi_setup+0x8c>)
 8000408:	f000 fce4 	bl	8000dd4 <gpio_mode_setup>
	gpio_set(GPIOA, GPIO4);
 800040c:	2110      	movs	r1, #16
 800040e:	481a      	ldr	r0, [pc, #104]	; (8000478 <spi_setup+0x8c>)
 8000410:	f000 fcd2 	bl	8000db8 <gpio_set>

	gpio_mode_setup(GPIOA, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO5 | GPIO6 | GPIO7);
 8000414:	23e0      	movs	r3, #224	; 0xe0
 8000416:	2200      	movs	r2, #0
 8000418:	2102      	movs	r1, #2
 800041a:	4817      	ldr	r0, [pc, #92]	; (8000478 <spi_setup+0x8c>)
 800041c:	f000 fcda 	bl	8000dd4 <gpio_mode_setup>
	gpio_set_af(GPIOA, GPIO_AF5, GPIO5 | GPIO6 | GPIO7);
 8000420:	22e0      	movs	r2, #224	; 0xe0
 8000422:	2105      	movs	r1, #5
 8000424:	4814      	ldr	r0, [pc, #80]	; (8000478 <spi_setup+0x8c>)
 8000426:	f000 fcf7 	bl	8000e18 <gpio_set_af>

	spi_reset(SPI1);
 800042a:	4814      	ldr	r0, [pc, #80]	; (800047c <spi_setup+0x90>)
 800042c:	f000 fde2 	bl	8000ff4 <spi_reset>
	spi_set_master_mode(SPI1);
 8000430:	4812      	ldr	r0, [pc, #72]	; (800047c <spi_setup+0x90>)
 8000432:	f000 fe43 	bl	80010bc <spi_set_master_mode>
	spi_set_baudrate_prescaler(SPI1, SPI_CR1_BR_FPCLK_DIV_128);
 8000436:	2106      	movs	r1, #6
 8000438:	4810      	ldr	r0, [pc, #64]	; (800047c <spi_setup+0x90>)
 800043a:	f000 fe34 	bl	80010a6 <spi_set_baudrate_prescaler>
	spi_set_clock_polarity_1(SPI1);
 800043e:	480f      	ldr	r0, [pc, #60]	; (800047c <spi_setup+0x90>)
 8000440:	f000 fe41 	bl	80010c6 <spi_set_clock_polarity_1>
	spi_set_clock_phase_1(SPI1);
 8000444:	480d      	ldr	r0, [pc, #52]	; (800047c <spi_setup+0x90>)
 8000446:	f000 fe43 	bl	80010d0 <spi_set_clock_phase_1>
	spi_set_full_duplex_mode(SPI1);
 800044a:	480c      	ldr	r0, [pc, #48]	; (800047c <spi_setup+0x90>)
 800044c:	f000 fe13 	bl	8001076 <spi_set_full_duplex_mode>
	spi_set_unidirectional_mode(SPI1);
 8000450:	480a      	ldr	r0, [pc, #40]	; (800047c <spi_setup+0x90>)
 8000452:	f000 fe0b 	bl	800106c <spi_set_unidirectional_mode>
	spi_set_dff_8bit(SPI1);
 8000456:	4809      	ldr	r0, [pc, #36]	; (800047c <spi_setup+0x90>)
 8000458:	f000 fe3f 	bl	80010da <spi_set_dff_8bit>
	spi_enable_software_slave_management(SPI1);
 800045c:	4807      	ldr	r0, [pc, #28]	; (800047c <spi_setup+0x90>)
 800045e:	f000 fe0f 	bl	8001080 <spi_enable_software_slave_management>
	spi_send_msb_first(SPI1);
 8000462:	4806      	ldr	r0, [pc, #24]	; (800047c <spi_setup+0x90>)
 8000464:	f000 fe1a 	bl	800109c <spi_send_msb_first>
	spi_set_nss_high(SPI1);
 8000468:	4804      	ldr	r0, [pc, #16]	; (800047c <spi_setup+0x90>)
 800046a:	f000 fe12 	bl	8001092 <spi_set_nss_high>
	spi_enable(SPI1);
 800046e:	4803      	ldr	r0, [pc, #12]	; (800047c <spi_setup+0x90>)
 8000470:	f000 fdf0 	bl	8001054 <spi_enable>
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40020000 	.word	0x40020000
 800047c:	40013000 	.word	0x40013000

08000480 <clk_setup>:
void clk_setup(void) {
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	//rcc_clock_setup_hse_3v3(&rcc_hse_8mhz_3v3[RCC_CLOCK_3V3_168MHZ]);
	rcc_clock_setup_hse_3v3(&rcc_hse_8mhz_3v3[RCC_CLOCK_3V3_120MHZ]);
 8000484:	4804      	ldr	r0, [pc, #16]	; (8000498 <clk_setup+0x18>)
 8000486:	f000 fc41 	bl	8000d0c <rcc_clock_setup_hse_3v3>
	SystemCoreClock = 120000000UL;
 800048a:	4b04      	ldr	r3, [pc, #16]	; (800049c <clk_setup+0x1c>)
 800048c:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <clk_setup+0x20>)
 800048e:	601a      	str	r2, [r3, #0]
	dwt_enable_cycle_counter();
 8000490:	f001 fb72 	bl	8001b78 <dwt_enable_cycle_counter>
}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}
 8000498:	080021bc 	.word	0x080021bc
 800049c:	20000000 	.word	0x20000000
 80004a0:	07270e00 	.word	0x07270e00

080004a4 <exti_setup>:
void exti_setup(void){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	rcc_periph_clock_enable(RCC_SYSCFG);
 80004a8:	f640 008e 	movw	r0, #2190	; 0x88e
 80004ac:	f000 fd84 	bl	8000fb8 <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_GPIOC);
 80004b0:	f240 6002 	movw	r0, #1538	; 0x602
 80004b4:	f000 fd80 	bl	8000fb8 <rcc_periph_clock_enable>

    gpio_mode_setup(GPIOC, GPIO_MODE_INPUT, GPIO_PUPD_NONE, GPIO4);
 80004b8:	2310      	movs	r3, #16
 80004ba:	2200      	movs	r2, #0
 80004bc:	2100      	movs	r1, #0
 80004be:	4809      	ldr	r0, [pc, #36]	; (80004e4 <exti_setup+0x40>)
 80004c0:	f000 fc88 	bl	8000dd4 <gpio_mode_setup>

	exti_enable_request(EXTI4);
 80004c4:	2010      	movs	r0, #16
 80004c6:	f000 fcfb 	bl	8000ec0 <exti_enable_request>
	exti_select_source(EXTI4, GPIOC);
 80004ca:	4906      	ldr	r1, [pc, #24]	; (80004e4 <exti_setup+0x40>)
 80004cc:	2010      	movs	r0, #16
 80004ce:	f000 fd07 	bl	8000ee0 <exti_select_source>
	exti_set_trigger(EXTI4, EXTI_TRIGGER_RISING);
 80004d2:	2100      	movs	r1, #0
 80004d4:	2010      	movs	r0, #16
 80004d6:	f000 fcd5 	bl	8000e84 <exti_set_trigger>
    nvic_enable_irq(NVIC_EXTI4_IRQ);
 80004da:	200a      	movs	r0, #10
 80004dc:	f001 fb2e 	bl	8001b3c <nvic_enable_irq>
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40020800 	.word	0x40020800

080004e8 <main>:
#include <usb.h>

struct spiHandle_t spi_hnd = {.spi = SPI1, .cs_port = GPIOA, .cs_pin = GPIO4};

int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
    clk_setup();
 80004ee:	f7ff ffc7 	bl	8000480 <clk_setup>
	led_setup();
 80004f2:	f7ff ff69 	bl	80003c8 <led_setup>
	spi_setup();
 80004f6:	f7ff ff79 	bl	80003ec <spi_setup>

	//delayUS_DWT(1000);

	usbd_device * usb = usb_init();
 80004fa:	f000 fab9 	bl	8000a70 <usb_init>
 80004fe:	6078      	str	r0, [r7, #4]
	comms_init(usb);
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f7ff febb 	bl	800027c <comms_init>
	mpu_start(&spi_hnd);
 8000506:	4802      	ldr	r0, [pc, #8]	; (8000510 <main+0x28>)
 8000508:	f000 f804 	bl	8000514 <mpu_start>

	while(1);
 800050c:	e7fe      	b.n	800050c <main+0x24>
 800050e:	bf00      	nop
 8000510:	20000004 	.word	0x20000004

08000514 <mpu_start>:
void mpu_init(struct spiHandle_t* spi);
void mpu_reset_fifo(struct spiHandle_t* spi);
uint16_t mpu_count(struct spiHandle_t* spi);
void mpu_sendusb(uint8_t* data);

void mpu_start(struct spiHandle_t *spi) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	g_spi = spi;
 800051c:	4a10      	ldr	r2, [pc, #64]	; (8000560 <mpu_start+0x4c>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6013      	str	r3, [r2, #0]
    delayUS_DWT(1000);
 8000522:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000526:	f000 fafd 	bl	8000b24 <delayUS_DWT>
    spi_read_reg(spi, 0x75);
 800052a:	2175      	movs	r1, #117	; 0x75
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f000 f92e 	bl	800078e <spi_read_reg>
    spi_delay();
 8000532:	f000 fa43 	bl	80009bc <spi_delay>
    spi_read_reg(spi, 0x75);
 8000536:	2175      	movs	r1, #117	; 0x75
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f000 f928 	bl	800078e <spi_read_reg>
    spi_delay();
 800053e:	f000 fa3d 	bl	80009bc <spi_delay>
    spi_read_reg(spi, 0x75);
 8000542:	2175      	movs	r1, #117	; 0x75
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f000 f922 	bl	800078e <spi_read_reg>
    spi_delay();
 800054a:	f000 fa37 	bl	80009bc <spi_delay>
    mpu_init(spi);
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f000 f838 	bl	80005c4 <mpu_init>
	exti_setup();
 8000554:	f7ff ffa6 	bl	80004a4 <exti_setup>
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000204 	.word	0x20000204

08000564 <mpu_sendusb>:
void mpu_sendusb(uint8_t* data){
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	comms_new_sample(&buf[0]);
 800056c:	4813      	ldr	r0, [pc, #76]	; (80005bc <mpu_sendusb+0x58>)
 800056e:	f7ff feaf 	bl	80002d0 <comms_new_sample>
	(buf[0]&0x80) ? gpio_set(GPIOD, GPIO12) : gpio_clear(GPIOD, GPIO12);
 8000572:	4b12      	ldr	r3, [pc, #72]	; (80005bc <mpu_sendusb+0x58>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	b25b      	sxtb	r3, r3
 8000578:	2b00      	cmp	r3, #0
 800057a:	da05      	bge.n	8000588 <mpu_sendusb+0x24>
 800057c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000580:	480f      	ldr	r0, [pc, #60]	; (80005c0 <mpu_sendusb+0x5c>)
 8000582:	f000 fc19 	bl	8000db8 <gpio_set>
 8000586:	e004      	b.n	8000592 <mpu_sendusb+0x2e>
 8000588:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058c:	480c      	ldr	r0, [pc, #48]	; (80005c0 <mpu_sendusb+0x5c>)
 800058e:	f000 fc15 	bl	8000dbc <gpio_clear>
	(buf[2]&0x80) ? gpio_set(GPIOD, GPIO15) : gpio_clear(GPIOD, GPIO15);
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <mpu_sendusb+0x58>)
 8000594:	789b      	ldrb	r3, [r3, #2]
 8000596:	b25b      	sxtb	r3, r3
 8000598:	2b00      	cmp	r3, #0
 800059a:	da05      	bge.n	80005a8 <mpu_sendusb+0x44>
 800059c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a0:	4807      	ldr	r0, [pc, #28]	; (80005c0 <mpu_sendusb+0x5c>)
 80005a2:	f000 fc09 	bl	8000db8 <gpio_set>
}
 80005a6:	e004      	b.n	80005b2 <mpu_sendusb+0x4e>
	(buf[2]&0x80) ? gpio_set(GPIOD, GPIO15) : gpio_clear(GPIOD, GPIO15);
 80005a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <mpu_sendusb+0x5c>)
 80005ae:	f000 fc05 	bl	8000dbc <gpio_clear>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200001e4 	.word	0x200001e4
 80005c0:	40020c00 	.word	0x40020c00

080005c4 <mpu_init>:

void mpu_init(struct spiHandle_t* spi){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
    spi_write_reg_d(spi, 0x6B, 0x80); // Reset all
 80005cc:	2280      	movs	r2, #128	; 0x80
 80005ce:	216b      	movs	r1, #107	; 0x6b
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 f94a 	bl	800086a <spi_write_reg_d>
    delayUS_DWT(5000);
 80005d6:	f241 3088 	movw	r0, #5000	; 0x1388
 80005da:	f000 faa3 	bl	8000b24 <delayUS_DWT>
    spi_write_reg_d(spi, 0x6B, 1); // Power up
 80005de:	2201      	movs	r2, #1
 80005e0:	216b      	movs	r1, #107	; 0x6b
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f000 f941 	bl	800086a <spi_write_reg_d>
    spi_write_reg_d(spi, 0x6c, 0); // Enable all sensors, all axes
 80005e8:	2200      	movs	r2, #0
 80005ea:	216c      	movs	r1, #108	; 0x6c
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 f93c 	bl	800086a <spi_write_reg_d>
    spi_write_reg_d(spi, 0x19, 0); //
 80005f2:	2200      	movs	r2, #0
 80005f4:	2119      	movs	r1, #25
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f000 f937 	bl	800086a <spi_write_reg_d>
    spi_write_reg_d(spi, 0x1a, 0x01); // DLPF
 80005fc:	2201      	movs	r2, #1
 80005fe:	211a      	movs	r1, #26
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f000 f932 	bl	800086a <spi_write_reg_d>
    spi_write_reg_d(spi, 0x1d, 0x01); // -||-
 8000606:	2201      	movs	r2, #1
 8000608:	211d      	movs	r1, #29
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 f92d 	bl	800086a <spi_write_reg_d>
    spi_write_reg_d(spi, 0x23, 0x78); // FIFO setup
 8000610:	2278      	movs	r2, #120	; 0x78
 8000612:	2123      	movs	r1, #35	; 0x23
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 f928 	bl	800086a <spi_write_reg_d>
    spi_write_reg_d(spi, 0x37, 0x30); // int setup
 800061a:	2230      	movs	r2, #48	; 0x30
 800061c:	2137      	movs	r1, #55	; 0x37
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f923 	bl	800086a <spi_write_reg_d>
    spi_write_reg_d(spi, 0x38, 0x01); // Data interrupt
 8000624:	2201      	movs	r2, #1
 8000626:	2138      	movs	r1, #56	; 0x38
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f000 f91e 	bl	800086a <spi_write_reg_d>
    mpu_reset_fifo(spi);
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f000 f804 	bl	800063c <mpu_reset_fifo>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <mpu_reset_fifo>:

void mpu_reset_fifo(struct spiHandle_t* spi) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
    spi_modeSlow(spi);
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f000 f9ab 	bl	80009a0 <spi_modeSlow>
    spi_delay(10);
 800064a:	200a      	movs	r0, #10
 800064c:	f000 f9b6 	bl	80009bc <spi_delay>
    uint8_t user_ctrl = spi_read_reg_d(spi, 0x6a) & (~0x44);
 8000650:	216a      	movs	r1, #106	; 0x6a
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f000 f8c9 	bl	80007ea <spi_read_reg_d>
 8000658:	4603      	mov	r3, r0
 800065a:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800065e:	73fb      	strb	r3, [r7, #15]
    uint8_t fifo_en = spi_read_reg_d(spi, 0x23);
 8000660:	2123      	movs	r1, #35	; 0x23
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f000 f8c1 	bl	80007ea <spi_read_reg_d>
 8000668:	4603      	mov	r3, r0
 800066a:	73bb      	strb	r3, [r7, #14]
    spi_write_reg_d(spi, 0x23, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2123      	movs	r1, #35	; 0x23
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f000 f8fa 	bl	800086a <spi_write_reg_d>
    spi_write_reg_d(spi, 0x6a, user_ctrl);
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	461a      	mov	r2, r3
 800067a:	216a      	movs	r1, #106	; 0x6a
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f000 f8f4 	bl	800086a <spi_write_reg_d>
    spi_write_reg_d(spi, 0x6a, user_ctrl | 0x04);
 8000682:	7bfb      	ldrb	r3, [r7, #15]
 8000684:	f043 0304 	orr.w	r3, r3, #4
 8000688:	b2db      	uxtb	r3, r3
 800068a:	461a      	mov	r2, r3
 800068c:	216a      	movs	r1, #106	; 0x6a
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f000 f8eb 	bl	800086a <spi_write_reg_d>
    spi_write_reg_d(spi, 0x6a, user_ctrl | 0x40);
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800069a:	b2db      	uxtb	r3, r3
 800069c:	461a      	mov	r2, r3
 800069e:	216a      	movs	r1, #106	; 0x6a
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 f8e2 	bl	800086a <spi_write_reg_d>
    spi_write_reg_d(spi, 0x23, fifo_en);
 80006a6:	7bbb      	ldrb	r3, [r7, #14]
 80006a8:	461a      	mov	r2, r3
 80006aa:	2123      	movs	r1, #35	; 0x23
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f000 f8dc 	bl	800086a <spi_write_reg_d>
    spi_modeFast(spi);
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f000 f966 	bl	8000984 <spi_modeFast>
    delayUS_DWT(50);
 80006b8:	2032      	movs	r0, #50	; 0x32
 80006ba:	f000 fa33 	bl	8000b24 <delayUS_DWT>

}
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <mpu_getsample>:

void mpu_getsample(){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
	uint32_t time = dwt_read_cycle_counter();
 80006ce:	f001 fa6d 	bl	8001bac <dwt_read_cycle_counter>
 80006d2:	60b8      	str	r0, [r7, #8]
	spi_delay();
 80006d4:	f000 f972 	bl	80009bc <spi_delay>
	uint8_t n = mpu_count(g_spi)/12;
 80006d8:	4b23      	ldr	r3, [pc, #140]	; (8000768 <mpu_getsample+0xa0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 f849 	bl	8000774 <mpu_count>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b21      	ldr	r3, [pc, #132]	; (800076c <mpu_getsample+0xa4>)
 80006e8:	fba3 2302 	umull	r2, r3, r3, r2
 80006ec:	08db      	lsrs	r3, r3, #3
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	71fb      	strb	r3, [r7, #7]
	for(int i = 0 ; i < n; i++) {
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	e023      	b.n	8000740 <mpu_getsample+0x78>
		spi_delay();
 80006f8:	f000 f960 	bl	80009bc <spi_delay>
		spi_read_reg_burst(g_spi, 0x74, 12, buf);
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <mpu_getsample+0xa0>)
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <mpu_getsample+0xa8>)
 8000702:	220c      	movs	r2, #12
 8000704:	2174      	movs	r1, #116	; 0x74
 8000706:	f000 f900 	bl	800090a <spi_read_reg_burst>
		BUF_SET_TIME(buf, time);
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	0e1b      	lsrs	r3, r3, #24
 800070e:	b2da      	uxtb	r2, r3
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <mpu_getsample+0xa8>)
 8000712:	731a      	strb	r2, [r3, #12]
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	0c1b      	lsrs	r3, r3, #16
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <mpu_getsample+0xa8>)
 800071c:	735a      	strb	r2, [r3, #13]
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	0a1b      	lsrs	r3, r3, #8
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <mpu_getsample+0xa8>)
 8000726:	739a      	strb	r2, [r3, #14]
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	4b10      	ldr	r3, [pc, #64]	; (8000770 <mpu_getsample+0xa8>)
 800072e:	73da      	strb	r2, [r3, #15]
		mpu_sendusb(buf);
 8000730:	480f      	ldr	r0, [pc, #60]	; (8000770 <mpu_getsample+0xa8>)
 8000732:	f7ff ff17 	bl	8000564 <mpu_sendusb>
		spi_delay();
 8000736:	f000 f941 	bl	80009bc <spi_delay>
	for(int i = 0 ; i < n; i++) {
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	3301      	adds	r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	79fa      	ldrb	r2, [r7, #7]
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	429a      	cmp	r2, r3
 8000746:	dcd7      	bgt.n	80006f8 <mpu_getsample+0x30>
	}
	delayUS_DWT(4);
 8000748:	2004      	movs	r0, #4
 800074a:	f000 f9eb 	bl	8000b24 <delayUS_DWT>
	if(n > 39){
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	2b27      	cmp	r3, #39	; 0x27
 8000752:	d904      	bls.n	800075e <mpu_getsample+0x96>
		//gpio_set(GPIOD, GPIO13);
		//delayMS_DWT(1000);
		//gpio_clear(GPIOD, GPIO13);
		mpu_reset_fifo(g_spi);
 8000754:	4b04      	ldr	r3, [pc, #16]	; (8000768 <mpu_getsample+0xa0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff6f 	bl	800063c <mpu_reset_fifo>
	}
}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000204 	.word	0x20000204
 800076c:	aaaaaaab 	.word	0xaaaaaaab
 8000770:	200001e4 	.word	0x200001e4

08000774 <mpu_count>:

uint16_t mpu_count(struct spiHandle_t* spi) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
    return spi_read_reg16(spi, 0x72);
 800077c:	2172      	movs	r1, #114	; 0x72
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f000 f887 	bl	8000892 <spi_read_reg16>
 8000784:	4603      	mov	r3, r0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <spi_read_reg>:
#include "spi.h"

uint8_t spi_read_reg(struct spiHandle_t* spi, uint8_t reg) {
 800078e:	b580      	push	{r7, lr}
 8000790:	b084      	sub	sp, #16
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
 8000796:	460b      	mov	r3, r1
 8000798:	70fb      	strb	r3, [r7, #3]
	gpio_clear(spi->cs_port, spi->cs_pin);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	685a      	ldr	r2, [r3, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	891b      	ldrh	r3, [r3, #8]
 80007a2:	4619      	mov	r1, r3
 80007a4:	4610      	mov	r0, r2
 80007a6:	f000 fb09 	bl	8000dbc <gpio_clear>
	spi_xfer(spi->spi, reg | 0x80);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	78fb      	ldrb	r3, [r7, #3]
 80007b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	4619      	mov	r1, r3
 80007ba:	4610      	mov	r0, r2
 80007bc:	f000 fc4f 	bl	800105e <spi_xfer>
	uint8_t ret = spi_xfer(spi->spi, 0x00);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fc49 	bl	800105e <spi_xfer>
 80007cc:	4603      	mov	r3, r0
 80007ce:	73fb      	strb	r3, [r7, #15]
	gpio_set(spi->cs_port, spi->cs_pin);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	685a      	ldr	r2, [r3, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	891b      	ldrh	r3, [r3, #8]
 80007d8:	4619      	mov	r1, r3
 80007da:	4610      	mov	r0, r2
 80007dc:	f000 faec 	bl	8000db8 <gpio_set>
	return ret;
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <spi_read_reg_d>:
uint8_t spi_read_reg_d(struct spiHandle_t* spi, uint8_t reg) {
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b084      	sub	sp, #16
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
 80007f2:	460b      	mov	r3, r1
 80007f4:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = spi_read_reg(spi, reg);
 80007f6:	78fb      	ldrb	r3, [r7, #3]
 80007f8:	4619      	mov	r1, r3
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ffc7 	bl	800078e <spi_read_reg>
 8000800:	4603      	mov	r3, r0
 8000802:	73fb      	strb	r3, [r7, #15]
	spi_delay();
 8000804:	f000 f8da 	bl	80009bc <spi_delay>
	return ret;
 8000808:	7bfb      	ldrb	r3, [r7, #15]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <spi_write_reg>:
void spi_write_reg(struct spiHandle_t* spi, uint8_t reg, uint8_t data){
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
 800081a:	460b      	mov	r3, r1
 800081c:	70fb      	strb	r3, [r7, #3]
 800081e:	4613      	mov	r3, r2
 8000820:	70bb      	strb	r3, [r7, #2]
	gpio_clear(spi->cs_port, spi->cs_pin);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	685a      	ldr	r2, [r3, #4]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	891b      	ldrh	r3, [r3, #8]
 800082a:	4619      	mov	r1, r3
 800082c:	4610      	mov	r0, r2
 800082e:	f000 fac5 	bl	8000dbc <gpio_clear>
	spi_xfer(spi->spi, reg);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	78fa      	ldrb	r2, [r7, #3]
 8000838:	b292      	uxth	r2, r2
 800083a:	4611      	mov	r1, r2
 800083c:	4618      	mov	r0, r3
 800083e:	f000 fc0e 	bl	800105e <spi_xfer>
	spi_xfer(spi->spi, data);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	78ba      	ldrb	r2, [r7, #2]
 8000848:	b292      	uxth	r2, r2
 800084a:	4611      	mov	r1, r2
 800084c:	4618      	mov	r0, r3
 800084e:	f000 fc06 	bl	800105e <spi_xfer>
	gpio_set(spi->cs_port, spi->cs_pin);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685a      	ldr	r2, [r3, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	891b      	ldrh	r3, [r3, #8]
 800085a:	4619      	mov	r1, r3
 800085c:	4610      	mov	r0, r2
 800085e:	f000 faab 	bl	8000db8 <gpio_set>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <spi_write_reg_d>:
void spi_write_reg_d(struct spiHandle_t* spi, uint8_t reg, uint8_t data){
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
 8000872:	460b      	mov	r3, r1
 8000874:	70fb      	strb	r3, [r7, #3]
 8000876:	4613      	mov	r3, r2
 8000878:	70bb      	strb	r3, [r7, #2]
	spi_write_reg(spi, reg, data);
 800087a:	78ba      	ldrb	r2, [r7, #2]
 800087c:	78fb      	ldrb	r3, [r7, #3]
 800087e:	4619      	mov	r1, r3
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff ffc6 	bl	8000812 <spi_write_reg>
    spi_delay();
 8000886:	f000 f899 	bl	80009bc <spi_delay>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <spi_read_reg16>:
uint16_t spi_read_reg16(struct spiHandle_t* spi, uint8_t reg){
 8000892:	b590      	push	{r4, r7, lr}
 8000894:	b085      	sub	sp, #20
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
 800089a:	460b      	mov	r3, r1
 800089c:	70fb      	strb	r3, [r7, #3]
	gpio_clear(spi->cs_port, spi->cs_pin);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	685a      	ldr	r2, [r3, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	891b      	ldrh	r3, [r3, #8]
 80008a6:	4619      	mov	r1, r3
 80008a8:	4610      	mov	r0, r2
 80008aa:	f000 fa87 	bl	8000dbc <gpio_clear>
	spi_xfer(spi->spi, reg | 0x80);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	78fb      	ldrb	r3, [r7, #3]
 80008b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	4619      	mov	r1, r3
 80008be:	4610      	mov	r0, r2
 80008c0:	f000 fbcd 	bl	800105e <spi_xfer>
	uint16_t ret = spi_xfer(spi->spi, 0x00);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fbc7 	bl	800105e <spi_xfer>
 80008d0:	4603      	mov	r3, r0
 80008d2:	81fb      	strh	r3, [r7, #14]
	ret = (ret<<8) | spi_xfer(spi->spi, 0x00);
 80008d4:	89fb      	ldrh	r3, [r7, #14]
 80008d6:	021b      	lsls	r3, r3, #8
 80008d8:	b21c      	sxth	r4, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2100      	movs	r1, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 fbbc 	bl	800105e <spi_xfer>
 80008e6:	4603      	mov	r3, r0
 80008e8:	b21b      	sxth	r3, r3
 80008ea:	4323      	orrs	r3, r4
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	81fb      	strh	r3, [r7, #14]
	gpio_set(spi->cs_port, spi->cs_pin);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	685a      	ldr	r2, [r3, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	891b      	ldrh	r3, [r3, #8]
 80008f8:	4619      	mov	r1, r3
 80008fa:	4610      	mov	r0, r2
 80008fc:	f000 fa5c 	bl	8000db8 <gpio_set>
	return ret;
 8000900:	89fb      	ldrh	r3, [r7, #14]
}
 8000902:	4618      	mov	r0, r3
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	bd90      	pop	{r4, r7, pc}

0800090a <spi_read_reg_burst>:
void spi_read_reg_burst(struct spiHandle_t* spi, uint8_t reg, int count, uint8_t* buf){
 800090a:	b590      	push	{r4, r7, lr}
 800090c:	b087      	sub	sp, #28
 800090e:	af00      	add	r7, sp, #0
 8000910:	60f8      	str	r0, [r7, #12]
 8000912:	607a      	str	r2, [r7, #4]
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	460b      	mov	r3, r1
 8000918:	72fb      	strb	r3, [r7, #11]
	gpio_clear(spi->cs_port, spi->cs_pin);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	685a      	ldr	r2, [r3, #4]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	891b      	ldrh	r3, [r3, #8]
 8000922:	4619      	mov	r1, r3
 8000924:	4610      	mov	r0, r2
 8000926:	f000 fa49 	bl	8000dbc <gpio_clear>
	spi_xfer(spi->spi, reg | 0x80);
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	7afb      	ldrb	r3, [r7, #11]
 8000930:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000934:	b2db      	uxtb	r3, r3
 8000936:	b29b      	uxth	r3, r3
 8000938:	4619      	mov	r1, r3
 800093a:	4610      	mov	r0, r2
 800093c:	f000 fb8f 	bl	800105e <spi_xfer>
	for(int i = 0; i < count; i++) {
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	e00e      	b.n	8000964 <spi_read_reg_burst+0x5a>
		buf[i] = spi_xfer(spi->spi, 0x00);
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	683a      	ldr	r2, [r7, #0]
 800094a:	18d4      	adds	r4, r2, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f000 fb83 	bl	800105e <spi_xfer>
 8000958:	4603      	mov	r3, r0
 800095a:	b2db      	uxtb	r3, r3
 800095c:	7023      	strb	r3, [r4, #0]
	for(int i = 0; i < count; i++) {
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	3301      	adds	r3, #1
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	697a      	ldr	r2, [r7, #20]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	429a      	cmp	r2, r3
 800096a:	dbec      	blt.n	8000946 <spi_read_reg_burst+0x3c>
	}
	gpio_set(spi->cs_port, spi->cs_pin);
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	685a      	ldr	r2, [r3, #4]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	891b      	ldrh	r3, [r3, #8]
 8000974:	4619      	mov	r1, r3
 8000976:	4610      	mov	r0, r2
 8000978:	f000 fa1e 	bl	8000db8 <gpio_set>
}
 800097c:	bf00      	nop
 800097e:	371c      	adds	r7, #28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd90      	pop	{r4, r7, pc}

08000984 <spi_modeFast>:
void spi_modeFast(struct spiHandle_t* spi){
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	spi_set_baudrate_prescaler(spi->spi, SPI_CR1_BR_FPCLK_DIV_8);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2102      	movs	r1, #2
 8000992:	4618      	mov	r0, r3
 8000994:	f000 fb87 	bl	80010a6 <spi_set_baudrate_prescaler>
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <spi_modeSlow>:
void spi_modeSlow(struct spiHandle_t* spi){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	spi_set_baudrate_prescaler(spi->spi, SPI_CR1_BR_FPCLK_DIV_128);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2106      	movs	r1, #6
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 fb79 	bl	80010a6 <spi_set_baudrate_prescaler>
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <spi_delay>:
void spi_delay(){
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	delayUS_DWT(4);
 80009c0:	2004      	movs	r0, #4
 80009c2:	f000 f8af 	bl	8000b24 <delayUS_DWT>
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <hid_control_request>:
/* Buffer used for control requests. */
uint8_t usbd_control_buffer[128];

static enum usbd_request_return_codes hid_control_request(usbd_device *dev, struct usb_setup_data *req, uint8_t **buf, uint16_t *len,
			void (**complete)(usbd_device *dev, struct usb_setup_data *req))
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
 80009d8:	603b      	str	r3, [r7, #0]
	(void)complete;
	(void)dev;

	if((req->bmRequestType != 0x81) ||
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b81      	cmp	r3, #129	; 0x81
 80009e0:	d109      	bne.n	80009f6 <hid_control_request+0x2a>
	   (req->bRequest != USB_REQ_GET_DESCRIPTOR) ||
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	785b      	ldrb	r3, [r3, #1]
	if((req->bmRequestType != 0x81) ||
 80009e6:	2b06      	cmp	r3, #6
 80009e8:	d105      	bne.n	80009f6 <hid_control_request+0x2a>
	   (req->wValue != 0x2200))
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	885b      	ldrh	r3, [r3, #2]
 80009ee:	b29b      	uxth	r3, r3
	   (req->bRequest != USB_REQ_GET_DESCRIPTOR) ||
 80009f0:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 80009f4:	d001      	beq.n	80009fa <hid_control_request+0x2e>
		return USBD_REQ_NOTSUPP;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e006      	b.n	8000a08 <hid_control_request+0x3c>

	/* Handle the HID report descriptor. */
	*buf = (uint8_t *)hid_report_descriptor;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <hid_control_request+0x48>)
 80009fe:	601a      	str	r2, [r3, #0]
	*len = sizeof(hid_report_descriptor);
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	2216      	movs	r2, #22
 8000a04:	801a      	strh	r2, [r3, #0]

	return USBD_REQ_HANDLED;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	080020e8 	.word	0x080020e8

08000a18 <hid_set_config>:

static void hid_set_config(usbd_device *dev, uint16_t wValue)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	807b      	strh	r3, [r7, #2]
	(void)wValue;

	usbd_ep_setup(dev, 0x81, USB_ENDPOINT_ATTR_INTERRUPT, 32, tx_callback);
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <hid_set_config+0x48>)
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2320      	movs	r3, #32
 8000a2a:	2203      	movs	r2, #3
 8000a2c:	2181      	movs	r1, #129	; 0x81
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f000 fb84 	bl	800113c <usbd_ep_setup>

	usbd_register_control_callback(
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <hid_set_config+0x4c>)
 8000a36:	227f      	movs	r2, #127	; 0x7f
 8000a38:	2121      	movs	r1, #33	; 0x21
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f000 ff1b 	bl	8001876 <usbd_register_control_callback>
						dev,
						USB_REQ_TYPE_CLASS | USB_REQ_TYPE_INTERFACE,
						USB_REQ_TYPE_TYPE | USB_REQ_TYPE_RECIPIENT,
						hid_control_request_class);

	usbd_register_control_callback(
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <hid_set_config+0x50>)
 8000a42:	227f      	movs	r2, #127	; 0x7f
 8000a44:	2101      	movs	r1, #1
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 ff15 	bl	8001876 <usbd_register_control_callback>
				dev,
				USB_REQ_TYPE_STANDARD | USB_REQ_TYPE_INTERFACE,
				USB_REQ_TYPE_TYPE | USB_REQ_TYPE_RECIPIENT,
				hid_control_request);

	usbd_ep_write_packet(dev, 0x81, usbd_control_buffer, 32);
 8000a4c:	2320      	movs	r3, #32
 8000a4e:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <hid_set_config+0x54>)
 8000a50:	2181      	movs	r1, #129	; 0x81
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f000 fb93 	bl	800117e <usbd_ep_write_packet>
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	080002f1 	.word	0x080002f1
 8000a64:	0800034d 	.word	0x0800034d
 8000a68:	080009cd 	.word	0x080009cd
 8000a6c:	20000208 	.word	0x20000208

08000a70 <usb_init>:


usbd_device * usb_init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af04      	add	r7, sp, #16
	rcc_periph_clock_enable(RCC_GPIOA);
 8000a76:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8000a7a:	f000 fa9d 	bl	8000fb8 <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_OTGFS);
 8000a7e:	f240 6087 	movw	r0, #1671	; 0x687
 8000a82:	f000 fa99 	bl	8000fb8 <rcc_periph_clock_enable>

	gpio_mode_setup(GPIOA, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO11 | GPIO12);
 8000a86:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	4815      	ldr	r0, [pc, #84]	; (8000ae4 <usb_init+0x74>)
 8000a90:	f000 f9a0 	bl	8000dd4 <gpio_mode_setup>
	gpio_set_af(GPIOA, GPIO_AF10, GPIO11 | GPIO12);
 8000a94:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000a98:	210a      	movs	r1, #10
 8000a9a:	4812      	ldr	r0, [pc, #72]	; (8000ae4 <usb_init+0x74>)
 8000a9c:	f000 f9bc 	bl	8000e18 <gpio_set_af>

	usbd_dev = usbd_init(&otgfs_usb_driver, &dev_descr, &config, usb_strings, 3, usbd_control_buffer, sizeof(usbd_control_buffer));
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	9302      	str	r3, [sp, #8]
 8000aa4:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <usb_init+0x78>)
 8000aa6:	9301      	str	r3, [sp, #4]
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <usb_init+0x7c>)
 8000aae:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <usb_init+0x80>)
 8000ab0:	4910      	ldr	r1, [pc, #64]	; (8000af4 <usb_init+0x84>)
 8000ab2:	4811      	ldr	r0, [pc, #68]	; (8000af8 <usb_init+0x88>)
 8000ab4:	f000 fb16 	bl	80010e4 <usbd_init>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <usb_init+0x8c>)
 8000abc:	601a      	str	r2, [r3, #0]
	usbd_register_set_config_callback(usbd_dev, hid_set_config);
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <usb_init+0x8c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	490f      	ldr	r1, [pc, #60]	; (8000b00 <usb_init+0x90>)
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 fd91 	bl	80015ec <usbd_register_set_config_callback>

	// Low priority
	nvic_set_priority(NVIC_OTG_FS_IRQ, 0x11);
 8000aca:	2111      	movs	r1, #17
 8000acc:	2043      	movs	r0, #67	; 0x43
 8000ace:	f001 f843 	bl	8001b58 <nvic_set_priority>
    nvic_enable_irq(NVIC_OTG_FS_IRQ);
 8000ad2:	2043      	movs	r0, #67	; 0x43
 8000ad4:	f001 f832 	bl	8001b3c <nvic_enable_irq>

	return usbd_dev;
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <usb_init+0x8c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40020000 	.word	0x40020000
 8000ae8:	20000208 	.word	0x20000208
 8000aec:	20000010 	.word	0x20000010
 8000af0:	08002144 	.word	0x08002144
 8000af4:	080020d4 	.word	0x080020d4
 8000af8:	080021f4 	.word	0x080021f4
 8000afc:	20000048 	.word	0x20000048
 8000b00:	08000a19 	.word	0x08000a19

08000b04 <otg_fs_isr>:

void otg_fs_isr(void){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	usbd_poll(usbd_dev);
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <otg_fs_isr+0x1c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 fb11 	bl	8001134 <usbd_poll>
	usbd_poll(usbd_dev);
 8000b12:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <otg_fs_isr+0x1c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 fb0c 	bl	8001134 <usbd_poll>
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000048 	.word	0x20000048

08000b24 <delayUS_DWT>:
#include <util.h>

#pragma GCC push_options
#pragma GCC optimize ("O3")
void delayUS_DWT(uint32_t us) {
 8000b24:	b500      	push	{lr}
	//cm_disable_interrupts();
	volatile uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <delayUS_DWT+0x30>)
 8000b28:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <delayUS_DWT+0x34>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	fba2 2303 	umull	r2, r3, r2, r3
void delayUS_DWT(uint32_t us) {
 8000b30:	b083      	sub	sp, #12
	volatile uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000b32:	0c9b      	lsrs	r3, r3, #18
 8000b34:	fb00 f003 	mul.w	r0, r0, r3
 8000b38:	9000      	str	r0, [sp, #0]
	volatile uint32_t start = dwt_read_cycle_counter();
 8000b3a:	f001 f837 	bl	8001bac <dwt_read_cycle_counter>
 8000b3e:	9001      	str	r0, [sp, #4]
	do  {
	} while(dwt_read_cycle_counter() - start < cycles);
 8000b40:	f001 f834 	bl	8001bac <dwt_read_cycle_counter>
 8000b44:	9b01      	ldr	r3, [sp, #4]
 8000b46:	9a00      	ldr	r2, [sp, #0]
 8000b48:	1ac0      	subs	r0, r0, r3
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	d3f8      	bcc.n	8000b40 <delayUS_DWT+0x1c>
	//cm_enable_interrupts();
}
 8000b4e:	b003      	add	sp, #12
 8000b50:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b54:	20000000 	.word	0x20000000
 8000b58:	431bde83 	.word	0x431bde83

08000b5c <rcc_is_osc_ready>:
	return ((RCC_CIR & RCC_CIR_CSSF) != 0);
}

bool rcc_is_osc_ready(enum rcc_osc osc)
{
	switch (osc) {
 8000b5c:	2806      	cmp	r0, #6
 8000b5e:	d822      	bhi.n	8000ba6 <rcc_is_osc_ready+0x4a>
 8000b60:	e8df f000 	tbb	[pc, r0]
 8000b64:	091c1704 	.word	0x091c1704
 8000b68:	130e      	.short	0x130e
 8000b6a:	15          	.byte	0x15
 8000b6b:	00          	.byte	0x00
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <rcc_is_osc_ready+0x50>)
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	f3c0 6040 	ubfx	r0, r0, #25, #1
 8000b74:	4770      	bx	lr
	case RCC_HSE:
		return RCC_CR & RCC_CR_HSERDY;
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <rcc_is_osc_ready+0x50>)
 8000b78:	6818      	ldr	r0, [r3, #0]
 8000b7a:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8000b7e:	4770      	bx	lr
	case RCC_HSI:
		return RCC_CR & RCC_CR_HSIRDY;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <rcc_is_osc_ready+0x50>)
	case RCC_LSE:
		return RCC_BDCR & RCC_BDCR_LSERDY;
 8000b82:	6818      	ldr	r0, [r3, #0]
 8000b84:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8000b88:	4770      	bx	lr
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <rcc_is_osc_ready+0x54>)
 8000b8c:	e7f9      	b.n	8000b82 <rcc_is_osc_ready+0x26>
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <rcc_is_osc_ready+0x58>)
 8000b90:	e7f7      	b.n	8000b82 <rcc_is_osc_ready+0x26>
	case RCC_PLLSAI:
		return RCC_CR & RCC_CR_PLLSAIRDY;
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <rcc_is_osc_ready+0x50>)
 8000b94:	6818      	ldr	r0, [r3, #0]
 8000b96:	f3c0 7040 	ubfx	r0, r0, #29, #1
 8000b9a:	4770      	bx	lr
	case RCC_PLLI2S:
		return RCC_CR & RCC_CR_PLLI2SRDY;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <rcc_is_osc_ready+0x50>)
 8000b9e:	6818      	ldr	r0, [r3, #0]
 8000ba0:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 8000ba4:	4770      	bx	lr
	}
	return false;
 8000ba6:	2000      	movs	r0, #0
}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40023870 	.word	0x40023870
 8000bb4:	40023874 	.word	0x40023874

08000bb8 <rcc_wait_for_osc_ready>:

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
 8000bb8:	b508      	push	{r3, lr}
 8000bba:	4602      	mov	r2, r0
	while (!rcc_is_osc_ready(osc));
 8000bbc:	4610      	mov	r0, r2
 8000bbe:	f7ff ffcd 	bl	8000b5c <rcc_is_osc_ready>
 8000bc2:	2800      	cmp	r0, #0
 8000bc4:	d0fa      	beq.n	8000bbc <rcc_wait_for_osc_ready+0x4>
}
 8000bc6:	bd08      	pop	{r3, pc}

08000bc8 <rcc_osc_on>:
	}
}

void rcc_osc_on(enum rcc_osc osc)
{
	switch (osc) {
 8000bc8:	2806      	cmp	r0, #6
 8000bca:	d80a      	bhi.n	8000be2 <rcc_osc_on+0x1a>
 8000bcc:	e8df f000 	tbb	[pc, r0]
 8000bd0:	0a1d1804 	.word	0x0a1d1804
 8000bd4:	140f      	.short	0x140f
 8000bd6:	16          	.byte	0x16
 8000bd7:	00          	.byte	0x00
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 8000bd8:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <rcc_osc_on+0x4c>)
 8000bda:	6813      	ldr	r3, [r2, #0]
 8000bdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
		break;
	case RCC_PLLSAI:
		RCC_CR |= RCC_CR_PLLSAION;
		break;
	case RCC_PLLI2S:
		RCC_CR |= RCC_CR_PLLI2SON;
 8000be0:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8000be2:	4770      	bx	lr
		RCC_CR |= RCC_CR_HSEON;
 8000be4:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <rcc_osc_on+0x4c>)
 8000be6:	6813      	ldr	r3, [r2, #0]
 8000be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bec:	e7f8      	b.n	8000be0 <rcc_osc_on+0x18>
		RCC_CR |= RCC_CR_HSION;
 8000bee:	4a09      	ldr	r2, [pc, #36]	; (8000c14 <rcc_osc_on+0x4c>)
		RCC_CSR |= RCC_CSR_LSION;
 8000bf0:	6813      	ldr	r3, [r2, #0]
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	e7f3      	b.n	8000be0 <rcc_osc_on+0x18>
		RCC_BDCR |= RCC_BDCR_LSEON;
 8000bf8:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <rcc_osc_on+0x50>)
 8000bfa:	e7f9      	b.n	8000bf0 <rcc_osc_on+0x28>
		RCC_CSR |= RCC_CSR_LSION;
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <rcc_osc_on+0x54>)
 8000bfe:	e7f7      	b.n	8000bf0 <rcc_osc_on+0x28>
		RCC_CR |= RCC_CR_PLLSAION;
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <rcc_osc_on+0x4c>)
 8000c02:	6813      	ldr	r3, [r2, #0]
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	e7ea      	b.n	8000be0 <rcc_osc_on+0x18>
		RCC_CR |= RCC_CR_PLLI2SON;
 8000c0a:	4a02      	ldr	r2, [pc, #8]	; (8000c14 <rcc_osc_on+0x4c>)
 8000c0c:	6813      	ldr	r3, [r2, #0]
 8000c0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c12:	e7e5      	b.n	8000be0 <rcc_osc_on+0x18>
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40023870 	.word	0x40023870
 8000c1c:	40023874 	.word	0x40023874

08000c20 <rcc_osc_off>:

void rcc_osc_off(enum rcc_osc osc)
{
	switch (osc) {
 8000c20:	2806      	cmp	r0, #6
 8000c22:	d80a      	bhi.n	8000c3a <rcc_osc_off+0x1a>
 8000c24:	e8df f000 	tbb	[pc, r0]
 8000c28:	0a1d1804 	.word	0x0a1d1804
 8000c2c:	140f      	.short	0x140f
 8000c2e:	16          	.byte	0x16
 8000c2f:	00          	.byte	0x00
	case RCC_PLL:
		RCC_CR &= ~RCC_CR_PLLON;
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <rcc_osc_off+0x4c>)
 8000c32:	6813      	ldr	r3, [r2, #0]
 8000c34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
		break;
	case RCC_PLLSAI:
		RCC_CR &= ~RCC_CR_PLLSAION;
		break;
	case RCC_PLLI2S:
		RCC_CR &= ~RCC_CR_PLLI2SON;
 8000c38:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8000c3a:	4770      	bx	lr
		RCC_CR &= ~RCC_CR_HSEON;
 8000c3c:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <rcc_osc_off+0x4c>)
 8000c3e:	6813      	ldr	r3, [r2, #0]
 8000c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c44:	e7f8      	b.n	8000c38 <rcc_osc_off+0x18>
		RCC_CR &= ~RCC_CR_HSION;
 8000c46:	4a09      	ldr	r2, [pc, #36]	; (8000c6c <rcc_osc_off+0x4c>)
		RCC_CSR &= ~RCC_CSR_LSION;
 8000c48:	6813      	ldr	r3, [r2, #0]
 8000c4a:	f023 0301 	bic.w	r3, r3, #1
 8000c4e:	e7f3      	b.n	8000c38 <rcc_osc_off+0x18>
		RCC_BDCR &= ~RCC_BDCR_LSEON;
 8000c50:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <rcc_osc_off+0x50>)
 8000c52:	e7f9      	b.n	8000c48 <rcc_osc_off+0x28>
		RCC_CSR &= ~RCC_CSR_LSION;
 8000c54:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <rcc_osc_off+0x54>)
 8000c56:	e7f7      	b.n	8000c48 <rcc_osc_off+0x28>
		RCC_CR &= ~RCC_CR_PLLSAION;
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <rcc_osc_off+0x4c>)
 8000c5a:	6813      	ldr	r3, [r2, #0]
 8000c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c60:	e7ea      	b.n	8000c38 <rcc_osc_off+0x18>
		RCC_CR &= ~RCC_CR_PLLI2SON;
 8000c62:	4a02      	ldr	r2, [pc, #8]	; (8000c6c <rcc_osc_off+0x4c>)
 8000c64:	6813      	ldr	r3, [r2, #0]
 8000c66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000c6a:	e7e5      	b.n	8000c38 <rcc_osc_off+0x18>
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40023870 	.word	0x40023870
 8000c74:	40023874 	.word	0x40023874

08000c78 <rcc_set_sysclk_source>:

void rcc_set_sysclk_source(uint32_t clk)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8000c78:	4a03      	ldr	r2, [pc, #12]	; (8000c88 <rcc_set_sysclk_source+0x10>)
 8000c7a:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~((1 << 1) | (1 << 0));
 8000c7c:	f023 0303 	bic.w	r3, r3, #3
	RCC_CFGR = (reg32 | clk);
 8000c80:	4318      	orrs	r0, r3
 8000c82:	6010      	str	r0, [r2, #0]
}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40023808 	.word	0x40023808

08000c8c <rcc_set_ppre2>:

void rcc_set_ppre2(uint32_t ppre2)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8000c8c:	4a03      	ldr	r2, [pc, #12]	; (8000c9c <rcc_set_ppre2+0x10>)
 8000c8e:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~((1 << 13) | (1 << 14) | (1 << 15));
 8000c90:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
	RCC_CFGR = (reg32 | (ppre2 << 13));
 8000c94:	ea43 3040 	orr.w	r0, r3, r0, lsl #13
 8000c98:	6010      	str	r0, [r2, #0]
}
 8000c9a:	4770      	bx	lr
 8000c9c:	40023808 	.word	0x40023808

08000ca0 <rcc_set_ppre1>:

void rcc_set_ppre1(uint32_t ppre1)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8000ca0:	4a03      	ldr	r2, [pc, #12]	; (8000cb0 <rcc_set_ppre1+0x10>)
 8000ca2:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~((1 << 10) | (1 << 11) | (1 << 12));
 8000ca4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
	RCC_CFGR = (reg32 | (ppre1 << 10));
 8000ca8:	ea43 2080 	orr.w	r0, r3, r0, lsl #10
 8000cac:	6010      	str	r0, [r2, #0]
}
 8000cae:	4770      	bx	lr
 8000cb0:	40023808 	.word	0x40023808

08000cb4 <rcc_set_hpre>:

void rcc_set_hpre(uint32_t hpre)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8000cb4:	4a03      	ldr	r2, [pc, #12]	; (8000cc4 <rcc_set_hpre+0x10>)
 8000cb6:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~((1 << 4) | (1 << 5) | (1 << 6) | (1 << 7));
 8000cb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
	RCC_CFGR = (reg32 | (hpre << 4));
 8000cbc:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8000cc0:	6010      	str	r0, [r2, #0]
}
 8000cc2:	4770      	bx	lr
 8000cc4:	40023808 	.word	0x40023808

08000cc8 <rcc_set_main_pll_hse>:
	}
	RCC_PLLCFGR = RCC_PLLCFGR_PLLSRC | /* HSE */
		((pllm & RCC_PLLCFGR_PLLM_MASK) << RCC_PLLCFGR_PLLM_SHIFT) |
		((plln & RCC_PLLCFGR_PLLN_MASK) << RCC_PLLCFGR_PLLN_SHIFT) |
		((((pllp >> 1) - 1) & RCC_PLLCFGR_PLLP_MASK) << RCC_PLLCFGR_PLLP_SHIFT) |
		((pllq & RCC_PLLCFGR_PLLQ_MASK) << RCC_PLLCFGR_PLLQ_SHIFT) |
 8000cc8:	061b      	lsls	r3, r3, #24
 8000cca:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
		((pllm & RCC_PLLCFGR_PLLM_MASK) << RCC_PLLCFGR_PLLM_SHIFT) |
 8000cce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		((pllq & RCC_PLLCFGR_PLLQ_MASK) << RCC_PLLCFGR_PLLQ_SHIFT) |
 8000cd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cd6:	4303      	orrs	r3, r0
		((plln & RCC_PLLCFGR_PLLN_MASK) << RCC_PLLCFGR_PLLN_SHIFT) |
 8000cd8:	f647 70c0 	movw	r0, #32704	; 0x7fc0
 8000cdc:	ea00 1181 	and.w	r1, r0, r1, lsl #6
		((pllq & RCC_PLLCFGR_PLLQ_MASK) << RCC_PLLCFGR_PLLQ_SHIFT) |
 8000ce0:	430b      	orrs	r3, r1
		((((pllp >> 1) - 1) & RCC_PLLCFGR_PLLP_MASK) << RCC_PLLCFGR_PLLP_SHIFT) |
 8000ce2:	0851      	lsrs	r1, r2, #1
		((pllr & RCC_PLLCFGR_PLLR_MASK) << RCC_PLLCFGR_PLLR_SHIFT);
 8000ce4:	9a00      	ldr	r2, [sp, #0]
		((((pllp >> 1) - 1) & RCC_PLLCFGR_PLLP_MASK) << RCC_PLLCFGR_PLLP_SHIFT) |
 8000ce6:	3901      	subs	r1, #1
		((pllr & RCC_PLLCFGR_PLLR_MASK) << RCC_PLLCFGR_PLLR_SHIFT);
 8000ce8:	2a02      	cmp	r2, #2
		((((pllp >> 1) - 1) & RCC_PLLCFGR_PLLP_MASK) << RCC_PLLCFGR_PLLP_SHIFT) |
 8000cea:	ea4f 4101 	mov.w	r1, r1, lsl #16
		((pllr & RCC_PLLCFGR_PLLR_MASK) << RCC_PLLCFGR_PLLR_SHIFT);
 8000cee:	bf38      	it	cc
 8000cf0:	2202      	movcc	r2, #2
		((((pllp >> 1) - 1) & RCC_PLLCFGR_PLLP_MASK) << RCC_PLLCFGR_PLLP_SHIFT) |
 8000cf2:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
		((pllr & RCC_PLLCFGR_PLLR_MASK) << RCC_PLLCFGR_PLLR_SHIFT);
 8000cf6:	0712      	lsls	r2, r2, #28
 8000cf8:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
		((pllq & RCC_PLLCFGR_PLLQ_MASK) << RCC_PLLCFGR_PLLQ_SHIFT) |
 8000cfc:	430b      	orrs	r3, r1
 8000cfe:	4313      	orrs	r3, r2
	RCC_PLLCFGR = RCC_PLLCFGR_PLLSRC | /* HSE */
 8000d00:	4a01      	ldr	r2, [pc, #4]	; (8000d08 <rcc_set_main_pll_hse+0x40>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	40023804 	.word	0x40023804

08000d0c <rcc_clock_setup_hse_3v3>:
	/* Return the clock source which is used as system clock. */
	return (RCC_CFGR & 0x000c) >> 2;
}

void rcc_clock_setup_hse_3v3(const struct rcc_clock_scale *clock)
{
 8000d0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d0e:	4604      	mov	r4, r0
	/* Enable internal high-speed oscillator. */
	rcc_osc_on(RCC_HSI);
 8000d10:	2004      	movs	r0, #4
 8000d12:	f7ff ff59 	bl	8000bc8 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_HSI);
 8000d16:	2004      	movs	r0, #4
 8000d18:	f7ff ff4e 	bl	8000bb8 <rcc_wait_for_osc_ready>

	/* Select HSI as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_HSI);
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f7ff ffab 	bl	8000c78 <rcc_set_sysclk_source>

	/* Enable external high-speed oscillator 8MHz. */
	rcc_osc_on(RCC_HSE);
 8000d22:	2003      	movs	r0, #3
 8000d24:	f7ff ff50 	bl	8000bc8 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_HSE);
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f7ff ff45 	bl	8000bb8 <rcc_wait_for_osc_ready>

	/* Enable/disable high performance mode */
	if (!clock->power_save) {
 8000d2e:	7be0      	ldrb	r0, [r4, #15]
 8000d30:	2800      	cmp	r0, #0
 8000d32:	d135      	bne.n	8000da0 <rcc_clock_setup_hse_3v3+0x94>
		pwr_set_vos_scale(PWR_SCALE1);
	} else {
		pwr_set_vos_scale(PWR_SCALE2);
 8000d34:	f000 ff44 	bl	8001bc0 <pwr_set_vos_scale>

	/*
	 * Set prescalers for AHB, ADC, ABP1, ABP2.
	 * Do this before touching the PLL (TODO: why?).
	 */
	rcc_set_hpre(clock->hpre);
 8000d38:	7b20      	ldrb	r0, [r4, #12]
 8000d3a:	f7ff ffbb 	bl	8000cb4 <rcc_set_hpre>
	rcc_set_ppre1(clock->ppre1);
 8000d3e:	7b60      	ldrb	r0, [r4, #13]
 8000d40:	f7ff ffae 	bl	8000ca0 <rcc_set_ppre1>
	rcc_set_ppre2(clock->ppre2);
 8000d44:	7ba0      	ldrb	r0, [r4, #14]
 8000d46:	f7ff ffa1 	bl	8000c8c <rcc_set_ppre2>

	rcc_set_main_pll_hse(clock->pllm, clock->plln,
 8000d4a:	79a5      	ldrb	r5, [r4, #6]
 8000d4c:	8861      	ldrh	r1, [r4, #2]
 8000d4e:	7963      	ldrb	r3, [r4, #5]
 8000d50:	7922      	ldrb	r2, [r4, #4]
 8000d52:	7820      	ldrb	r0, [r4, #0]
 8000d54:	9500      	str	r5, [sp, #0]
 8000d56:	f7ff ffb7 	bl	8000cc8 <rcc_set_main_pll_hse>
		RCC_CR |= RCC_CR_PLLON;
 8000d5a:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <rcc_clock_setup_hse_3v3+0x98>)
 8000d5c:	6813      	ldr	r3, [r2, #0]
 8000d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d62:	6013      	str	r3, [r2, #0]
			clock->pllp, clock->pllq, clock->pllr);

	/* Enable PLL oscillator and wait for it to stabilize. */
	rcc_osc_on(RCC_PLL);
	rcc_wait_for_osc_ready(RCC_PLL);
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff ff27 	bl	8000bb8 <rcc_wait_for_osc_ready>

	/* Configure flash settings. */
	flash_set_ws(clock->flash_config);
 8000d6a:	68a0      	ldr	r0, [r4, #8]
 8000d6c:	f000 f880 	bl	8000e70 <flash_set_ws>

	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_PLL);
 8000d70:	2002      	movs	r0, #2
 8000d72:	f7ff ff81 	bl	8000c78 <rcc_set_sysclk_source>
		while (((RCC_CFGR >> RCC_CFGR_SWS_SHIFT) & RCC_CFGR_SWS_MASK) !=
 8000d76:	4a0c      	ldr	r2, [pc, #48]	; (8000da8 <rcc_clock_setup_hse_3v3+0x9c>)
 8000d78:	6813      	ldr	r3, [r2, #0]
 8000d7a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d1fa      	bne.n	8000d78 <rcc_clock_setup_hse_3v3+0x6c>

	/* Wait for PLL clock to be selected. */
	rcc_wait_for_sysclk_status(RCC_PLL);

	/* Set the peripheral clock frequencies used. */
	rcc_ahb_frequency  = clock->ahb_frequency;
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <rcc_clock_setup_hse_3v3+0xa0>)
 8000d84:	6922      	ldr	r2, [r4, #16]
 8000d86:	601a      	str	r2, [r3, #0]
	rcc_apb1_frequency = clock->apb1_frequency;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <rcc_clock_setup_hse_3v3+0xa4>)
 8000d8a:	6962      	ldr	r2, [r4, #20]
 8000d8c:	601a      	str	r2, [r3, #0]
	rcc_apb2_frequency = clock->apb2_frequency;
 8000d8e:	69a2      	ldr	r2, [r4, #24]
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <rcc_clock_setup_hse_3v3+0xa8>)

	/* Disable internal high-speed oscillator. */
	rcc_osc_off(RCC_HSI);
 8000d92:	2004      	movs	r0, #4
	rcc_apb2_frequency = clock->apb2_frequency;
 8000d94:	601a      	str	r2, [r3, #0]
}
 8000d96:	b003      	add	sp, #12
 8000d98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	rcc_osc_off(RCC_HSI);
 8000d9c:	f7ff bf40 	b.w	8000c20 <rcc_osc_off>
		pwr_set_vos_scale(PWR_SCALE2);
 8000da0:	2001      	movs	r0, #1
 8000da2:	e7c7      	b.n	8000d34 <rcc_clock_setup_hse_3v3+0x28>
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40023808 	.word	0x40023808
 8000dac:	2000001c 	.word	0x2000001c
 8000db0:	20000020 	.word	0x20000020
 8000db4:	20000024 	.word	0x20000024

08000db8 <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8000db8:	6181      	str	r1, [r0, #24]
}
 8000dba:	4770      	bx	lr

08000dbc <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 8000dbc:	0409      	lsls	r1, r1, #16
 8000dbe:	6181      	str	r1, [r0, #24]
}
 8000dc0:	4770      	bx	lr

08000dc2 <gpio_toggle>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_toggle(uint32_t gpioport, uint16_t gpios)
{
	uint32_t port = GPIO_ODR(gpioport);
 8000dc2:	6943      	ldr	r3, [r0, #20]
	GPIO_BSRR(gpioport) = ((port & gpios) << 16) | (~port & gpios);
 8000dc4:	ea01 0203 	and.w	r2, r1, r3
 8000dc8:	ea21 0103 	bic.w	r1, r1, r3
 8000dcc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000dd0:	6181      	str	r1, [r0, #24]
}
 8000dd2:	4770      	bx	lr

08000dd4 <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 8000dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/*
	 * We want to set the config only for the pins mentioned in gpios,
	 * but keeping the others, so read out the actual config first.
	 */
	moder = GPIO_MODER(gpioport);
 8000dd8:	6805      	ldr	r5, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 8000dda:	68c4      	ldr	r4, [r0, #12]
 8000ddc:	2600      	movs	r6, #0
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 8000dde:	f04f 0e03 	mov.w	lr, #3
		if (!((1 << i) & gpios)) {
 8000de2:	fa43 f706 	asr.w	r7, r3, r6
 8000de6:	07ff      	lsls	r7, r7, #31
 8000de8:	d50f      	bpl.n	8000e0a <gpio_mode_setup+0x36>
 8000dea:	0077      	lsls	r7, r6, #1
		moder &= ~GPIO_MODE_MASK(i);
 8000dec:	fa0e fc07 	lsl.w	ip, lr, r7
 8000df0:	ea6f 0c0c 	mvn.w	ip, ip
		moder |= GPIO_MODE(i, mode);
 8000df4:	fa01 f807 	lsl.w	r8, r1, r7
		moder &= ~GPIO_MODE_MASK(i);
 8000df8:	ea0c 0505 	and.w	r5, ip, r5
		pupd &= ~GPIO_PUPD_MASK(i);
 8000dfc:	ea0c 0404 	and.w	r4, ip, r4
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000e00:	fa02 f707 	lsl.w	r7, r2, r7
		moder |= GPIO_MODE(i, mode);
 8000e04:	ea48 0505 	orr.w	r5, r8, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000e08:	433c      	orrs	r4, r7
 8000e0a:	3601      	adds	r6, #1
	for (i = 0; i < 16; i++) {
 8000e0c:	2e10      	cmp	r6, #16
 8000e0e:	d1e8      	bne.n	8000de2 <gpio_mode_setup+0xe>
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 8000e10:	6005      	str	r5, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 8000e12:	60c4      	str	r4, [r0, #12]
}
 8000e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000e18 <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 8000e18:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
 8000e1a:	6a07      	ldr	r7, [r0, #32]
	afrh = GPIO_AFRH(gpioport);
 8000e1c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8000e1e:	2300      	movs	r3, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 8000e20:	f04f 0c0f 	mov.w	ip, #15
		if (!((1 << i) & gpios)) {
 8000e24:	fa42 f403 	asr.w	r4, r2, r3
 8000e28:	07e5      	lsls	r5, r4, #31
 8000e2a:	d507      	bpl.n	8000e3c <gpio_set_af+0x24>
 8000e2c:	009d      	lsls	r5, r3, #2
		afrl &= ~GPIO_AFR_MASK(i);
 8000e2e:	fa0c f405 	lsl.w	r4, ip, r5
 8000e32:	ea27 0704 	bic.w	r7, r7, r4
		afrl |= GPIO_AFR(i, alt_func_num);
 8000e36:	fa01 f505 	lsl.w	r5, r1, r5
 8000e3a:	432f      	orrs	r7, r5
 8000e3c:	3301      	adds	r3, #1
	for (i = 0; i < 8; i++) {
 8000e3e:	2b08      	cmp	r3, #8
 8000e40:	d1f0      	bne.n	8000e24 <gpio_set_af+0xc>

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 8000e42:	f04f 0c0f 	mov.w	ip, #15
		if (!((1 << i) & gpios)) {
 8000e46:	fa42 f403 	asr.w	r4, r2, r3
 8000e4a:	07e4      	lsls	r4, r4, #31
 8000e4c:	d50a      	bpl.n	8000e64 <gpio_set_af+0x4c>
 8000e4e:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 8000e52:	3c08      	subs	r4, #8
 8000e54:	00a4      	lsls	r4, r4, #2
		afrh &= ~GPIO_AFR_MASK(i - 8);
 8000e56:	fa0c f504 	lsl.w	r5, ip, r4
 8000e5a:	ea26 0605 	bic.w	r6, r6, r5
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 8000e5e:	fa01 f404 	lsl.w	r4, r1, r4
 8000e62:	4326      	orrs	r6, r4
 8000e64:	3301      	adds	r3, #1
	for (i = 8; i < 16; i++) {
 8000e66:	2b10      	cmp	r3, #16
 8000e68:	d1ed      	bne.n	8000e46 <gpio_set_af+0x2e>
	}

	GPIO_AFRL(gpioport) = afrl;
 8000e6a:	6207      	str	r7, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 8000e6c:	6246      	str	r6, [r0, #36]	; 0x24
}
 8000e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e70 <flash_set_ws>:
*/
void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
 8000e70:	4a03      	ldr	r2, [pc, #12]	; (8000e80 <flash_set_ws+0x10>)
 8000e72:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK);
 8000e74:	f023 0307 	bic.w	r3, r3, #7
	reg32 |= ws;
 8000e78:	4318      	orrs	r0, r3
	FLASH_ACR = reg32;
 8000e7a:	6010      	str	r0, [r2, #0]
}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40023c00 	.word	0x40023c00

08000e84 <exti_set_trigger>:
#       include <libopencm3/stm32/syscfg.h>
#endif

void exti_set_trigger(uint32_t extis, enum exti_trigger_type trig)
{
	switch (trig) {
 8000e84:	2901      	cmp	r1, #1
 8000e86:	d00c      	beq.n	8000ea2 <exti_set_trigger+0x1e>
 8000e88:	d302      	bcc.n	8000e90 <exti_set_trigger+0xc>
 8000e8a:	2902      	cmp	r1, #2
 8000e8c:	d011      	beq.n	8000eb2 <exti_set_trigger+0x2e>
 8000e8e:	4770      	bx	lr
	case EXTI_TRIGGER_RISING:
		EXTI_RTSR |= extis;
 8000e90:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <exti_set_trigger+0x38>)
 8000e92:	6813      	ldr	r3, [r2, #0]
 8000e94:	4303      	orrs	r3, r0
 8000e96:	6013      	str	r3, [r2, #0]
		EXTI_FTSR &= ~extis;
 8000e98:	6853      	ldr	r3, [r2, #4]
 8000e9a:	ea23 0000 	bic.w	r0, r3, r0
		EXTI_RTSR &= ~extis;
		EXTI_FTSR |= extis;
		break;
	case EXTI_TRIGGER_BOTH:
		EXTI_RTSR |= extis;
		EXTI_FTSR |= extis;
 8000e9e:	6050      	str	r0, [r2, #4]
		break;
	}
}
 8000ea0:	4770      	bx	lr
		EXTI_RTSR &= ~extis;
 8000ea2:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <exti_set_trigger+0x38>)
 8000ea4:	6813      	ldr	r3, [r2, #0]
 8000ea6:	ea23 0300 	bic.w	r3, r3, r0
		EXTI_RTSR |= extis;
 8000eaa:	6013      	str	r3, [r2, #0]
		EXTI_FTSR |= extis;
 8000eac:	6853      	ldr	r3, [r2, #4]
 8000eae:	4318      	orrs	r0, r3
 8000eb0:	e7f5      	b.n	8000e9e <exti_set_trigger+0x1a>
		EXTI_RTSR |= extis;
 8000eb2:	4a02      	ldr	r2, [pc, #8]	; (8000ebc <exti_set_trigger+0x38>)
 8000eb4:	6813      	ldr	r3, [r2, #0]
 8000eb6:	4303      	orrs	r3, r0
 8000eb8:	e7f7      	b.n	8000eaa <exti_set_trigger+0x26>
 8000eba:	bf00      	nop
 8000ebc:	40013c08 	.word	0x40013c08

08000ec0 <exti_enable_request>:

void exti_enable_request(uint32_t extis)
{
	/* Enable interrupts. */
	EXTI_IMR |= extis;
 8000ec0:	4a03      	ldr	r2, [pc, #12]	; (8000ed0 <exti_enable_request+0x10>)
 8000ec2:	6813      	ldr	r3, [r2, #0]
 8000ec4:	4303      	orrs	r3, r0
 8000ec6:	6013      	str	r3, [r2, #0]

	/* Enable events. */
	EXTI_EMR |= extis;
 8000ec8:	6853      	ldr	r3, [r2, #4]
 8000eca:	4318      	orrs	r0, r3
 8000ecc:	6050      	str	r0, [r2, #4]
}
 8000ece:	4770      	bx	lr
 8000ed0:	40013c00 	.word	0x40013c00

08000ed4 <exti_reset_request>:
 * Reset the interrupt request by writing a 1 to the corresponding
 * pending bit register.
 */
void exti_reset_request(uint32_t extis)
{
	EXTI_PR = extis;
 8000ed4:	4b01      	ldr	r3, [pc, #4]	; (8000edc <exti_reset_request+0x8>)
 8000ed6:	6018      	str	r0, [r3, #0]
}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40013c14 	.word	0x40013c14

08000ee0 <exti_select_source>:
 * specified GPIO port.
 *
 * TODO: This could be rewritten in fewer lines of code.
 */
void exti_select_source(uint32_t exti, uint32_t gpioport)
{
 8000ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			continue;
		}

		uint32_t bits = 0, mask = 0x0F;

		switch (gpioport) {
 8000ee4:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8000fa0 <exti_select_source+0xc0>
 8000ee8:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 8000fa4 <exti_select_source+0xc4>
 8000eec:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8000fa8 <exti_select_source+0xc8>
 8000ef0:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8000fac <exti_select_source+0xcc>
 8000ef4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8000fb0 <exti_select_source+0xd0>
 8000ef8:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8000fb4 <exti_select_source+0xd4>
	for (line = 0; line < 16; line++) {
 8000efc:	2200      	movs	r2, #0
		if (!(exti & (1 << line))) {
 8000efe:	2301      	movs	r3, #1
 8000f00:	fa03 f402 	lsl.w	r4, r3, r2
 8000f04:	4204      	tst	r4, r0
 8000f06:	d033      	beq.n	8000f70 <exti_select_source+0x90>
		switch (gpioport) {
 8000f08:	4c21      	ldr	r4, [pc, #132]	; (8000f90 <exti_select_source+0xb0>)
 8000f0a:	42a1      	cmp	r1, r4
 8000f0c:	d037      	beq.n	8000f7e <exti_select_source+0x9e>
 8000f0e:	d80d      	bhi.n	8000f2c <exti_select_source+0x4c>
 8000f10:	4549      	cmp	r1, r9
 8000f12:	d01d      	beq.n	8000f50 <exti_select_source+0x70>
 8000f14:	d803      	bhi.n	8000f1e <exti_select_source+0x3e>
 8000f16:	4559      	cmp	r1, fp
 8000f18:	d01b      	beq.n	8000f52 <exti_select_source+0x72>
		uint32_t bits = 0, mask = 0x0F;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e019      	b.n	8000f52 <exti_select_source+0x72>
		switch (gpioport) {
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <exti_select_source+0xb4>)
 8000f20:	4299      	cmp	r1, r3
 8000f22:	d02a      	beq.n	8000f7a <exti_select_source+0x9a>
 8000f24:	4551      	cmp	r1, sl
 8000f26:	d1f8      	bne.n	8000f1a <exti_select_source+0x3a>
		case GPIOD:
			bits = 3;
			break;
#if defined(GPIOE) && defined(GPIO_PORT_E_BASE)
		case GPIOE:
			bits = 4;
 8000f28:	2304      	movs	r3, #4
			break;
 8000f2a:	e012      	b.n	8000f52 <exti_select_source+0x72>
		switch (gpioport) {
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <exti_select_source+0xb8>)
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d029      	beq.n	8000f86 <exti_select_source+0xa6>
 8000f32:	d807      	bhi.n	8000f44 <exti_select_source+0x64>
 8000f34:	4541      	cmp	r1, r8
 8000f36:	d024      	beq.n	8000f82 <exti_select_source+0xa2>
 8000f38:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d1ec      	bne.n	8000f1a <exti_select_source+0x3a>
			bits = 6;
			break;
#endif
#if defined(GPIOH) && defined(GPIO_PORT_H_BASE)
		case GPIOH:
			bits = 7;
 8000f40:	2307      	movs	r3, #7
			break;
 8000f42:	e006      	b.n	8000f52 <exti_select_source+0x72>
		switch (gpioport) {
 8000f44:	4561      	cmp	r1, ip
 8000f46:	d020      	beq.n	8000f8a <exti_select_source+0xaa>
 8000f48:	4571      	cmp	r1, lr
 8000f4a:	d1e6      	bne.n	8000f1a <exti_select_source+0x3a>
			bits = 9;
			break;
#endif
#if defined(GPIOK) && defined(GPIO_PORT_K_BASE)
		case GPIOK:
			bits = 10;
 8000f4c:	230a      	movs	r3, #10
			break;
 8000f4e:	e000      	b.n	8000f52 <exti_select_source+0x72>
			bits = 2;
 8000f50:	2302      	movs	r3, #2
		mask <<= shift;

#if defined(AFIO_BASE)
		AFIO_EXTICR(reg) = (AFIO_EXTICR(reg) & ~mask) | bits;
#else
		SYSCFG_EXTICR(reg) = (SYSCFG_EXTICR(reg) & ~mask) | bits;
 8000f52:	4c12      	ldr	r4, [pc, #72]	; (8000f9c <exti_select_source+0xbc>)
 8000f54:	eb04 0592 	add.w	r5, r4, r2, lsr #2
 8000f58:	00ad      	lsls	r5, r5, #2
		uint8_t shift = (uint8_t)(4 * (line % 4));
 8000f5a:	f002 0603 	and.w	r6, r2, #3
		bits <<= shift;
 8000f5e:	00b6      	lsls	r6, r6, #2
		SYSCFG_EXTICR(reg) = (SYSCFG_EXTICR(reg) & ~mask) | bits;
 8000f60:	682c      	ldr	r4, [r5, #0]
		mask <<= shift;
 8000f62:	270f      	movs	r7, #15
 8000f64:	40b7      	lsls	r7, r6
		SYSCFG_EXTICR(reg) = (SYSCFG_EXTICR(reg) & ~mask) | bits;
 8000f66:	ea24 0407 	bic.w	r4, r4, r7
		bits <<= shift;
 8000f6a:	40b3      	lsls	r3, r6
		SYSCFG_EXTICR(reg) = (SYSCFG_EXTICR(reg) & ~mask) | bits;
 8000f6c:	431c      	orrs	r4, r3
 8000f6e:	602c      	str	r4, [r5, #0]
	for (line = 0; line < 16; line++) {
 8000f70:	3201      	adds	r2, #1
 8000f72:	2a10      	cmp	r2, #16
 8000f74:	d1c3      	bne.n	8000efe <exti_select_source+0x1e>
#endif
	};
}
 8000f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			bits = 3;
 8000f7a:	2303      	movs	r3, #3
			break;
 8000f7c:	e7e9      	b.n	8000f52 <exti_select_source+0x72>
			bits = 5;
 8000f7e:	2305      	movs	r3, #5
			break;
 8000f80:	e7e7      	b.n	8000f52 <exti_select_source+0x72>
			bits = 6;
 8000f82:	2306      	movs	r3, #6
			break;
 8000f84:	e7e5      	b.n	8000f52 <exti_select_source+0x72>
			bits = 8;
 8000f86:	2308      	movs	r3, #8
			break;
 8000f88:	e7e3      	b.n	8000f52 <exti_select_source+0x72>
			bits = 9;
 8000f8a:	2309      	movs	r3, #9
			break;
 8000f8c:	e7e1      	b.n	8000f52 <exti_select_source+0x72>
 8000f8e:	bf00      	nop
 8000f90:	40021400 	.word	0x40021400
 8000f94:	40020c00 	.word	0x40020c00
 8000f98:	40022000 	.word	0x40022000
 8000f9c:	10004e02 	.word	0x10004e02
 8000fa0:	40022400 	.word	0x40022400
 8000fa4:	40022800 	.word	0x40022800
 8000fa8:	40021800 	.word	0x40021800
 8000fac:	40020800 	.word	0x40020800
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40020400 	.word	0x40020400

08000fb8 <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 8000fb8:	0943      	lsrs	r3, r0, #5
 8000fba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fbe:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8000fc2:	f000 021f 	and.w	r2, r0, #31
 8000fc6:	6819      	ldr	r1, [r3, #0]
 8000fc8:	2001      	movs	r0, #1
 8000fca:	4090      	lsls	r0, r2
 8000fcc:	4308      	orrs	r0, r1
 8000fce:	6018      	str	r0, [r3, #0]
}
 8000fd0:	4770      	bx	lr

08000fd2 <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8000fd2:	0943      	lsrs	r3, r0, #5
 8000fd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fd8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8000fdc:	f000 021f 	and.w	r2, r0, #31
 8000fe0:	6819      	ldr	r1, [r3, #0]
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	4090      	lsls	r0, r2
 8000fe6:	4301      	orrs	r1, r0
 8000fe8:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	ea22 0000 	bic.w	r0, r2, r0
 8000ff0:	6018      	str	r0, [r3, #0]
}
 8000ff2:	4770      	bx	lr

08000ff4 <spi_reset>:
@param[in] spi_peripheral Unsigned int32. SPI peripheral identifier @ref
spi_reg_base.
*/

void spi_reset(uint32_t spi_peripheral)
{	switch (spi_peripheral) {
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <spi_reset+0x58>)
 8000ff6:	4298      	cmp	r0, r3
 8000ff8:	d017      	beq.n	800102a <spi_reset+0x36>
 8000ffa:	d808      	bhi.n	800100e <spi_reset+0x1a>
 8000ffc:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
 8001000:	4298      	cmp	r0, r3
 8001002:	d016      	beq.n	8001032 <spi_reset+0x3e>
 8001004:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001008:	4298      	cmp	r0, r3
 800100a:	d015      	beq.n	8001038 <spi_reset+0x44>
 800100c:	4770      	bx	lr
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <spi_reset+0x5c>)
 8001010:	4298      	cmp	r0, r3
 8001012:	d014      	beq.n	800103e <spi_reset+0x4a>
 8001014:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001018:	4298      	cmp	r0, r3
 800101a:	d013      	beq.n	8001044 <spi_reset+0x50>
 800101c:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8001020:	4298      	cmp	r0, r3
 8001022:	d112      	bne.n	800104a <spi_reset+0x56>
		rcc_periph_reset_pulse(RST_SPI3);
		break;
#endif
#if defined(SPI4_BASE)
	case SPI4_BASE:
		rcc_periph_reset_pulse(RST_SPI4);
 8001024:	f240 408d 	movw	r0, #1165	; 0x48d
 8001028:	e001      	b.n	800102e <spi_reset+0x3a>
		rcc_periph_reset_pulse(RST_SPI1);
 800102a:	f240 408c 	movw	r0, #1164	; 0x48c
		rcc_periph_reset_pulse(RST_SPI5);
		break;
#endif
#if defined(SPI6_BASE)
	case SPI6_BASE:
		rcc_periph_reset_pulse(RST_SPI6);
 800102e:	f7ff bfd0 	b.w	8000fd2 <rcc_periph_reset_pulse>
		rcc_periph_reset_pulse(RST_SPI2);
 8001032:	f240 400e 	movw	r0, #1038	; 0x40e
 8001036:	e7fa      	b.n	800102e <spi_reset+0x3a>
		rcc_periph_reset_pulse(RST_SPI3);
 8001038:	f240 400f 	movw	r0, #1039	; 0x40f
 800103c:	e7f7      	b.n	800102e <spi_reset+0x3a>
		rcc_periph_reset_pulse(RST_SPI5);
 800103e:	f240 4094 	movw	r0, #1172	; 0x494
 8001042:	e7f4      	b.n	800102e <spi_reset+0x3a>
		rcc_periph_reset_pulse(RST_SPI6);
 8001044:	f240 4095 	movw	r0, #1173	; 0x495
 8001048:	e7f1      	b.n	800102e <spi_reset+0x3a>
		break;
#endif
	default:
		break;
	}
}
 800104a:	4770      	bx	lr
 800104c:	40013000 	.word	0x40013000
 8001050:	40015000 	.word	0x40015000

08001054 <spi_enable>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_enable(uint32_t spi)
{
	SPI_CR1(spi) |= SPI_CR1_SPE; /* Enable SPI. */
 8001054:	6803      	ldr	r3, [r0, #0]
 8001056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800105a:	6003      	str	r3, [r0, #0]
}
 800105c:	4770      	bx	lr

0800105e <spi_xfer>:
*/

void spi_write(uint32_t spi, uint16_t data)
{
	/* Write data (8 or 16 bits, depending on DFF) into DR. */
	SPI_DR(spi) = data;
 800105e:	60c1      	str	r1, [r0, #12]
uint16_t spi_xfer(uint32_t spi, uint16_t data)
{
	spi_write(spi, data);

	/* Wait for transfer finished. */
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 8001060:	6883      	ldr	r3, [r0, #8]
 8001062:	07db      	lsls	r3, r3, #31
 8001064:	d5fc      	bpl.n	8001060 <spi_xfer+0x2>

	/* Read the data (8 or 16 bits, depending on DFF bit) from DR. */
	return SPI_DR(spi);
 8001066:	68c0      	ldr	r0, [r0, #12]
}
 8001068:	b280      	uxth	r0, r0
 800106a:	4770      	bx	lr

0800106c <spi_set_unidirectional_mode>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_set_unidirectional_mode(uint32_t spi)
{
	SPI_CR1(spi) &= ~SPI_CR1_BIDIMODE;
 800106c:	6803      	ldr	r3, [r0, #0]
 800106e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001072:	6003      	str	r3, [r0, #0]
}
 8001074:	4770      	bx	lr

08001076 <spi_set_full_duplex_mode>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_set_full_duplex_mode(uint32_t spi)
{
	SPI_CR1(spi) &= ~SPI_CR1_RXONLY;
 8001076:	6803      	ldr	r3, [r0, #0]
 8001078:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800107c:	6003      	str	r3, [r0, #0]
}
 800107e:	4770      	bx	lr

08001080 <spi_enable_software_slave_management>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_enable_software_slave_management(uint32_t spi)
{
	SPI_CR1(spi) |= SPI_CR1_SSM;
 8001080:	6803      	ldr	r3, [r0, #0]
 8001082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001086:	6003      	str	r3, [r0, #0]
	/* allow slave select to be an input */
	SPI_CR2(spi) &= ~SPI_CR2_SSOE;
 8001088:	6843      	ldr	r3, [r0, #4]
 800108a:	f023 0304 	bic.w	r3, r3, #4
 800108e:	6043      	str	r3, [r0, #4]
}
 8001090:	4770      	bx	lr

08001092 <spi_set_nss_high>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_set_nss_high(uint32_t spi)
{
	SPI_CR1(spi) |= SPI_CR1_SSI;
 8001092:	6803      	ldr	r3, [r0, #0]
 8001094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001098:	6003      	str	r3, [r0, #0]
}
 800109a:	4770      	bx	lr

0800109c <spi_send_msb_first>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_send_msb_first(uint32_t spi)
{
	SPI_CR1(spi) &= ~SPI_CR1_LSBFIRST;
 800109c:	6803      	ldr	r3, [r0, #0]
 800109e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80010a2:	6003      	str	r3, [r0, #0]
}
 80010a4:	4770      	bx	lr

080010a6 <spi_set_baudrate_prescaler>:

void spi_set_baudrate_prescaler(uint32_t spi, uint8_t baudrate)
{
	uint32_t reg32;

	if (baudrate > 7) {
 80010a6:	2907      	cmp	r1, #7
 80010a8:	d807      	bhi.n	80010ba <spi_set_baudrate_prescaler+0x14>
		return;
	}

	reg32 = (SPI_CR1(spi) & 0xffc7); /* Clear bits [5:3]. */
 80010aa:	6803      	ldr	r3, [r0, #0]
 80010ac:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80010b0:	041b      	lsls	r3, r3, #16
 80010b2:	0c1b      	lsrs	r3, r3, #16
	reg32 |= (baudrate << 3);
 80010b4:	ea43 01c1 	orr.w	r1, r3, r1, lsl #3
	SPI_CR1(spi) = reg32;
 80010b8:	6001      	str	r1, [r0, #0]
}
 80010ba:	4770      	bx	lr

080010bc <spi_set_master_mode>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_set_master_mode(uint32_t spi)
{
	SPI_CR1(spi) |= SPI_CR1_MSTR;
 80010bc:	6803      	ldr	r3, [r0, #0]
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	6003      	str	r3, [r0, #0]
}
 80010c4:	4770      	bx	lr

080010c6 <spi_set_clock_polarity_1>:
@sa spi_set_clock_polarity_0
*/

void spi_set_clock_polarity_1(uint32_t spi)
{
	SPI_CR1(spi) |= SPI_CR1_CPOL;
 80010c6:	6803      	ldr	r3, [r0, #0]
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	6003      	str	r3, [r0, #0]
}
 80010ce:	4770      	bx	lr

080010d0 <spi_set_clock_phase_1>:
@sa spi_set_clock_phase_0
*/

void spi_set_clock_phase_1(uint32_t spi)
{
	SPI_CR1(spi) |= SPI_CR1_CPHA;
 80010d0:	6803      	ldr	r3, [r0, #0]
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6003      	str	r3, [r0, #0]
}
 80010d8:	4770      	bx	lr

080010da <spi_set_dff_8bit>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_set_dff_8bit(uint32_t spi)
{
	SPI_CR1(spi) &= ~SPI_CR1_DFF;
 80010da:	6803      	ldr	r3, [r0, #0]
 80010dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010e0:	6003      	str	r3, [r0, #0]
}
 80010e2:	4770      	bx	lr

080010e4 <usbd_init>:
usbd_device *usbd_init(const usbd_driver *driver,
		       const struct usb_device_descriptor *dev,
		       const struct usb_config_descriptor *conf,
		       const char **strings, int num_strings,
		       uint8_t *control_buffer, uint16_t control_buffer_size)
{
 80010e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010e8:	461e      	mov	r6, r3
	usbd_device *usbd_dev;

	usbd_dev = driver->init();
 80010ea:	6803      	ldr	r3, [r0, #0]
{
 80010ec:	4605      	mov	r5, r0
 80010ee:	4688      	mov	r8, r1
 80010f0:	4617      	mov	r7, r2
	usbd_dev = driver->init();
 80010f2:	4798      	blx	r3

	usbd_dev->driver = driver;
	usbd_dev->desc = dev;
	usbd_dev->config = conf;
	usbd_dev->strings = strings;
	usbd_dev->num_strings = num_strings;
 80010f4:	9b06      	ldr	r3, [sp, #24]
 80010f6:	60c3      	str	r3, [r0, #12]
	usbd_dev->ctrl_buf = control_buffer;
 80010f8:	9b07      	ldr	r3, [sp, #28]
 80010fa:	6103      	str	r3, [r0, #16]
	usbd_dev->ctrl_buf_len = control_buffer_size;
 80010fc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8001100:	8283      	strh	r3, [r0, #20]

	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <usbd_init+0x44>)
 8001104:	6703      	str	r3, [r0, #112]	; 0x70
	    _usbd_control_setup;
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <usbd_init+0x48>)
 8001108:	66c3      	str	r3, [r0, #108]	; 0x6c
	    _usbd_control_out;
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <usbd_init+0x4c>)
 800110c:	6683      	str	r3, [r0, #104]	; 0x68
	    _usbd_control_in;

	int i;
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
		usbd_dev->user_callback_set_config[i] = NULL;
 800110e:	2300      	movs	r3, #0
	usbd_dev->driver = driver;
 8001110:	f8c0 50dc 	str.w	r5, [r0, #220]	; 0xdc
	usbd_dev->config = conf;
 8001114:	e9c0 8700 	strd	r8, r7, [r0]
	usbd_dev->strings = strings;
 8001118:	6086      	str	r6, [r0, #8]
		usbd_dev->user_callback_set_config[i] = NULL;
 800111a:	e9c0 3332 	strd	r3, r3, [r0, #200]	; 0xc8
 800111e:	e9c0 3334 	strd	r3, r3, [r0, #208]	; 0xd0
	}

	return usbd_dev;
}
 8001122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001126:	bf00      	nop
 8001128:	0800189d 	.word	0x0800189d
 800112c:	080018f7 	.word	0x080018f7
 8001130:	08001979 	.word	0x08001979

08001134 <usbd_poll>:
}

/* Functions to wrap the low-level driver */
void usbd_poll(usbd_device *usbd_dev)
{
	usbd_dev->driver->poll(usbd_dev);
 8001134:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	4718      	bx	r3

0800113c <usbd_ep_setup>:
	}
}

void usbd_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
		   uint16_t max_size, usbd_endpoint_callback callback)
{
 800113c:	b410      	push	{r4}
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 800113e:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 8001142:	68a4      	ldr	r4, [r4, #8]
 8001144:	46a4      	mov	ip, r4
}
 8001146:	f85d 4b04 	ldr.w	r4, [sp], #4
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 800114a:	4760      	bx	ip

0800114c <_usbd_reset>:
{
 800114c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
 800114e:	6803      	ldr	r3, [r0, #0]
	usbd_dev->current_address = 0;
 8001150:	2500      	movs	r5, #0
{
 8001152:	4604      	mov	r4, r0
	usbd_dev->current_address = 0;
 8001154:	82c5      	strh	r5, [r0, #22]
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
 8001156:	79db      	ldrb	r3, [r3, #7]
 8001158:	9500      	str	r5, [sp, #0]
 800115a:	462a      	mov	r2, r5
 800115c:	4629      	mov	r1, r5
 800115e:	f7ff ffed 	bl	800113c <usbd_ep_setup>
	usbd_dev->driver->set_address(usbd_dev, 0);
 8001162:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8001166:	4629      	mov	r1, r5
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	4620      	mov	r0, r4
 800116c:	4798      	blx	r3
	if (usbd_dev->user_callback_reset) {
 800116e:	69e3      	ldr	r3, [r4, #28]
 8001170:	b11b      	cbz	r3, 800117a <_usbd_reset+0x2e>
}
 8001172:	b003      	add	sp, #12
 8001174:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		usbd_dev->user_callback_reset();
 8001178:	4718      	bx	r3
}
 800117a:	b003      	add	sp, #12
 800117c:	bd30      	pop	{r4, r5, pc}

0800117e <usbd_ep_write_packet>:

uint16_t usbd_ep_write_packet(usbd_device *usbd_dev, uint8_t addr,
			 const void *buf, uint16_t len)
{
 800117e:	b410      	push	{r4}
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 8001180:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 8001184:	69e4      	ldr	r4, [r4, #28]
 8001186:	46a4      	mov	ip, r4
}
 8001188:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 800118c:	4760      	bx	ip

0800118e <usbd_ep_read_packet>:

uint16_t usbd_ep_read_packet(usbd_device *usbd_dev, uint8_t addr, void *buf,
			     uint16_t len)
{
 800118e:	b410      	push	{r4}
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 8001190:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 8001194:	6a24      	ldr	r4, [r4, #32]
 8001196:	46a4      	mov	ip, r4
}
 8001198:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 800119c:	4760      	bx	ip

0800119e <usbd_ep_stall_set>:

void usbd_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
	usbd_dev->driver->ep_stall_set(usbd_dev, addr, stall);
 800119e:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	4718      	bx	r3

080011a6 <usbd_ep_stall_get>:
}

uint8_t usbd_ep_stall_get(usbd_device *usbd_dev, uint8_t addr)
{
	return usbd_dev->driver->ep_stall_get(usbd_dev, addr);
 80011a6:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4718      	bx	r3

080011ae <usb_standard_set_configuration>:

static enum usbd_request_return_codes
usb_standard_set_configuration(usbd_device *usbd_dev,
			       struct usb_setup_data *req,
			       uint8_t **buf, uint16_t *len)
{
 80011ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011b0:	460d      	mov	r5, r1

	(void)req;
	(void)buf;
	(void)len;

	if (req->wValue > 0) {
 80011b2:	8849      	ldrh	r1, [r1, #2]
{
 80011b4:	4604      	mov	r4, r0
	if (req->wValue > 0) {
 80011b6:	b179      	cbz	r1, 80011d8 <usb_standard_set_configuration+0x2a>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 80011b8:	6803      	ldr	r3, [r0, #0]
			if (req->wValue
			    == usbd_dev->config[i].bConfigurationValue) {
 80011ba:	260d      	movs	r6, #13
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 80011bc:	7c58      	ldrb	r0, [r3, #17]
 80011be:	2300      	movs	r3, #0
 80011c0:	4298      	cmp	r0, r3
 80011c2:	d801      	bhi.n	80011c8 <usb_standard_set_configuration+0x1a>
				found_index = i;
				break;
			}
		}
		if (found_index < 0) {
			return USBD_REQ_NOTSUPP;
 80011c4:	2000      	movs	r0, #0
			}
		}
	}

	return USBD_REQ_HANDLED;
}
 80011c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			    == usbd_dev->config[i].bConfigurationValue) {
 80011c8:	6862      	ldr	r2, [r4, #4]
 80011ca:	fb06 2203 	mla	r2, r6, r3, r2
			if (req->wValue
 80011ce:	7952      	ldrb	r2, [r2, #5]
 80011d0:	428a      	cmp	r2, r1
 80011d2:	d003      	beq.n	80011dc <usb_standard_set_configuration+0x2e>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 80011d4:	3301      	adds	r3, #1
 80011d6:	e7f3      	b.n	80011c0 <usb_standard_set_configuration+0x12>
	int found_index = -1;
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	usbd_dev->current_config = found_index + 1;
 80011dc:	3301      	adds	r3, #1
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	75e3      	strb	r3, [r4, #23]
	if (usbd_dev->current_config > 0) {
 80011e2:	b94b      	cbnz	r3, 80011f8 <usb_standard_set_configuration+0x4a>
	usbd_dev->driver->ep_reset(usbd_dev);
 80011e4:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 80011e8:	4620      	mov	r0, r4
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	4798      	blx	r3
	if (usbd_dev->user_callback_set_config[0]) {
 80011ee:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 80011f2:	b9ab      	cbnz	r3, 8001220 <usb_standard_set_configuration+0x72>
	return USBD_REQ_HANDLED;
 80011f4:	2001      	movs	r0, #1
 80011f6:	e7e6      	b.n	80011c6 <usb_standard_set_configuration+0x18>
		cfg = &usbd_dev->config[usbd_dev->current_config - 1];
 80011f8:	220d      	movs	r2, #13
 80011fa:	f06f 010c 	mvn.w	r1, #12
 80011fe:	fb12 1203 	smlabb	r2, r2, r3, r1
 8001202:	6863      	ldr	r3, [r4, #4]
 8001204:	4413      	add	r3, r2
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001206:	2200      	movs	r2, #0
				*cfg->interface[i].cur_altsetting = 0;
 8001208:	4610      	mov	r0, r2
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 800120a:	7919      	ldrb	r1, [r3, #4]
 800120c:	4291      	cmp	r1, r2
 800120e:	d9e9      	bls.n	80011e4 <usb_standard_set_configuration+0x36>
			if (cfg->interface[i].cur_altsetting) {
 8001210:	f8d3 1009 	ldr.w	r1, [r3, #9]
 8001214:	0116      	lsls	r6, r2, #4
 8001216:	5871      	ldr	r1, [r6, r1]
 8001218:	b101      	cbz	r1, 800121c <usb_standard_set_configuration+0x6e>
				*cfg->interface[i].cur_altsetting = 0;
 800121a:	7008      	strb	r0, [r1, #0]
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 800121c:	3201      	adds	r2, #1
 800121e:	e7f4      	b.n	800120a <usb_standard_set_configuration+0x5c>
			usbd_dev->user_control_callback[i].cb = NULL;
 8001220:	2300      	movs	r3, #0
 8001222:	64a3      	str	r3, [r4, #72]	; 0x48
 8001224:	6523      	str	r3, [r4, #80]	; 0x50
 8001226:	65a3      	str	r3, [r4, #88]	; 0x58
 8001228:	6623      	str	r3, [r4, #96]	; 0x60
 800122a:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
 800122e:	f104 07d8 	add.w	r7, r4, #216	; 0xd8
			if (usbd_dev->user_callback_set_config[i]) {
 8001232:	f856 3b04 	ldr.w	r3, [r6], #4
 8001236:	b113      	cbz	r3, 800123e <usb_standard_set_configuration+0x90>
				usbd_dev->user_callback_set_config[i](usbd_dev,
 8001238:	8869      	ldrh	r1, [r5, #2]
 800123a:	4620      	mov	r0, r4
 800123c:	4798      	blx	r3
		for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 800123e:	42b7      	cmp	r7, r6
 8001240:	d1f7      	bne.n	8001232 <usb_standard_set_configuration+0x84>
 8001242:	e7d7      	b.n	80011f4 <usb_standard_set_configuration+0x46>

08001244 <usb_standard_get_configuration>:
			       struct usb_setup_data *req,
			       uint8_t **buf, uint16_t *len)
{
	(void)req;

	if (*len > 1) {
 8001244:	8819      	ldrh	r1, [r3, #0]
 8001246:	6812      	ldr	r2, [r2, #0]
 8001248:	2901      	cmp	r1, #1
		*len = 1;
 800124a:	bf84      	itt	hi
 800124c:	2101      	movhi	r1, #1
 800124e:	8019      	strhhi	r1, [r3, #0]
	}
	if (usbd_dev->current_config > 0) {
 8001250:	7dc3      	ldrb	r3, [r0, #23]
 8001252:	b12b      	cbz	r3, 8001260 <usb_standard_get_configuration+0x1c>
		const struct usb_config_descriptor *cfg =
			&usbd_dev->config[usbd_dev->current_config - 1];
		(*buf)[0] = cfg->bConfigurationValue;
 8001254:	6841      	ldr	r1, [r0, #4]
 8001256:	200d      	movs	r0, #13
 8001258:	fb00 1303 	mla	r3, r0, r3, r1
 800125c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	} else {
		(*buf)[0] = 0;
 8001260:	7013      	strb	r3, [r2, #0]
	}

	return USBD_REQ_HANDLED;
}
 8001262:	2001      	movs	r0, #1
 8001264:	4770      	bx	lr

08001266 <usb_standard_get_interface>:

static enum usbd_request_return_codes
usb_standard_get_interface(usbd_device *usbd_dev,
			   struct usb_setup_data *req,
			   uint8_t **buf, uint16_t *len)
{
 8001266:	b570      	push	{r4, r5, r6, lr}
	uint8_t *cur_altsetting;
	const struct usb_config_descriptor *cfx =
		&usbd_dev->config[usbd_dev->current_config - 1];
 8001268:	7dc6      	ldrb	r6, [r0, #23]
	const struct usb_config_descriptor *cfx =
 800126a:	6840      	ldr	r0, [r0, #4]
		&usbd_dev->config[usbd_dev->current_config - 1];
 800126c:	f06f 050c 	mvn.w	r5, #12
 8001270:	240d      	movs	r4, #13
 8001272:	fb14 5406 	smlabb	r4, r4, r6, r5
	const struct usb_config_descriptor *cfx =
 8001276:	4420      	add	r0, r4

	if (req->wIndex >= cfx->bNumInterfaces) {
 8001278:	888d      	ldrh	r5, [r1, #4]
 800127a:	7904      	ldrb	r4, [r0, #4]
 800127c:	42a5      	cmp	r5, r4
 800127e:	d20c      	bcs.n	800129a <usb_standard_get_interface+0x34>
		return USBD_REQ_NOTSUPP;
	}

	*len = 1;
 8001280:	2401      	movs	r4, #1
 8001282:	801c      	strh	r4, [r3, #0]
	cur_altsetting = cfx->interface[req->wIndex].cur_altsetting;
 8001284:	888b      	ldrh	r3, [r1, #4]
 8001286:	f8d0 0009 	ldr.w	r0, [r0, #9]
 800128a:	011b      	lsls	r3, r3, #4
 800128c:	581b      	ldr	r3, [r3, r0]
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 800128e:	b103      	cbz	r3, 8001292 <usb_standard_get_interface+0x2c>
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	6812      	ldr	r2, [r2, #0]

	return USBD_REQ_HANDLED;
 8001294:	2001      	movs	r0, #1
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 8001296:	7013      	strb	r3, [r2, #0]
}
 8001298:	bd70      	pop	{r4, r5, r6, pc}
		return USBD_REQ_NOTSUPP;
 800129a:	2000      	movs	r0, #0
 800129c:	e7fc      	b.n	8001298 <usb_standard_get_interface+0x32>

0800129e <usb_standard_device_get_status>:
	(void)usbd_dev;
	(void)req;

	/* bit 0: self powered */
	/* bit 1: remote wakeup */
	if (*len > 2) {
 800129e:	8819      	ldrh	r1, [r3, #0]
 80012a0:	2902      	cmp	r1, #2
		*len = 2;
 80012a2:	bf84      	itt	hi
 80012a4:	2102      	movhi	r1, #2
 80012a6:	8019      	strhhi	r1, [r3, #0]
	}
	(*buf)[0] = 0;
 80012a8:	6811      	ldr	r1, [r2, #0]
 80012aa:	2300      	movs	r3, #0
 80012ac:	700b      	strb	r3, [r1, #0]
	(*buf)[1] = 0;
 80012ae:	6812      	ldr	r2, [r2, #0]

	return USBD_REQ_HANDLED;
}
 80012b0:	2001      	movs	r0, #1
	(*buf)[1] = 0;
 80012b2:	7053      	strb	r3, [r2, #1]
}
 80012b4:	4770      	bx	lr

080012b6 <usb_standard_endpoint_get_status>:

static enum usbd_request_return_codes
usb_standard_endpoint_get_status(usbd_device *usbd_dev,
				 struct usb_setup_data *req,
				 uint8_t **buf, uint16_t *len)
{
 80012b6:	b510      	push	{r4, lr}
 80012b8:	4614      	mov	r4, r2
	(void)req;

	if (*len > 2) {
 80012ba:	881a      	ldrh	r2, [r3, #0]
 80012bc:	2a02      	cmp	r2, #2
		*len = 2;
 80012be:	bf84      	itt	hi
 80012c0:	2202      	movhi	r2, #2
 80012c2:	801a      	strhhi	r2, [r3, #0]
	}
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 80012c4:	8889      	ldrh	r1, [r1, #4]
 80012c6:	b2c9      	uxtb	r1, r1
 80012c8:	f7ff ff6d 	bl	80011a6 <usbd_ep_stall_get>
 80012cc:	6823      	ldr	r3, [r4, #0]
 80012ce:	3000      	adds	r0, #0
 80012d0:	bf18      	it	ne
 80012d2:	2001      	movne	r0, #1
 80012d4:	7018      	strb	r0, [r3, #0]
	(*buf)[1] = 0;
 80012d6:	6823      	ldr	r3, [r4, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	705a      	strb	r2, [r3, #1]

	return USBD_REQ_HANDLED;
}
 80012dc:	2001      	movs	r0, #1
 80012de:	bd10      	pop	{r4, pc}

080012e0 <usb_standard_endpoint_stall>:

static enum usbd_request_return_codes
usb_standard_endpoint_stall(usbd_device *usbd_dev,
			    struct usb_setup_data *req,
			    uint8_t **buf, uint16_t *len)
{
 80012e0:	b508      	push	{r3, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 1);
 80012e2:	8889      	ldrh	r1, [r1, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	b2c9      	uxtb	r1, r1
 80012e8:	f7ff ff59 	bl	800119e <usbd_ep_stall_set>

	return USBD_REQ_HANDLED;
}
 80012ec:	2001      	movs	r0, #1
 80012ee:	bd08      	pop	{r3, pc}

080012f0 <usb_standard_endpoint_unstall>:

static enum usbd_request_return_codes
usb_standard_endpoint_unstall(usbd_device *usbd_dev,
			      struct usb_setup_data *req,
			      uint8_t **buf, uint16_t *len)
{
 80012f0:	b508      	push	{r3, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 0);
 80012f2:	8889      	ldrh	r1, [r1, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	b2c9      	uxtb	r1, r1
 80012f8:	f7ff ff51 	bl	800119e <usbd_ep_stall_set>

	return USBD_REQ_HANDLED;
}
 80012fc:	2001      	movs	r0, #1
 80012fe:	bd08      	pop	{r3, pc}

08001300 <usb_standard_set_address>:
{
 8001300:	b510      	push	{r4, lr}
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
 8001302:	780b      	ldrb	r3, [r1, #0]
 8001304:	b973      	cbnz	r3, 8001324 <usb_standard_set_address+0x24>
 8001306:	884c      	ldrh	r4, [r1, #2]
 8001308:	2c7f      	cmp	r4, #127	; 0x7f
 800130a:	d80b      	bhi.n	8001324 <usb_standard_set_address+0x24>
	if (usbd_dev->driver->set_address_before_status) {
 800130c:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
	usbd_dev->current_address = req->wValue;
 8001310:	7584      	strb	r4, [r0, #22]
	if (usbd_dev->driver->set_address_before_status) {
 8001312:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8001316:	b11a      	cbz	r2, 8001320 <usb_standard_set_address+0x20>
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
 8001318:	8849      	ldrh	r1, [r1, #2]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	b2c9      	uxtb	r1, r1
 800131e:	4798      	blx	r3
	return USBD_REQ_HANDLED;
 8001320:	2001      	movs	r0, #1
 8001322:	e000      	b.n	8001326 <usb_standard_set_address+0x26>
		return USBD_REQ_NOTSUPP;
 8001324:	2000      	movs	r0, #0
}
 8001326:	bd10      	pop	{r4, pc}

08001328 <usb_standard_set_interface>:
{
 8001328:	b570      	push	{r4, r5, r6, lr}
		&usbd_dev->config[usbd_dev->current_config - 1];
 800132a:	7dc2      	ldrb	r2, [r0, #23]
 800132c:	240d      	movs	r4, #13
{
 800132e:	461d      	mov	r5, r3
		&usbd_dev->config[usbd_dev->current_config - 1];
 8001330:	f06f 030c 	mvn.w	r3, #12
 8001334:	fb14 3302 	smlabb	r3, r4, r2, r3
	const struct usb_config_descriptor *cfx =
 8001338:	6844      	ldr	r4, [r0, #4]
	if (req->wIndex >= cfx->bNumInterfaces) {
 800133a:	888a      	ldrh	r2, [r1, #4]
	const struct usb_config_descriptor *cfx =
 800133c:	441c      	add	r4, r3
	if (req->wIndex >= cfx->bNumInterfaces) {
 800133e:	7923      	ldrb	r3, [r4, #4]
 8001340:	4293      	cmp	r3, r2
 8001342:	d918      	bls.n	8001376 <usb_standard_set_interface+0x4e>
	iface = &cfx->interface[req->wIndex];
 8001344:	f8d4 3009 	ldr.w	r3, [r4, #9]
	if (req->wValue >= iface->num_altsetting) {
 8001348:	884c      	ldrh	r4, [r1, #2]
	iface = &cfx->interface[req->wIndex];
 800134a:	0112      	lsls	r2, r2, #4
 800134c:	189e      	adds	r6, r3, r2
	if (req->wValue >= iface->num_altsetting) {
 800134e:	7936      	ldrb	r6, [r6, #4]
 8001350:	42a6      	cmp	r6, r4
 8001352:	d910      	bls.n	8001376 <usb_standard_set_interface+0x4e>
	if (iface->cur_altsetting) {
 8001354:	589a      	ldr	r2, [r3, r2]
 8001356:	b152      	cbz	r2, 800136e <usb_standard_set_interface+0x46>
		*iface->cur_altsetting = req->wValue;
 8001358:	7014      	strb	r4, [r2, #0]
	if (usbd_dev->user_callback_set_altsetting) {
 800135a:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800135e:	b113      	cbz	r3, 8001366 <usb_standard_set_interface+0x3e>
			usbd_dev->user_callback_set_altsetting(usbd_dev,
 8001360:	884a      	ldrh	r2, [r1, #2]
 8001362:	8889      	ldrh	r1, [r1, #4]
 8001364:	4798      	blx	r3
	*len = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	802b      	strh	r3, [r5, #0]
 800136a:	2001      	movs	r0, #1
}
 800136c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (req->wValue > 0) {
 800136e:	2c00      	cmp	r4, #0
 8001370:	d0f3      	beq.n	800135a <usb_standard_set_interface+0x32>
		return USBD_REQ_NOTSUPP;
 8001372:	4610      	mov	r0, r2
 8001374:	e7fa      	b.n	800136c <usb_standard_set_interface+0x44>
 8001376:	2000      	movs	r0, #0
 8001378:	e7f8      	b.n	800136c <usb_standard_set_interface+0x44>

0800137a <usb_standard_get_descriptor>:
{
 800137a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	descr_idx = usb_descriptor_index(req->wValue);
 800137e:	884d      	ldrh	r5, [r1, #2]
{
 8001380:	461f      	mov	r7, r3
	switch (usb_descriptor_type(req->wValue)) {
 8001382:	0a2b      	lsrs	r3, r5, #8
 8001384:	2b02      	cmp	r3, #2
{
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	4616      	mov	r6, r2
	switch (usb_descriptor_type(req->wValue)) {
 800138a:	d011      	beq.n	80013b0 <usb_standard_get_descriptor+0x36>
 800138c:	2b03      	cmp	r3, #3
 800138e:	f000 80e7 	beq.w	8001560 <usb_standard_get_descriptor+0x1e6>
 8001392:	2b01      	cmp	r3, #1
 8001394:	f040 811c 	bne.w	80015d0 <usb_standard_get_descriptor+0x256>
		*buf = (uint8_t *) usbd_dev->desc;
 8001398:	6802      	ldr	r2, [r0, #0]
 800139a:	6032      	str	r2, [r6, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 800139c:	7812      	ldrb	r2, [r2, #0]
 800139e:	8839      	ldrh	r1, [r7, #0]
 80013a0:	428a      	cmp	r2, r1
 80013a2:	bf28      	it	cs
 80013a4:	460a      	movcs	r2, r1
 80013a6:	803a      	strh	r2, [r7, #0]
		return USBD_REQ_HANDLED;
 80013a8:	2001      	movs	r0, #1
}
 80013aa:	b009      	add	sp, #36	; 0x24
 80013ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80013b0:	b2ed      	uxtb	r5, r5
 80013b2:	eb05 0645 	add.w	r6, r5, r5, lsl #1
		*buf = usbd_dev->ctrl_buf;
 80013b6:	6903      	ldr	r3, [r0, #16]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80013b8:	f8d0 8004 	ldr.w	r8, [r0, #4]
		*buf = usbd_dev->ctrl_buf;
 80013bc:	6013      	str	r3, [r2, #0]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80013be:	eb05 0686 	add.w	r6, r5, r6, lsl #2
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 80013c2:	883c      	ldrh	r4, [r7, #0]
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 80013c4:	f818 5006 	ldrb.w	r5, [r8, r6]
		*buf = usbd_dev->ctrl_buf;
 80013c8:	9301      	str	r3, [sp, #4]
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 80013ca:	42a5      	cmp	r5, r4
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80013cc:	eb08 0306 	add.w	r3, r8, r6
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 80013d0:	bf28      	it	cs
 80013d2:	4625      	movcs	r5, r4
 80013d4:	462a      	mov	r2, r5
 80013d6:	4619      	mov	r1, r3
 80013d8:	9801      	ldr	r0, [sp, #4]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80013da:	9302      	str	r3, [sp, #8]
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 80013dc:	f000 fe5e 	bl	800209c <memcpy>
	buf += count;
 80013e0:	9b01      	ldr	r3, [sp, #4]
	totallen += cfg->bLength;
 80013e2:	f818 6006 	ldrb.w	r6, [r8, r6]
	len -= count;
 80013e6:	1b64      	subs	r4, r4, r5
	buf += count;
 80013e8:	442b      	add	r3, r5
	len -= count;
 80013ea:	b2a4      	uxth	r4, r4
	totallen += cfg->bLength;
 80013ec:	2200      	movs	r2, #0
 80013ee:	9204      	str	r2, [sp, #16]
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 80013f0:	9a02      	ldr	r2, [sp, #8]
 80013f2:	7911      	ldrb	r1, [r2, #4]
 80013f4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80013f8:	4291      	cmp	r1, r2
 80013fa:	d803      	bhi.n	8001404 <usb_standard_get_descriptor+0x8a>
	memcpy((tmpbuf + 2), &totallen, sizeof(uint16_t));
 80013fc:	9b01      	ldr	r3, [sp, #4]
 80013fe:	805e      	strh	r6, [r3, #2]
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 8001400:	803d      	strh	r5, [r7, #0]
 8001402:	e7d1      	b.n	80013a8 <usb_standard_get_descriptor+0x2e>
 8001404:	9a04      	ldr	r2, [sp, #16]
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	9207      	str	r2, [sp, #28]
		if (cfg->interface[i].iface_assoc) {
 800140a:	9a02      	ldr	r2, [sp, #8]
 800140c:	9907      	ldr	r1, [sp, #28]
 800140e:	f8d2 2009 	ldr.w	r2, [r2, #9]
 8001412:	440a      	add	r2, r1
 8001414:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8001418:	f1b9 0f00 	cmp.w	r9, #0
 800141c:	d014      	beq.n	8001448 <usb_standard_get_descriptor+0xce>
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
 800141e:	f899 8000 	ldrb.w	r8, [r9]
 8001422:	45a0      	cmp	r8, r4
 8001424:	bf28      	it	cs
 8001426:	46a0      	movcs	r8, r4
 8001428:	4642      	mov	r2, r8
 800142a:	4618      	mov	r0, r3
 800142c:	4649      	mov	r1, r9
 800142e:	f000 fe35 	bl	800209c <memcpy>
			totallen += assoc->bLength;
 8001432:	f899 2000 	ldrb.w	r2, [r9]
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
 8001436:	4603      	mov	r3, r0
			len -= count;
 8001438:	eba4 0408 	sub.w	r4, r4, r8
			total += count;
 800143c:	4445      	add	r5, r8
			totallen += assoc->bLength;
 800143e:	4416      	add	r6, r2
			buf += count;
 8001440:	4443      	add	r3, r8
			len -= count;
 8001442:	b2a4      	uxth	r4, r4
			total += count;
 8001444:	b2ad      	uxth	r5, r5
			totallen += assoc->bLength;
 8001446:	b2b6      	uxth	r6, r6
{
 8001448:	2200      	movs	r2, #0
 800144a:	9205      	str	r2, [sp, #20]
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 800144c:	9a02      	ldr	r2, [sp, #8]
 800144e:	9907      	ldr	r1, [sp, #28]
 8001450:	f8d2 2009 	ldr.w	r2, [r2, #9]
 8001454:	440a      	add	r2, r1
 8001456:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800145a:	7910      	ldrb	r0, [r2, #4]
 800145c:	4288      	cmp	r0, r1
 800145e:	d802      	bhi.n	8001466 <usb_standard_get_descriptor+0xec>
 8001460:	9a04      	ldr	r2, [sp, #16]
 8001462:	3201      	adds	r2, #1
 8001464:	e7c3      	b.n	80013ee <usb_standard_get_descriptor+0x74>
			const struct usb_interface_descriptor *iface =
 8001466:	9905      	ldr	r1, [sp, #20]
 8001468:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 800146c:	2015      	movs	r0, #21
 800146e:	fb00 f901 	mul.w	r9, r0, r1
 8001472:	eb0a 0b09 	add.w	fp, sl, r9
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 8001476:	f81a 8009 	ldrb.w	r8, [sl, r9]
 800147a:	45a0      	cmp	r8, r4
 800147c:	bf28      	it	cs
 800147e:	46a0      	movcs	r8, r4
 8001480:	4642      	mov	r2, r8
 8001482:	4659      	mov	r1, fp
 8001484:	4618      	mov	r0, r3
 8001486:	f000 fe09 	bl	800209c <memcpy>
			totallen += iface->bLength;
 800148a:	f81a 2009 	ldrb.w	r2, [sl, r9]
			if (iface->extra) {
 800148e:	f8db 100d 	ldr.w	r1, [fp, #13]
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 8001492:	4603      	mov	r3, r0
			len -= count;
 8001494:	eba4 0408 	sub.w	r4, r4, r8
			total += count;
 8001498:	4445      	add	r5, r8
			totallen += iface->bLength;
 800149a:	4416      	add	r6, r2
			buf += count;
 800149c:	4443      	add	r3, r8
			len -= count;
 800149e:	b2a4      	uxth	r4, r4
			total += count;
 80014a0:	b2ad      	uxth	r5, r5
			totallen += iface->bLength;
 80014a2:	b2b6      	uxth	r6, r6
			if (iface->extra) {
 80014a4:	b1a9      	cbz	r1, 80014d2 <usb_standard_get_descriptor+0x158>
				       count = MIN(len, iface->extralen));
 80014a6:	f8db 8011 	ldr.w	r8, [fp, #17]
 80014aa:	45a0      	cmp	r8, r4
 80014ac:	bfa8      	it	ge
 80014ae:	46a0      	movge	r8, r4
 80014b0:	fa1f f988 	uxth.w	r9, r8
				memcpy(buf, iface->extra,
 80014b4:	464a      	mov	r2, r9
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 fdf0 	bl	800209c <memcpy>
				totallen += iface->extralen;
 80014bc:	f8db 2011 	ldr.w	r2, [fp, #17]
				memcpy(buf, iface->extra,
 80014c0:	4603      	mov	r3, r0
				len -= count;
 80014c2:	eba4 0409 	sub.w	r4, r4, r9
				total += count;
 80014c6:	444d      	add	r5, r9
				totallen += iface->extralen;
 80014c8:	4416      	add	r6, r2
				buf += count;
 80014ca:	444b      	add	r3, r9
				len -= count;
 80014cc:	b2a4      	uxth	r4, r4
				total += count;
 80014ce:	b2ad      	uxth	r5, r5
				totallen += iface->extralen;
 80014d0:	b2b6      	uxth	r6, r6
{
 80014d2:	f04f 0900 	mov.w	r9, #0
			for (k = 0; k < iface->bNumEndpoints; k++) {
 80014d6:	f89b 1004 	ldrb.w	r1, [fp, #4]
 80014da:	fa1f f289 	uxth.w	r2, r9
 80014de:	4291      	cmp	r1, r2
 80014e0:	d802      	bhi.n	80014e8 <usb_standard_get_descriptor+0x16e>
 80014e2:	9a05      	ldr	r2, [sp, #20]
 80014e4:	3201      	adds	r2, #1
 80014e6:	e7b0      	b.n	800144a <usb_standard_get_descriptor+0xd0>
				    &iface->endpoint[k];
 80014e8:	f8db 2009 	ldr.w	r2, [fp, #9]
 80014ec:	9206      	str	r2, [sp, #24]
				const struct usb_endpoint_descriptor *ep =
 80014ee:	ebc9 1a09 	rsb	sl, r9, r9, lsl #4
 80014f2:	4452      	add	r2, sl
 80014f4:	9203      	str	r2, [sp, #12]
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 80014f6:	9a06      	ldr	r2, [sp, #24]
 80014f8:	9903      	ldr	r1, [sp, #12]
 80014fa:	f812 800a 	ldrb.w	r8, [r2, sl]
 80014fe:	45a0      	cmp	r8, r4
 8001500:	bf28      	it	cs
 8001502:	46a0      	movcs	r8, r4
 8001504:	4642      	mov	r2, r8
 8001506:	4618      	mov	r0, r3
 8001508:	f000 fdc8 	bl	800209c <memcpy>
				totallen += ep->bLength;
 800150c:	9a06      	ldr	r2, [sp, #24]
 800150e:	f812 200a 	ldrb.w	r2, [r2, sl]
 8001512:	4416      	add	r6, r2
				if (ep->extra) {
 8001514:	9a03      	ldr	r2, [sp, #12]
 8001516:	f8d2 1007 	ldr.w	r1, [r2, #7]
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 800151a:	4603      	mov	r3, r0
				len -= count;
 800151c:	eba4 0408 	sub.w	r4, r4, r8
				total += count;
 8001520:	4445      	add	r5, r8
				buf += count;
 8001522:	4443      	add	r3, r8
				len -= count;
 8001524:	b2a4      	uxth	r4, r4
				total += count;
 8001526:	b2ad      	uxth	r5, r5
				totallen += ep->bLength;
 8001528:	b2b6      	uxth	r6, r6
				if (ep->extra) {
 800152a:	b1b1      	cbz	r1, 800155a <usb_standard_get_descriptor+0x1e0>
					       count = MIN(len, ep->extralen));
 800152c:	f8d2 800b 	ldr.w	r8, [r2, #11]
 8001530:	45a0      	cmp	r8, r4
 8001532:	bfa8      	it	ge
 8001534:	46a0      	movge	r8, r4
 8001536:	fa1f fa88 	uxth.w	sl, r8
					memcpy(buf, ep->extra,
 800153a:	4652      	mov	r2, sl
 800153c:	4618      	mov	r0, r3
 800153e:	f000 fdad 	bl	800209c <memcpy>
					totallen += ep->extralen;
 8001542:	9a03      	ldr	r2, [sp, #12]
 8001544:	f8d2 200b 	ldr.w	r2, [r2, #11]
					memcpy(buf, ep->extra,
 8001548:	4603      	mov	r3, r0
					len -= count;
 800154a:	eba4 040a 	sub.w	r4, r4, sl
					total += count;
 800154e:	4455      	add	r5, sl
					totallen += ep->extralen;
 8001550:	4416      	add	r6, r2
					buf += count;
 8001552:	4453      	add	r3, sl
					len -= count;
 8001554:	b2a4      	uxth	r4, r4
					total += count;
 8001556:	b2ad      	uxth	r5, r5
					totallen += ep->extralen;
 8001558:	b2b6      	uxth	r6, r6
 800155a:	f109 0901 	add.w	r9, r9, #1
 800155e:	e7ba      	b.n	80014d6 <usb_standard_get_descriptor+0x15c>
		if (descr_idx == 0) {
 8001560:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		sd = (struct usb_string_descriptor *)usbd_dev->ctrl_buf;
 8001564:	6904      	ldr	r4, [r0, #16]
		if (descr_idx == 0) {
 8001566:	d10d      	bne.n	8001584 <usb_standard_get_descriptor+0x20a>
			sd->wData[0] = USB_LANGID_ENGLISH_US;
 8001568:	2309      	movs	r3, #9
 800156a:	70a3      	strb	r3, [r4, #2]
 800156c:	2304      	movs	r3, #4
 800156e:	70e3      	strb	r3, [r4, #3]
			sd->bLength = sizeof(sd->bLength) +
 8001570:	7023      	strb	r3, [r4, #0]
			*len = MIN(*len, sd->bLength);
 8001572:	883b      	ldrh	r3, [r7, #0]
 8001574:	2b04      	cmp	r3, #4
 8001576:	bf28      	it	cs
 8001578:	2304      	movcs	r3, #4
 800157a:	803b      	strh	r3, [r7, #0]
		sd->bDescriptorType = USB_DT_STRING;
 800157c:	2303      	movs	r3, #3
 800157e:	7063      	strb	r3, [r4, #1]
		*buf = (uint8_t *)sd;
 8001580:	6034      	str	r4, [r6, #0]
 8001582:	e711      	b.n	80013a8 <usb_standard_get_descriptor+0x2e>
			if (!usbd_dev->strings) {
 8001584:	6883      	ldr	r3, [r0, #8]
 8001586:	b31b      	cbz	r3, 80015d0 <usb_standard_get_descriptor+0x256>
			if (array_idx >= usbd_dev->num_strings) {
 8001588:	68c2      	ldr	r2, [r0, #12]
			array_idx = descr_idx - 1;
 800158a:	3d01      	subs	r5, #1
			if (array_idx >= usbd_dev->num_strings) {
 800158c:	42aa      	cmp	r2, r5
 800158e:	dd1f      	ble.n	80015d0 <usb_standard_get_descriptor+0x256>
			if (req->wIndex != USB_LANGID_ENGLISH_US) {
 8001590:	8889      	ldrh	r1, [r1, #4]
 8001592:	f240 4209 	movw	r2, #1033	; 0x409
 8001596:	4291      	cmp	r1, r2
 8001598:	d11a      	bne.n	80015d0 <usb_standard_get_descriptor+0x256>
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 800159a:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 800159e:	4628      	mov	r0, r5
 80015a0:	f000 fd8f 	bl	80020c2 <strlen>
 80015a4:	3001      	adds	r0, #1
 80015a6:	0040      	lsls	r0, r0, #1
 80015a8:	b2c0      	uxtb	r0, r0
 80015aa:	7020      	strb	r0, [r4, #0]
			*len = MIN(*len, sd->bLength);
 80015ac:	883b      	ldrh	r3, [r7, #0]
 80015ae:	4298      	cmp	r0, r3
 80015b0:	bf28      	it	cs
 80015b2:	4618      	movcs	r0, r3
 80015b4:	8038      	strh	r0, [r7, #0]
			for (i = 0; i < (*len / 2) - 1; i++) {
 80015b6:	4629      	mov	r1, r5
 80015b8:	883b      	ldrh	r3, [r7, #0]
 80015ba:	085b      	lsrs	r3, r3, #1
 80015bc:	1b4a      	subs	r2, r1, r5
 80015be:	3b01      	subs	r3, #1
 80015c0:	4293      	cmp	r3, r2
 80015c2:	dddb      	ble.n	800157c <usb_standard_get_descriptor+0x202>
				sd->wData[i] =
 80015c4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
					usbd_dev->strings[array_idx][i];
 80015c8:	f811 3b01 	ldrb.w	r3, [r1], #1
				sd->wData[i] =
 80015cc:	8053      	strh	r3, [r2, #2]
 80015ce:	e7f3      	b.n	80015b8 <usb_standard_get_descriptor+0x23e>
				return USBD_REQ_NOTSUPP;
 80015d0:	2000      	movs	r0, #0
 80015d2:	e6ea      	b.n	80013aa <usb_standard_get_descriptor+0x30>

080015d4 <usb_standard_interface_get_status>:
 80015d4:	8819      	ldrh	r1, [r3, #0]
 80015d6:	2902      	cmp	r1, #2
 80015d8:	bf84      	itt	hi
 80015da:	2102      	movhi	r1, #2
 80015dc:	8019      	strhhi	r1, [r3, #0]
 80015de:	6811      	ldr	r1, [r2, #0]
 80015e0:	2300      	movs	r3, #0
 80015e2:	700b      	strb	r3, [r1, #0]
 80015e4:	6812      	ldr	r2, [r2, #0]
 80015e6:	2001      	movs	r0, #1
 80015e8:	7053      	strb	r3, [r2, #1]
 80015ea:	4770      	bx	lr

080015ec <usbd_register_set_config_callback>:
{
 80015ec:	b510      	push	{r4, lr}
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 80015ee:	2300      	movs	r3, #0
 80015f0:	f100 04c8 	add.w	r4, r0, #200	; 0xc8
		if (usbd_dev->user_callback_set_config[i]) {
 80015f4:	f854 2b04 	ldr.w	r2, [r4], #4
 80015f8:	b12a      	cbz	r2, 8001606 <usbd_register_set_config_callback+0x1a>
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 80015fa:	3301      	adds	r3, #1
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d1f9      	bne.n	80015f4 <usbd_register_set_config_callback+0x8>
	return -1;
 8001600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001604:	bd10      	pop	{r4, pc}
		usbd_dev->user_callback_set_config[i] = callback;
 8001606:	3332      	adds	r3, #50	; 0x32
 8001608:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		return 0;
 800160c:	4610      	mov	r0, r2
 800160e:	e7f9      	b.n	8001604 <usbd_register_set_config_callback+0x18>

08001610 <_usbd_standard_request_device>:

enum usbd_request_return_codes
_usbd_standard_request_device(usbd_device *usbd_dev,
			      struct usb_setup_data *req, uint8_t **buf,
			      uint16_t *len)
{
 8001610:	b410      	push	{r4}
	enum usbd_request_return_codes (*command)(usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8001612:	784c      	ldrb	r4, [r1, #1]
 8001614:	2c09      	cmp	r4, #9
 8001616:	d813      	bhi.n	8001640 <_usbd_standard_request_device+0x30>
 8001618:	e8df f004 	tbb	[pc, r4]
 800161c:	1212120e 	.word	0x1212120e
 8001620:	120c1012 	.word	0x120c1012
 8001624:	050a      	.short	0x050a
		 * It is only processed at STATUS stage.
		 */
		command = usb_standard_set_address;
		break;
	case USB_REQ_SET_CONFIGURATION:
		command = usb_standard_set_configuration;
 8001626:	4c08      	ldr	r4, [pc, #32]	; (8001648 <_usbd_standard_request_device+0x38>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 8001628:	46a4      	mov	ip, r4
}
 800162a:	f85d 4b04 	ldr.w	r4, [sp], #4
	return command(usbd_dev, req, buf, len);
 800162e:	4760      	bx	ip
		command = usb_standard_get_configuration;
 8001630:	4c06      	ldr	r4, [pc, #24]	; (800164c <_usbd_standard_request_device+0x3c>)
		break;
 8001632:	e7f9      	b.n	8001628 <_usbd_standard_request_device+0x18>
		command = usb_standard_get_descriptor;
 8001634:	4c06      	ldr	r4, [pc, #24]	; (8001650 <_usbd_standard_request_device+0x40>)
		break;
 8001636:	e7f7      	b.n	8001628 <_usbd_standard_request_device+0x18>
		command = usb_standard_device_get_status;
 8001638:	4c06      	ldr	r4, [pc, #24]	; (8001654 <_usbd_standard_request_device+0x44>)
		break;
 800163a:	e7f5      	b.n	8001628 <_usbd_standard_request_device+0x18>
		command = usb_standard_set_address;
 800163c:	4c06      	ldr	r4, [pc, #24]	; (8001658 <_usbd_standard_request_device+0x48>)
 800163e:	e7f3      	b.n	8001628 <_usbd_standard_request_device+0x18>
}
 8001640:	2000      	movs	r0, #0
 8001642:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	080011af 	.word	0x080011af
 800164c:	08001245 	.word	0x08001245
 8001650:	0800137b 	.word	0x0800137b
 8001654:	0800129f 	.word	0x0800129f
 8001658:	08001301 	.word	0x08001301

0800165c <_usbd_standard_request_interface>:

enum usbd_request_return_codes
_usbd_standard_request_interface(usbd_device *usbd_dev,
				 struct usb_setup_data *req, uint8_t **buf,
				 uint16_t *len)
{
 800165c:	b410      	push	{r4}
	enum usbd_request_return_codes (*command)(usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 800165e:	784c      	ldrb	r4, [r1, #1]
 8001660:	2c0a      	cmp	r4, #10
 8001662:	d009      	beq.n	8001678 <_usbd_standard_request_interface+0x1c>
 8001664:	2c0b      	cmp	r4, #11
 8001666:	d002      	beq.n	800166e <_usbd_standard_request_interface+0x12>
 8001668:	b944      	cbnz	r4, 800167c <_usbd_standard_request_interface+0x20>
		break;
	case USB_REQ_SET_INTERFACE:
		command = usb_standard_set_interface;
		break;
	case USB_REQ_GET_STATUS:
		command = usb_standard_interface_get_status;
 800166a:	4c06      	ldr	r4, [pc, #24]	; (8001684 <_usbd_standard_request_interface+0x28>)
		break;
 800166c:	e000      	b.n	8001670 <_usbd_standard_request_interface+0x14>
		command = usb_standard_set_interface;
 800166e:	4c06      	ldr	r4, [pc, #24]	; (8001688 <_usbd_standard_request_interface+0x2c>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 8001670:	46a4      	mov	ip, r4
}
 8001672:	f85d 4b04 	ldr.w	r4, [sp], #4
	return command(usbd_dev, req, buf, len);
 8001676:	4760      	bx	ip
		command = usb_standard_get_interface;
 8001678:	4c04      	ldr	r4, [pc, #16]	; (800168c <_usbd_standard_request_interface+0x30>)
 800167a:	e7f9      	b.n	8001670 <_usbd_standard_request_interface+0x14>
}
 800167c:	2000      	movs	r0, #0
 800167e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	080015d5 	.word	0x080015d5
 8001688:	08001329 	.word	0x08001329
 800168c:	08001267 	.word	0x08001267

08001690 <_usbd_standard_request_endpoint>:

enum usbd_request_return_codes
_usbd_standard_request_endpoint(usbd_device *usbd_dev,
				struct usb_setup_data *req, uint8_t **buf,
				uint16_t *len)
{
 8001690:	b410      	push	{r4}
	enum usbd_request_return_codes (*command) (usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8001692:	784c      	ldrb	r4, [r1, #1]
 8001694:	2c01      	cmp	r4, #1
 8001696:	d006      	beq.n	80016a6 <_usbd_standard_request_endpoint+0x16>
 8001698:	d312      	bcc.n	80016c0 <_usbd_standard_request_endpoint+0x30>
 800169a:	2c03      	cmp	r4, #3
 800169c:	d008      	beq.n	80016b0 <_usbd_standard_request_endpoint+0x20>
	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
}
 800169e:	2000      	movs	r0, #0
 80016a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016a4:	4770      	bx	lr
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 80016a6:	884c      	ldrh	r4, [r1, #2]
 80016a8:	2c00      	cmp	r4, #0
 80016aa:	d1f8      	bne.n	800169e <_usbd_standard_request_endpoint+0xe>
			command = usb_standard_endpoint_unstall;
 80016ac:	4c05      	ldr	r4, [pc, #20]	; (80016c4 <_usbd_standard_request_endpoint+0x34>)
 80016ae:	e003      	b.n	80016b8 <_usbd_standard_request_endpoint+0x28>
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 80016b0:	884c      	ldrh	r4, [r1, #2]
 80016b2:	2c00      	cmp	r4, #0
 80016b4:	d1f3      	bne.n	800169e <_usbd_standard_request_endpoint+0xe>
			command = usb_standard_endpoint_stall;
 80016b6:	4c04      	ldr	r4, [pc, #16]	; (80016c8 <_usbd_standard_request_endpoint+0x38>)
	return command(usbd_dev, req, buf, len);
 80016b8:	46a4      	mov	ip, r4
}
 80016ba:	f85d 4b04 	ldr.w	r4, [sp], #4
	return command(usbd_dev, req, buf, len);
 80016be:	4760      	bx	ip
		command = usb_standard_endpoint_get_status;
 80016c0:	4c02      	ldr	r4, [pc, #8]	; (80016cc <_usbd_standard_request_endpoint+0x3c>)
 80016c2:	e7f9      	b.n	80016b8 <_usbd_standard_request_endpoint+0x28>
 80016c4:	080012f1 	.word	0x080012f1
 80016c8:	080012e1 	.word	0x080012e1
 80016cc:	080012b7 	.word	0x080012b7

080016d0 <_usbd_standard_request>:

enum usbd_request_return_codes
_usbd_standard_request(usbd_device *usbd_dev, struct usb_setup_data *req,
		       uint8_t **buf, uint16_t *len)
{
 80016d0:	b410      	push	{r4}
	/* FIXME: Have class/vendor requests as well. */
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) {
 80016d2:	780c      	ldrb	r4, [r1, #0]
 80016d4:	f014 0f60 	tst.w	r4, #96	; 0x60
 80016d8:	d106      	bne.n	80016e8 <_usbd_standard_request+0x18>
		return USBD_REQ_NOTSUPP;
	}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
 80016da:	f004 041f 	and.w	r4, r4, #31
 80016de:	2c01      	cmp	r4, #1
 80016e0:	d00a      	beq.n	80016f8 <_usbd_standard_request+0x28>
 80016e2:	d305      	bcc.n	80016f0 <_usbd_standard_request+0x20>
 80016e4:	2c02      	cmp	r4, #2
 80016e6:	d00b      	beq.n	8001700 <_usbd_standard_request+0x30>
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
	default:
		return USBD_REQ_NOTSUPP;
	}
}
 80016e8:	2000      	movs	r0, #0
 80016ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	f85d 4b04 	ldr.w	r4, [sp], #4
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
 80016f4:	f7ff bf8c 	b.w	8001610 <_usbd_standard_request_device>
}
 80016f8:	f85d 4b04 	ldr.w	r4, [sp], #4
		return _usbd_standard_request_interface(usbd_dev, req,
 80016fc:	f7ff bfae 	b.w	800165c <_usbd_standard_request_interface>
}
 8001700:	f85d 4b04 	ldr.w	r4, [sp], #4
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
 8001704:	f7ff bfc4 	b.w	8001690 <_usbd_standard_request_endpoint>

08001708 <stall_transaction>:
 * According to the USB 2.0 specification, section 8.5.3, when a control
 * transfer is stalled, the pipe becomes idle. We provide one utility to stall
 * a transaction to reduce boilerplate code.
 */
static void stall_transaction(usbd_device *usbd_dev)
{
 8001708:	b510      	push	{r4, lr}
	usbd_ep_stall_set(usbd_dev, 0, 1);
 800170a:	2201      	movs	r2, #1
{
 800170c:	4604      	mov	r4, r0
	usbd_ep_stall_set(usbd_dev, 0, 1);
 800170e:	2100      	movs	r1, #0
 8001710:	f7ff fd45 	bl	800119e <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8001714:	2300      	movs	r3, #0
 8001716:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800171a:	bd10      	pop	{r4, pc}

0800171c <usb_control_recv_chunk>:
		usbd_dev->control_state.ctrl_buf = NULL;
	}
}

static int usb_control_recv_chunk(usbd_device *usbd_dev)
{
 800171c:	b570      	push	{r4, r5, r6, lr}
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 800171e:	6803      	ldr	r3, [r0, #0]
 8001720:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8001722:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 8001724:	79db      	ldrb	r3, [r3, #7]
			usbd_dev->control_state.req.wLength -
			usbd_dev->control_state.ctrl_len);
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
				       usbd_dev->control_state.ctrl_buf +
 8001726:	6b81      	ldr	r1, [r0, #56]	; 0x38
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8001728:	1aa4      	subs	r4, r4, r2
 800172a:	429c      	cmp	r4, r3
 800172c:	bfa8      	it	ge
 800172e:	461c      	movge	r4, r3
 8001730:	b2a6      	uxth	r6, r4
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 8001732:	440a      	add	r2, r1
 8001734:	4633      	mov	r3, r6
 8001736:	2100      	movs	r1, #0
{
 8001738:	4605      	mov	r5, r0
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 800173a:	f7ff fd28 	bl	800118e <usbd_ep_read_packet>
				       usbd_dev->control_state.ctrl_len,
				       packetsize);

	if (size != packetsize) {
 800173e:	4286      	cmp	r6, r0
 8001740:	d005      	beq.n	800174e <usb_control_recv_chunk+0x32>
		stall_transaction(usbd_dev);
 8001742:	4628      	mov	r0, r5
 8001744:	f7ff ffe0 	bl	8001708 <stall_transaction>
		return -1;
 8001748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	usbd_dev->control_state.ctrl_len += size;

	return packetsize;
}
 800174c:	bd70      	pop	{r4, r5, r6, pc}
	usbd_dev->control_state.ctrl_len += size;
 800174e:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 8001750:	441e      	add	r6, r3
 8001752:	87ae      	strh	r6, [r5, #60]	; 0x3c
 8001754:	b2a0      	uxth	r0, r4
	return packetsize;
 8001756:	e7f9      	b.n	800174c <usb_control_recv_chunk+0x30>

08001758 <usb_control_send_chunk>:
{
 8001758:	b510      	push	{r4, lr}
	if (usbd_dev->desc->bMaxPacketSize0 <
 800175a:	6803      	ldr	r3, [r0, #0]
 800175c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800175e:	79d9      	ldrb	r1, [r3, #7]
			usbd_dev->control_state.ctrl_len) {
 8001760:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
	if (usbd_dev->desc->bMaxPacketSize0 <
 8001762:	4299      	cmp	r1, r3
{
 8001764:	4604      	mov	r4, r0
	if (usbd_dev->desc->bMaxPacketSize0 <
 8001766:	d20f      	bcs.n	8001788 <usb_control_send_chunk+0x30>
		usbd_ep_write_packet(usbd_dev, 0,
 8001768:	460b      	mov	r3, r1
 800176a:	2100      	movs	r1, #0
 800176c:	f7ff fd07 	bl	800117e <usbd_ep_write_packet>
		usbd_dev->control_state.state = DATA_IN;
 8001770:	2302      	movs	r3, #2
 8001772:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			usbd_dev->desc->bMaxPacketSize0;
 8001776:	6823      	ldr	r3, [r4, #0]
		usbd_dev->control_state.ctrl_buf +=
 8001778:	6ba2      	ldr	r2, [r4, #56]	; 0x38
			usbd_dev->desc->bMaxPacketSize0;
 800177a:	79d9      	ldrb	r1, [r3, #7]
		usbd_dev->control_state.ctrl_len -=
 800177c:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf +=
 800177e:	440a      	add	r2, r1
		usbd_dev->control_state.ctrl_len -=
 8001780:	1a5b      	subs	r3, r3, r1
		usbd_dev->control_state.ctrl_buf +=
 8001782:	63a2      	str	r2, [r4, #56]	; 0x38
		usbd_dev->control_state.ctrl_len -=
 8001784:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 8001786:	bd10      	pop	{r4, pc}
		usbd_ep_write_packet(usbd_dev, 0,
 8001788:	2100      	movs	r1, #0
 800178a:	f7ff fcf8 	bl	800117e <usbd_ep_write_packet>
			DATA_IN : LAST_DATA_IN;
 800178e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001792:	2b00      	cmp	r3, #0
 8001794:	bf0c      	ite	eq
 8001796:	2303      	moveq	r3, #3
 8001798:	2302      	movne	r3, #2
		usbd_dev->control_state.state =
 800179a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.needs_zlp = false;
 800179e:	2300      	movs	r3, #0
 80017a0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		usbd_dev->control_state.ctrl_len = 0;
 80017a4:	87a3      	strh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf = NULL;
 80017a6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80017a8:	e7ed      	b.n	8001786 <usb_control_send_chunk+0x2e>

080017aa <usb_control_request_dispatch>:

static enum usbd_request_return_codes
usb_control_request_dispatch(usbd_device *usbd_dev,
			     struct usb_setup_data *req)
{
 80017aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017ae:	4604      	mov	r4, r0
 80017b0:	460e      	mov	r6, r1
	int i, result = 0;
	struct user_control_callback *cb = usbd_dev->user_control_callback;
 80017b2:	f100 0548 	add.w	r5, r0, #72	; 0x48
 80017b6:	f100 0b68 	add.w	fp, r0, #104	; 0x68
 80017ba:	f100 0738 	add.w	r7, r0, #56	; 0x38
 80017be:	f100 083c 	add.w	r8, r0, #60	; 0x3c
		if (cb[i].cb == NULL) {
			break;
		}

		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
			result = cb[i].cb(usbd_dev, req,
 80017c2:	f100 0a40 	add.w	sl, r0, #64	; 0x40
		if (cb[i].cb == NULL) {
 80017c6:	f8d5 9000 	ldr.w	r9, [r5]
 80017ca:	f1b9 0f00 	cmp.w	r9, #0
 80017ce:	d008      	beq.n	80017e2 <usb_control_request_dispatch+0x38>
		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
 80017d0:	7833      	ldrb	r3, [r6, #0]
 80017d2:	7969      	ldrb	r1, [r5, #5]
 80017d4:	792a      	ldrb	r2, [r5, #4]
 80017d6:	400b      	ands	r3, r1
 80017d8:	429a      	cmp	r2, r3
 80017da:	d00b      	beq.n	80017f4 <usb_control_request_dispatch+0x4a>
 80017dc:	3508      	adds	r5, #8
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 80017de:	455d      	cmp	r5, fp
 80017e0:	d1f1      	bne.n	80017c6 <usb_control_request_dispatch+0x1c>
			}
		}
	}

	/* Try standard request if not already handled. */
	return _usbd_standard_request(usbd_dev, req,
 80017e2:	4643      	mov	r3, r8
 80017e4:	463a      	mov	r2, r7
 80017e6:	4631      	mov	r1, r6
 80017e8:	4620      	mov	r0, r4
				      &(usbd_dev->control_state.ctrl_buf),
				      &(usbd_dev->control_state.ctrl_len));
}
 80017ea:	b003      	add	sp, #12
 80017ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return _usbd_standard_request(usbd_dev, req,
 80017f0:	f7ff bf6e 	b.w	80016d0 <_usbd_standard_request>
			result = cb[i].cb(usbd_dev, req,
 80017f4:	f8cd a000 	str.w	sl, [sp]
 80017f8:	4643      	mov	r3, r8
 80017fa:	463a      	mov	r2, r7
 80017fc:	4631      	mov	r1, r6
 80017fe:	4620      	mov	r0, r4
 8001800:	47c8      	blx	r9
			if (result == USBD_REQ_HANDLED ||
 8001802:	2801      	cmp	r0, #1
 8001804:	d8ea      	bhi.n	80017dc <usb_control_request_dispatch+0x32>
}
 8001806:	b003      	add	sp, #12
 8001808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800180c <usb_control_setup_read>:

/* Handle commands and read requests. */
static void usb_control_setup_read(usbd_device *usbd_dev,
		struct usb_setup_data *req)
{
 800180c:	b538      	push	{r3, r4, r5, lr}
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 800180e:	6903      	ldr	r3, [r0, #16]
 8001810:	6383      	str	r3, [r0, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = req->wLength;
 8001812:	798b      	ldrb	r3, [r1, #6]
 8001814:	79ca      	ldrb	r2, [r1, #7]
 8001816:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800181a:	8783      	strh	r3, [r0, #60]	; 0x3c
{
 800181c:	4604      	mov	r4, r0
 800181e:	460d      	mov	r5, r1

	if (usb_control_request_dispatch(usbd_dev, req)) {
 8001820:	f7ff ffc3 	bl	80017aa <usb_control_request_dispatch>
 8001824:	b310      	cbz	r0, 800186c <usb_control_setup_read+0x60>
		if (req->wLength) {
 8001826:	88eb      	ldrh	r3, [r5, #6]
 8001828:	b1bb      	cbz	r3, 800185a <usb_control_setup_read+0x4e>
			usbd_dev->control_state.needs_zlp =
				needs_zlp(usbd_dev->control_state.ctrl_len,
 800182a:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800182c:	6821      	ldr	r1, [r4, #0]
	if (len < wLength) {
 800182e:	4293      	cmp	r3, r2
				needs_zlp(usbd_dev->control_state.ctrl_len,
 8001830:	79c9      	ldrb	r1, [r1, #7]
	if (len < wLength) {
 8001832:	d90e      	bls.n	8001852 <usb_control_setup_read+0x46>
		if (len && (len % ep_size == 0)) {
 8001834:	b17a      	cbz	r2, 8001856 <usb_control_setup_read+0x4a>
 8001836:	fb92 f3f1 	sdiv	r3, r2, r1
 800183a:	fb01 2313 	mls	r3, r1, r3, r2
 800183e:	fab3 f383 	clz	r3, r3
 8001842:	095b      	lsrs	r3, r3, #5
			usbd_dev->control_state.needs_zlp =
 8001844:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
					req->wLength,
					usbd_dev->desc->bMaxPacketSize0);
			/* Go to data out stage if handled. */
			usb_control_send_chunk(usbd_dev);
 8001848:	4620      	mov	r0, r4
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
	}
}
 800184a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			usb_control_send_chunk(usbd_dev);
 800184e:	f7ff bf83 	b.w	8001758 <usb_control_send_chunk>
	return false;
 8001852:	2300      	movs	r3, #0
 8001854:	e7f6      	b.n	8001844 <usb_control_setup_read+0x38>
 8001856:	4613      	mov	r3, r2
 8001858:	e7f4      	b.n	8001844 <usb_control_setup_read+0x38>
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 800185a:	461a      	mov	r2, r3
 800185c:	4619      	mov	r1, r3
 800185e:	4620      	mov	r0, r4
 8001860:	f7ff fc8d 	bl	800117e <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8001864:	2304      	movs	r3, #4
 8001866:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800186a:	bd38      	pop	{r3, r4, r5, pc}
		stall_transaction(usbd_dev);
 800186c:	4620      	mov	r0, r4
}
 800186e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		stall_transaction(usbd_dev);
 8001872:	f7ff bf49 	b.w	8001708 <stall_transaction>

08001876 <usbd_register_control_callback>:
{
 8001876:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001878:	2600      	movs	r6, #0
 800187a:	eb00 05c6 	add.w	r5, r0, r6, lsl #3
		if (usbd_dev->user_control_callback[i].cb) {
 800187e:	6cac      	ldr	r4, [r5, #72]	; 0x48
 8001880:	b12c      	cbz	r4, 800188e <usbd_register_control_callback+0x18>
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001882:	3601      	adds	r6, #1
 8001884:	2e04      	cmp	r6, #4
 8001886:	d1f8      	bne.n	800187a <usbd_register_control_callback+0x4>
	return -1;
 8001888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800188c:	bd70      	pop	{r4, r5, r6, pc}
		usbd_dev->user_control_callback[i].type = type;
 800188e:	f885 104c 	strb.w	r1, [r5, #76]	; 0x4c
		usbd_dev->user_control_callback[i].type_mask = type_mask;
 8001892:	f885 204d 	strb.w	r2, [r5, #77]	; 0x4d
		usbd_dev->user_control_callback[i].cb = callback;
 8001896:	64ab      	str	r3, [r5, #72]	; 0x48
		return 0;
 8001898:	4620      	mov	r0, r4
 800189a:	e7f7      	b.n	800188c <usbd_register_control_callback+0x16>

0800189c <_usbd_control_setup>:

/* Do not appear to belong to the API, so are omitted from docs */
/**@}*/

void _usbd_control_setup(usbd_device *usbd_dev, uint8_t ea)
{
 800189c:	b570      	push	{r4, r5, r6, lr}
	struct usb_setup_data *req = &usbd_dev->control_state.req;
 800189e:	f100 0630 	add.w	r6, r0, #48	; 0x30
	(void)ea;

	usbd_dev->control_state.complete = NULL;
 80018a2:	2500      	movs	r5, #0
 80018a4:	6405      	str	r5, [r0, #64]	; 0x40

	//usbd_ep_nak_set(usbd_dev, 0, 1);

	if (usbd_ep_read_packet(usbd_dev, 0, req, 8) != 8) {
 80018a6:	2308      	movs	r3, #8
 80018a8:	4632      	mov	r2, r6
 80018aa:	4629      	mov	r1, r5
{
 80018ac:	4604      	mov	r4, r0
	if (usbd_ep_read_packet(usbd_dev, 0, req, 8) != 8) {
 80018ae:	f7ff fc6e 	bl	800118e <usbd_ep_read_packet>
 80018b2:	2808      	cmp	r0, #8
 80018b4:	d004      	beq.n	80018c0 <_usbd_control_setup+0x24>
		stall_transaction(usbd_dev);
 80018b6:	4620      	mov	r0, r4
	} else if (req->bmRequestType & 0x80) {
		usb_control_setup_read(usbd_dev, req);
	} else {
		usb_control_setup_write(usbd_dev, req);
	}
}
 80018b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		stall_transaction(usbd_dev);
 80018bc:	f7ff bf24 	b.w	8001708 <stall_transaction>
	if (req->wLength == 0) {
 80018c0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80018c2:	b92b      	cbnz	r3, 80018d0 <_usbd_control_setup+0x34>
		usb_control_setup_read(usbd_dev, req);
 80018c4:	4631      	mov	r1, r6
 80018c6:	4620      	mov	r0, r4
}
 80018c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_control_setup_read(usbd_dev, req);
 80018cc:	f7ff bf9e 	b.w	800180c <usb_control_setup_read>
	} else if (req->bmRequestType & 0x80) {
 80018d0:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 80018d4:	2a00      	cmp	r2, #0
 80018d6:	dbf5      	blt.n	80018c4 <_usbd_control_setup+0x28>
	if (req->wLength > usbd_dev->ctrl_buf_len) {
 80018d8:	8aa2      	ldrh	r2, [r4, #20]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d3eb      	bcc.n	80018b6 <_usbd_control_setup+0x1a>
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 80018de:	6922      	ldr	r2, [r4, #16]
 80018e0:	63a2      	str	r2, [r4, #56]	; 0x38
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 80018e2:	6822      	ldr	r2, [r4, #0]
	usbd_dev->control_state.ctrl_len = 0;
 80018e4:	87a5      	strh	r5, [r4, #60]	; 0x3c
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 80018e6:	79d2      	ldrb	r2, [r2, #7]
 80018e8:	429a      	cmp	r2, r3
		usbd_dev->control_state.state = DATA_OUT;
 80018ea:	bf34      	ite	cc
 80018ec:	2305      	movcc	r3, #5
		usbd_dev->control_state.state = LAST_DATA_OUT;
 80018ee:	2306      	movcs	r3, #6
 80018f0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80018f4:	bd70      	pop	{r4, r5, r6, pc}

080018f6 <_usbd_control_out>:

void _usbd_control_out(usbd_device *usbd_dev, uint8_t ea)
{
	(void)ea;

	switch (usbd_dev->control_state.state) {
 80018f6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80018fa:	2b06      	cmp	r3, #6
{
 80018fc:	b510      	push	{r4, lr}
 80018fe:	4604      	mov	r4, r0
	switch (usbd_dev->control_state.state) {
 8001900:	d012      	beq.n	8001928 <_usbd_control_out+0x32>
 8001902:	2b07      	cmp	r3, #7
 8001904:	d027      	beq.n	8001956 <_usbd_control_out+0x60>
 8001906:	2b05      	cmp	r3, #5
 8001908:	d121      	bne.n	800194e <_usbd_control_out+0x58>
	case DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 800190a:	f7ff ff07 	bl	800171c <usb_control_recv_chunk>
 800190e:	2800      	cmp	r0, #0
 8001910:	db09      	blt.n	8001926 <_usbd_control_out+0x30>
			break;
		}
		if ((usbd_dev->control_state.req.wLength -
					usbd_dev->control_state.ctrl_len) <=
 8001912:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
		if ((usbd_dev->control_state.req.wLength -
 8001914:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001916:	1a9b      	subs	r3, r3, r2
					usbd_dev->desc->bMaxPacketSize0) {
 8001918:	6822      	ldr	r2, [r4, #0]
 800191a:	79d2      	ldrb	r2, [r2, #7]
		if ((usbd_dev->control_state.req.wLength -
 800191c:	4293      	cmp	r3, r2
 800191e:	dc02      	bgt.n	8001926 <_usbd_control_out+0x30>
			usbd_dev->control_state.state = LAST_DATA_OUT;
 8001920:	2306      	movs	r3, #6
		 */
		if (usb_control_request_dispatch(usbd_dev,
					&(usbd_dev->control_state.req))) {
			/* Go to status stage on success. */
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
			usbd_dev->control_state.state = STATUS_IN;
 8001922:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.complete = NULL;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8001926:	bd10      	pop	{r4, pc}
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 8001928:	f7ff fef8 	bl	800171c <usb_control_recv_chunk>
 800192c:	2800      	cmp	r0, #0
 800192e:	dbfa      	blt.n	8001926 <_usbd_control_out+0x30>
		if (usb_control_request_dispatch(usbd_dev,
 8001930:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8001934:	4620      	mov	r0, r4
 8001936:	f7ff ff38 	bl	80017aa <usb_control_request_dispatch>
 800193a:	b138      	cbz	r0, 800194c <_usbd_control_out+0x56>
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 800193c:	2300      	movs	r3, #0
 800193e:	461a      	mov	r2, r3
 8001940:	4619      	mov	r1, r3
 8001942:	4620      	mov	r0, r4
 8001944:	f7ff fc1b 	bl	800117e <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8001948:	2304      	movs	r3, #4
 800194a:	e7ea      	b.n	8001922 <_usbd_control_out+0x2c>
			stall_transaction(usbd_dev);
 800194c:	4620      	mov	r0, r4
}
 800194e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		stall_transaction(usbd_dev);
 8001952:	f7ff bed9 	b.w	8001708 <stall_transaction>
		usbd_ep_read_packet(usbd_dev, 0, NULL, 0);
 8001956:	2300      	movs	r3, #0
 8001958:	461a      	mov	r2, r3
 800195a:	4619      	mov	r1, r3
 800195c:	f7ff fc17 	bl	800118e <usbd_ep_read_packet>
		usbd_dev->control_state.state = IDLE;
 8001960:	2300      	movs	r3, #0
 8001962:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (usbd_dev->control_state.complete) {
 8001966:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001968:	b11b      	cbz	r3, 8001972 <_usbd_control_out+0x7c>
			usbd_dev->control_state.complete(usbd_dev,
 800196a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800196e:	4620      	mov	r0, r4
 8001970:	4798      	blx	r3
		usbd_dev->control_state.complete = NULL;
 8001972:	2300      	movs	r3, #0
 8001974:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8001976:	e7d6      	b.n	8001926 <_usbd_control_out+0x30>

08001978 <_usbd_control_in>:
void _usbd_control_in(usbd_device *usbd_dev, uint8_t ea)
{
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
 8001978:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800197c:	2b03      	cmp	r3, #3
{
 800197e:	b510      	push	{r4, lr}
 8001980:	4604      	mov	r4, r0
	switch (usbd_dev->control_state.state) {
 8001982:	d007      	beq.n	8001994 <_usbd_control_in+0x1c>
 8001984:	2b04      	cmp	r3, #4
 8001986:	d009      	beq.n	800199c <_usbd_control_in+0x24>
 8001988:	2b02      	cmp	r3, #2
 800198a:	d11c      	bne.n	80019c6 <_usbd_control_in+0x4e>
		usbd_dev->control_state.state = IDLE;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 800198c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_control_send_chunk(usbd_dev);
 8001990:	f7ff bee2 	b.w	8001758 <usb_control_send_chunk>
		usbd_dev->control_state.state = STATUS_OUT;
 8001994:	2307      	movs	r3, #7
		usbd_dev->control_state.state = IDLE;
 8001996:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800199a:	bd10      	pop	{r4, pc}
		if (usbd_dev->control_state.complete) {
 800199c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800199e:	b113      	cbz	r3, 80019a6 <_usbd_control_in+0x2e>
			usbd_dev->control_state.complete(usbd_dev,
 80019a0:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80019a4:	4798      	blx	r3
		if ((req->bmRequestType == 0) &&
 80019a6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80019aa:	b953      	cbnz	r3, 80019c2 <_usbd_control_in+0x4a>
 80019ac:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80019b0:	2b05      	cmp	r3, #5
 80019b2:	d106      	bne.n	80019c2 <_usbd_control_in+0x4a>
			usbd_dev->driver->set_address(usbd_dev, req->wValue);
 80019b4:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 80019b6:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 80019ba:	b2c9      	uxtb	r1, r1
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4620      	mov	r0, r4
 80019c0:	4798      	blx	r3
		usbd_dev->control_state.state = IDLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e7e7      	b.n	8001996 <_usbd_control_in+0x1e>
}
 80019c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		stall_transaction(usbd_dev);
 80019ca:	f7ff be9d 	b.w	8001708 <stall_transaction>
	...

080019d0 <stm32f107_usbd_init>:
	.rx_fifo_size = RX_FIFO_SIZE,
};

/** Initialize the USB device controller hardware of the STM32. */
static usbd_device *stm32f107_usbd_init(void)
{
 80019d0:	b508      	push	{r3, lr}
	rcc_periph_clock_enable(RCC_OTGFS);
 80019d2:	f240 6087 	movw	r0, #1671	; 0x687
 80019d6:	f7ff faef 	bl	8000fb8 <rcc_periph_clock_enable>
	OTG_FS_GUSBCFG |= OTG_GUSBCFG_PHYSEL;
 80019da:	4a25      	ldr	r2, [pc, #148]	; (8001a70 <stm32f107_usbd_init+0xa0>)
 80019dc:	6813      	ldr	r3, [r2, #0]
 80019de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019e2:	6013      	str	r3, [r2, #0]

	/* Wait for AHB idle. */
	while (!(OTG_FS_GRSTCTL & OTG_GRSTCTL_AHBIDL));
 80019e4:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <stm32f107_usbd_init+0xa4>)
 80019e6:	4619      	mov	r1, r3
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	2a00      	cmp	r2, #0
 80019ec:	dafc      	bge.n	80019e8 <stm32f107_usbd_init+0x18>
	/* Do core soft reset. */
	OTG_FS_GRSTCTL |= OTG_GRSTCTL_CSRST;
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	f042 0201 	orr.w	r2, r2, #1
 80019f4:	601a      	str	r2, [r3, #0]
	while (OTG_FS_GRSTCTL & OTG_GRSTCTL_CSRST);
 80019f6:	680b      	ldr	r3, [r1, #0]
 80019f8:	07db      	lsls	r3, r3, #31
 80019fa:	d4fc      	bmi.n	80019f6 <stm32f107_usbd_init+0x26>

	if (OTG_FS_CID >= OTG_CID_HAS_VBDEN) {
 80019fc:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <stm32f107_usbd_init+0xa8>)

	/* Restart the PHY clock. */
	OTG_FS_PCGCCTL = 0;

	OTG_FS_GRXFSIZ = stm32f107_usb_driver.rx_fifo_size;
	usbd_dev.fifo_mem_top = stm32f107_usb_driver.rx_fifo_size;
 80019fe:	481f      	ldr	r0, [pc, #124]	; (8001a7c <stm32f107_usbd_init+0xac>)
	if (OTG_FS_CID >= OTG_CID_HAS_VBDEN) {
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a06:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <stm32f107_usbd_init+0xb0>)
		OTG_FS_GCCFG |= OTG_GCCFG_VBDEN | OTG_GCCFG_PWRDWN;
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	bf2c      	ite	cs
 8001a0c:	f442 1204 	orrcs.w	r2, r2, #2162688	; 0x210000
		OTG_FS_GCCFG |= OTG_GCCFG_VBUSBSEN | OTG_GCCFG_PWRDWN;
 8001a10:	f442 2210 	orrcc.w	r2, r2, #589824	; 0x90000
 8001a14:	601a      	str	r2, [r3, #0]
	OTG_FS_DCTL &= ~OTG_DCTL_SDIS;
 8001a16:	4a1b      	ldr	r2, [pc, #108]	; (8001a84 <stm32f107_usbd_init+0xb4>)
 8001a18:	6813      	ldr	r3, [r2, #0]
 8001a1a:	f023 0302 	bic.w	r3, r3, #2
 8001a1e:	6013      	str	r3, [r2, #0]
	OTG_FS_GUSBCFG |= OTG_GUSBCFG_FDMOD | OTG_GUSBCFG_TRDT_MASK;
 8001a20:	f5a2 62ff 	sub.w	r2, r2, #2040	; 0x7f8
 8001a24:	6813      	ldr	r3, [r2, #0]
 8001a26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a2a:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8001a2e:	6013      	str	r3, [r2, #0]
	OTG_FS_GINTSTS = OTG_GINTSTS_MMIS;
 8001a30:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <stm32f107_usbd_init+0xb8>)
 8001a32:	2202      	movs	r2, #2
 8001a34:	601a      	str	r2, [r3, #0]
	OTG_FS_DCFG |= OTG_DCFG_DSPD;
 8001a36:	4a15      	ldr	r2, [pc, #84]	; (8001a8c <stm32f107_usbd_init+0xbc>)
 8001a38:	6813      	ldr	r3, [r2, #0]
 8001a3a:	f043 0303 	orr.w	r3, r3, #3
 8001a3e:	6013      	str	r3, [r2, #0]
	OTG_FS_PCGCCTL = 0;
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <stm32f107_usbd_init+0xc0>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
	OTG_FS_GRXFSIZ = stm32f107_usb_driver.rx_fifo_size;
 8001a46:	4a13      	ldr	r2, [pc, #76]	; (8001a94 <stm32f107_usbd_init+0xc4>)
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	6013      	str	r3, [r2, #0]
	usbd_dev.fifo_mem_top = stm32f107_usb_driver.rx_fifo_size;
 8001a4c:	f8a0 30e0 	strh.w	r3, [r0, #224]	; 0xe0

	/* Unmask interrupts for TX and RX. */
	OTG_FS_GAHBCFG |= OTG_GAHBCFG_GINT;
 8001a50:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	f842 3c1c 	str.w	r3, [r2, #-28]
	OTG_FS_GINTMSK = OTG_GINTMSK_ENUMDNEM |
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <stm32f107_usbd_init+0xc8>)
 8001a5e:	4a0f      	ldr	r2, [pc, #60]	; (8001a9c <stm32f107_usbd_init+0xcc>)
 8001a60:	601a      	str	r2, [r3, #0]
			 OTG_GINTMSK_RXFLVLM |
			 OTG_GINTMSK_IEPINT |
			 OTG_GINTMSK_USBSUSPM |
			 OTG_GINTMSK_WUIM;
	OTG_FS_DAINTMSK = 0xF;
 8001a62:	220f      	movs	r2, #15
 8001a64:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
	OTG_FS_DIEPMSK = OTG_DIEPMSK_XFRCM;
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f8c3 27f8 	str.w	r2, [r3, #2040]	; 0x7f8

	return &usbd_dev;
}
 8001a6e:	bd08      	pop	{r3, pc}
 8001a70:	5000000c 	.word	0x5000000c
 8001a74:	50000010 	.word	0x50000010
 8001a78:	5000003c 	.word	0x5000003c
 8001a7c:	2000004c 	.word	0x2000004c
 8001a80:	50000038 	.word	0x50000038
 8001a84:	50000804 	.word	0x50000804
 8001a88:	50000014 	.word	0x50000014
 8001a8c:	50000800 	.word	0x50000800
 8001a90:	50000e00 	.word	0x50000e00
 8001a94:	50000024 	.word	0x50000024
 8001a98:	50000018 	.word	0x50000018
 8001a9c:	80042810 	.word	0x80042810

08001aa0 <blocking_handler>:
	}

}

void blocking_handler(void)
{
 8001aa0:	e7fe      	b.n	8001aa0 <blocking_handler>

08001aa2 <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 8001aa2:	4770      	bx	lr

08001aa4 <reset_handler>:
{
 8001aa4:	4c1a      	ldr	r4, [pc, #104]	; (8001b10 <reset_handler+0x6c>)
 8001aa6:	491b      	ldr	r1, [pc, #108]	; (8001b14 <reset_handler+0x70>)
	for (src = &_data_loadaddr, dest = &_data;
 8001aa8:	481b      	ldr	r0, [pc, #108]	; (8001b18 <reset_handler+0x74>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	1853      	adds	r3, r2, r1
 8001aae:	4283      	cmp	r3, r0
 8001ab0:	d31a      	bcc.n	8001ae8 <reset_handler+0x44>
	while (dest < &_ebss) {
 8001ab2:	4a1a      	ldr	r2, [pc, #104]	; (8001b1c <reset_handler+0x78>)
		*dest++ = 0;
 8001ab4:	2100      	movs	r1, #0
	while (dest < &_ebss) {
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d31a      	bcc.n	8001af0 <reset_handler+0x4c>
	SCB_CCR |= SCB_CCR_STKALIGN;
 8001aba:	4a19      	ldr	r2, [pc, #100]	; (8001b20 <reset_handler+0x7c>)
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001abc:	4c19      	ldr	r4, [pc, #100]	; (8001b24 <reset_handler+0x80>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 8001abe:	6813      	ldr	r3, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001ac0:	4d19      	ldr	r5, [pc, #100]	; (8001b28 <reset_handler+0x84>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 8001ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac6:	6013      	str	r3, [r2, #0]
#include <libopencm3/cm3/scb.h>

static void pre_main(void)
{
	/* Enable access to Floating-Point coprocessor. */
	SCB_CPACR |= SCB_CPACR_FULL * (SCB_CPACR_CP10 | SCB_CPACR_CP11);
 8001ac8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001aca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ace:	6753      	str	r3, [r2, #116]	; 0x74
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001ad0:	42ac      	cmp	r4, r5
 8001ad2:	d310      	bcc.n	8001af6 <reset_handler+0x52>
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8001ad4:	4c15      	ldr	r4, [pc, #84]	; (8001b2c <reset_handler+0x88>)
 8001ad6:	4d16      	ldr	r5, [pc, #88]	; (8001b30 <reset_handler+0x8c>)
 8001ad8:	42ac      	cmp	r4, r5
 8001ada:	d310      	bcc.n	8001afe <reset_handler+0x5a>
	main();
 8001adc:	f7fe fd04 	bl	80004e8 <main>
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8001ae0:	4c14      	ldr	r4, [pc, #80]	; (8001b34 <reset_handler+0x90>)
 8001ae2:	4d15      	ldr	r5, [pc, #84]	; (8001b38 <reset_handler+0x94>)
 8001ae4:	42ac      	cmp	r4, r5
 8001ae6:	d30e      	bcc.n	8001b06 <reset_handler+0x62>
		*dest = *src;
 8001ae8:	5913      	ldr	r3, [r2, r4]
 8001aea:	5053      	str	r3, [r2, r1]
 8001aec:	3204      	adds	r2, #4
 8001aee:	e7dd      	b.n	8001aac <reset_handler+0x8>
		*dest++ = 0;
 8001af0:	6019      	str	r1, [r3, #0]
 8001af2:	3304      	adds	r3, #4
 8001af4:	e7df      	b.n	8001ab6 <reset_handler+0x12>
		(*fp)();
 8001af6:	f854 3b04 	ldr.w	r3, [r4], #4
 8001afa:	4798      	blx	r3
 8001afc:	e7e8      	b.n	8001ad0 <reset_handler+0x2c>
		(*fp)();
 8001afe:	f854 3b04 	ldr.w	r3, [r4], #4
 8001b02:	4798      	blx	r3
 8001b04:	e7e8      	b.n	8001ad8 <reset_handler+0x34>
		(*fp)();
 8001b06:	f854 3b04 	ldr.w	r3, [r4], #4
 8001b0a:	4798      	blx	r3
 8001b0c:	e7ea      	b.n	8001ae4 <reset_handler+0x40>
 8001b0e:	bf00      	nop
 8001b10:	08002228 	.word	0x08002228
 8001b14:	20000000 	.word	0x20000000
 8001b18:	20000028 	.word	0x20000028
 8001b1c:	20000288 	.word	0x20000288
 8001b20:	e000ed14 	.word	0xe000ed14
 8001b24:	08002228 	.word	0x08002228
 8001b28:	08002228 	.word	0x08002228
 8001b2c:	08002228 	.word	0x08002228
 8001b30:	08002228 	.word	0x08002228
 8001b34:	08002228 	.word	0x08002228
 8001b38:	08002228 	.word	0x08002228

08001b3c <nvic_enable_irq>:
 * @param[in] irqn Unsigned int8. Interrupt number @ref nvic_stm32f1_userint
 */

void nvic_enable_irq(uint8_t irqn)
{
	NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <nvic_enable_irq+0x18>)
 8001b3e:	0942      	lsrs	r2, r0, #5
 8001b40:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001b44:	f000 001f 	and.w	r0, r0, #31
 8001b48:	2201      	movs	r2, #1
 8001b4a:	fa02 f000 	lsl.w	r0, r2, r0
 8001b4e:	6018      	str	r0, [r3, #0]
}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000e100 	.word	0xe000e100

08001b58 <nvic_set_priority>:
void nvic_set_priority(uint8_t irqn, uint8_t priority)
{
	/* code from lpc43xx/nvic.c -- this is quite a hack and alludes to the
	 * negative interrupt numbers assigned to the system interrupts. better
	 * handling would mean signed integers. */
	if (irqn >= NVIC_IRQ_COUNT) {
 8001b58:	285a      	cmp	r0, #90	; 0x5a
		/* Cortex-M  system interrupts */
		SCS_SHPR((irqn & 0xF) - 4) = priority;
	} else {
		/* Device specific interrupts */
		NVIC_IPR(irqn) = priority;
 8001b5a:	bf93      	iteet	ls
 8001b5c:	f100 4060 	addls.w	r0, r0, #3758096384	; 0xe0000000
		SCS_SHPR((irqn & 0xF) - 4) = priority;
 8001b60:	f000 000f 	andhi.w	r0, r0, #15
 8001b64:	4b03      	ldrhi	r3, [pc, #12]	; (8001b74 <nvic_set_priority+0x1c>)
		NVIC_IPR(irqn) = priority;
 8001b66:	f500 4064 	addls.w	r0, r0, #58368	; 0xe400
		SCS_SHPR((irqn & 0xF) - 4) = priority;
 8001b6a:	bf8c      	ite	hi
 8001b6c:	54c1      	strbhi	r1, [r0, r3]
		NVIC_IPR(irqn) = priority;
 8001b6e:	7001      	strbls	r1, [r0, #0]
	}
}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000ed14 	.word	0xe000ed14

08001b78 <dwt_enable_cycle_counter>:
	return false;			/* Not supported on ARMv6M */
#endif /* defined(__ARM_ARCH_6M__) */

#if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
	/* Note TRCENA is for 7M and above*/
	SCS_DEMCR |= SCS_DEMCR_TRCENA;
 8001b78:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <dwt_enable_cycle_counter+0x28>)
 8001b7a:	6813      	ldr	r3, [r2, #0]
 8001b7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b80:	6013      	str	r3, [r2, #0]
	if (DWT_CTRL & DWT_CTRL_NOCYCCNT) {
 8001b82:	4a08      	ldr	r2, [pc, #32]	; (8001ba4 <dwt_enable_cycle_counter+0x2c>)
 8001b84:	6813      	ldr	r3, [r2, #0]
 8001b86:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
		return false;		/* Not supported in implementation */
	}

	DWT_CYCCNT = 0;
 8001b8a:	bf01      	itttt	eq
 8001b8c:	4906      	ldreq	r1, [pc, #24]	; (8001ba8 <dwt_enable_cycle_counter+0x30>)
 8001b8e:	600b      	streq	r3, [r1, #0]
	DWT_CTRL |= DWT_CTRL_CYCCNTENA;
 8001b90:	6813      	ldreq	r3, [r2, #0]
 8001b92:	f043 0301 	orreq.w	r3, r3, #1
	return true;
 8001b96:	bf06      	itte	eq
 8001b98:	2001      	moveq	r0, #1
	DWT_CTRL |= DWT_CTRL_CYCCNTENA;
 8001b9a:	6013      	streq	r3, [r2, #0]
		return false;		/* Not supported in implementation */
 8001b9c:	2000      	movne	r0, #0
#endif /* defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__) */

	/* not supported on other architectures */
	return false;
}
 8001b9e:	4770      	bx	lr
 8001ba0:	e000edfc 	.word	0xe000edfc
 8001ba4:	e0001000 	.word	0xe0001000
 8001ba8:	e0001004 	.word	0xe0001004

08001bac <dwt_read_cycle_counter>:
#if defined(__ARM_ARCH_6M__)
	return 0;		/* Not supported on ARMv6M */
#endif /* defined(__ARM_ARCH_6M__) */

#if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
	if (DWT_CTRL & DWT_CTRL_CYCCNTENA) {
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <dwt_read_cycle_counter+0x10>)
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	f010 0001 	ands.w	r0, r0, #1
		return DWT_CYCCNT;
 8001bb4:	bf18      	it	ne
 8001bb6:	6858      	ldrne	r0, [r3, #4]
	} else {
		return 0;		/* not supported or enabled */
	}
#endif /* defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__) */
}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e0001000 	.word	0xe0001000

08001bc0 <pwr_set_vos_scale>:

#include <libopencm3/stm32/pwr.h>

void pwr_set_vos_scale(enum pwr_vos_scale scale)
{
	if (scale == PWR_SCALE1) {
 8001bc0:	b928      	cbnz	r0, 8001bce <pwr_set_vos_scale+0xe>
		PWR_CR |= PWR_CR_VOS;
 8001bc2:	4a06      	ldr	r2, [pc, #24]	; (8001bdc <pwr_set_vos_scale+0x1c>)
 8001bc4:	6813      	ldr	r3, [r2, #0]
 8001bc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else if (scale == PWR_SCALE2) {
		PWR_CR &= PWR_CR_VOS;
 8001bca:	6013      	str	r3, [r2, #0]
	}
}
 8001bcc:	4770      	bx	lr
	} else if (scale == PWR_SCALE2) {
 8001bce:	2801      	cmp	r0, #1
 8001bd0:	d1fc      	bne.n	8001bcc <pwr_set_vos_scale+0xc>
		PWR_CR &= PWR_CR_VOS;
 8001bd2:	4a02      	ldr	r2, [pc, #8]	; (8001bdc <pwr_set_vos_scale+0x1c>)
 8001bd4:	6813      	ldr	r3, [r2, #0]
 8001bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bda:	e7f6      	b.n	8001bca <pwr_set_vos_scale+0xa>
 8001bdc:	40007000 	.word	0x40007000

08001be0 <dwc_set_address>:
#define dev_base_address (usbd_dev->driver->base_address)
#define REBASE(x)        MMIO32((x) + (dev_base_address))

void dwc_set_address(usbd_device *usbd_dev, uint8_t addr)
{
	REBASE(OTG_DCFG) = (REBASE(OTG_DCFG) & ~OTG_DCFG_DAD) | (addr << 4);
 8001be0:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8001be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001be6:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 8001bea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001bee:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 8001bf2:	f8c2 1800 	str.w	r1, [r2, #2048]	; 0x800
}
 8001bf6:	4770      	bx	lr

08001bf8 <dwc_ep_setup>:

void dwc_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
			uint16_t max_size,
			void (*callback) (usbd_device *usbd_dev, uint8_t ep))
{
 8001bf8:	f8d0 c0dc 	ldr.w	ip, [r0, #220]	; 0xdc
 8001bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	 * endpoint. Install callback function.
	 */
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;

	if (addr == 0) { /* For the default control endpoint */
 8001c00:	f011 067f 	ands.w	r6, r1, #127	; 0x7f
{
 8001c04:	9f08      	ldr	r7, [sp, #32]
 8001c06:	f8dc 502c 	ldr.w	r5, [ip, #44]	; 0x2c
 8001c0a:	f003 047f 	and.w	r4, r3, #127	; 0x7f
	if (addr == 0) { /* For the default control endpoint */
 8001c0e:	d13e      	bne.n	8001c8e <dwc_ep_setup+0x96>
		/* Configure IN part. */
		if (max_size >= 64) {
 8001c10:	2b3f      	cmp	r3, #63	; 0x3f
 8001c12:	d931      	bls.n	8001c78 <dwc_ep_setup+0x80>
			REBASE(OTG_DIEPCTL0) = OTG_DIEPCTL0_MPSIZ_64;
 8001c14:	f8c5 6900 	str.w	r6, [r5, #2304]	; 0x900
			REBASE(OTG_DIEPCTL0) = OTG_DIEPCTL0_MPSIZ_16;
		} else {
			REBASE(OTG_DIEPCTL0) = OTG_DIEPCTL0_MPSIZ_8;
		}

		REBASE(OTG_DIEPTSIZ0) =
 8001c18:	f8dc 202c 	ldr.w	r2, [ip, #44]	; 0x2c
 8001c1c:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
			(max_size & OTG_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DIEPCTL0) |=
 8001c20:	f8dc 102c 	ldr.w	r1, [ip, #44]	; 0x2c
 8001c24:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8001c28:	f042 4208 	orr.w	r2, r2, #2281701376	; 0x88000000
 8001c2c:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900

		/* Configure OUT part. */
		usbd_dev->doeptsiz[0] = OTG_DIEPSIZ0_STUPCNT_1 |
			OTG_DIEPSIZ0_PKTCNT |
			(max_size & OTG_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DOEPTSIZ(0)) = usbd_dev->doeptsiz[0];
 8001c30:	f8dc 202c 	ldr.w	r2, [ip, #44]	; 0x2c
			OTG_DIEPSIZ0_PKTCNT |
 8001c34:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8001c38:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
		usbd_dev->doeptsiz[0] = OTG_DIEPSIZ0_STUPCNT_1 |
 8001c3c:	f8c0 40e8 	str.w	r4, [r0, #232]	; 0xe8
		REBASE(OTG_DOEPTSIZ(0)) = usbd_dev->doeptsiz[0];
 8001c40:	f8c2 4b10 	str.w	r4, [r2, #2832]	; 0xb10
		REBASE(OTG_DOEPCTL(0)) |=
 8001c44:	f8dc 102c 	ldr.w	r1, [ip, #44]	; 0x2c
 8001c48:	f8d1 2b00 	ldr.w	r2, [r1, #2816]	; 0xb00
 8001c4c:	f042 4208 	orr.w	r2, r2, #2281701376	; 0x88000000
 8001c50:	f8c1 2b00 	str.w	r2, [r1, #2816]	; 0xb00
		    OTG_DOEPCTL0_EPENA | OTG_DIEPCTL0_SNAK;

		REBASE(OTG_GNPTXFSIZ) = ((max_size / 4) << 16) |
 8001c54:	0899      	lsrs	r1, r3, #2
					 usbd_dev->driver->rx_fifo_size;
 8001c56:	f8bc 3032 	ldrh.w	r3, [ip, #50]	; 0x32
		REBASE(OTG_GNPTXFSIZ) = ((max_size / 4) << 16) |
 8001c5a:	f8dc 202c 	ldr.w	r2, [ip, #44]	; 0x2c
 8001c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001c62:	6293      	str	r3, [r2, #40]	; 0x28
		usbd_dev->fifo_mem_top += max_size / 4;
 8001c64:	f8b0 30e0 	ldrh.w	r3, [r0, #224]	; 0xe0
 8001c68:	4419      	add	r1, r3
 8001c6a:	b289      	uxth	r1, r1
 8001c6c:	f8a0 10e0 	strh.w	r1, [r0, #224]	; 0xe0
		usbd_dev->fifo_mem_top_ep0 = usbd_dev->fifo_mem_top;
 8001c70:	f8a0 10e2 	strh.w	r1, [r0, #226]	; 0xe2
		if (callback) {
			usbd_dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
			    (void *)callback;
		}
	}
}
 8001c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (max_size >= 32) {
 8001c78:	2b1f      	cmp	r3, #31
 8001c7a:	d903      	bls.n	8001c84 <dwc_ep_setup+0x8c>
			REBASE(OTG_DIEPCTL0) = OTG_DIEPCTL0_MPSIZ_32;
 8001c7c:	2201      	movs	r2, #1
			REBASE(OTG_DIEPCTL0) = OTG_DIEPCTL0_MPSIZ_8;
 8001c7e:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
 8001c82:	e7c9      	b.n	8001c18 <dwc_ep_setup+0x20>
		} else if (max_size >= 16) {
 8001c84:	2b0f      	cmp	r3, #15
			REBASE(OTG_DIEPCTL0) = OTG_DIEPCTL0_MPSIZ_16;
 8001c86:	bf8c      	ite	hi
 8001c88:	2202      	movhi	r2, #2
			REBASE(OTG_DIEPCTL0) = OTG_DIEPCTL0_MPSIZ_8;
 8001c8a:	2203      	movls	r2, #3
 8001c8c:	e7f7      	b.n	8001c7e <dwc_ep_setup+0x86>
	if (dir) {
 8001c8e:	0609      	lsls	r1, r1, #24
 8001c90:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8001c94:	ea4f 4282 	mov.w	r2, r2, lsl #18
 8001c98:	d529      	bpl.n	8001cee <dwc_ep_setup+0xf6>
					     usbd_dev->fifo_mem_top;
 8001c9a:	f8b0 90e0 	ldrh.w	r9, [r0, #224]	; 0xe0
		REBASE(OTG_DIEPTXF(addr)) = ((max_size / 4) << 16) |
 8001c9e:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8001ca2:	f106 0140 	add.w	r1, r6, #64	; 0x40
 8001ca6:	ea49 4a0e 	orr.w	sl, r9, lr, lsl #16
 8001caa:	f845 a021 	str.w	sl, [r5, r1, lsl #2]
		REBASE(OTG_DIEPTSIZ(addr)) =
 8001cae:	f8dc 502c 	ldr.w	r5, [ip, #44]	; 0x2c
 8001cb2:	f505 6511 	add.w	r5, r5, #2320	; 0x910
		usbd_dev->fifo_mem_top += max_size / 4;
 8001cb6:	44ce      	add	lr, r9
 8001cb8:	f8a0 e0e0 	strh.w	lr, [r0, #224]	; 0xe0
		REBASE(OTG_DIEPTSIZ(addr)) =
 8001cbc:	f845 4008 	str.w	r4, [r5, r8]
		    | OTG_DIEPCTL0_USBAEP | OTG_DIEPCTLX_SD0PID
 8001cc0:	f042 4118 	orr.w	r1, r2, #2550136832	; 0x98000000
		REBASE(OTG_DIEPCTL(addr)) |=
 8001cc4:	f508 6810 	add.w	r8, r8, #2304	; 0x900
 8001cc8:	f8dc 402c 	ldr.w	r4, [ip, #44]	; 0x2c
		    | OTG_DIEPCTL0_USBAEP | OTG_DIEPCTLX_SD0PID
 8001ccc:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
		REBASE(OTG_DIEPCTL(addr)) |=
 8001cd0:	f858 5004 	ldr.w	r5, [r8, r4]
		    | (addr << 22) | max_size;
 8001cd4:	4319      	orrs	r1, r3
 8001cd6:	ea41 5186 	orr.w	r1, r1, r6, lsl #22
		REBASE(OTG_DIEPCTL(addr)) |=
 8001cda:	4329      	orrs	r1, r5
 8001cdc:	f848 1004 	str.w	r1, [r8, r4]
		if (callback) {
 8001ce0:	2f00      	cmp	r7, #0
 8001ce2:	d0c7      	beq.n	8001c74 <dwc_ep_setup+0x7c>
			usbd_dev->user_callback_ctr[addr][USB_TRANSACTION_IN] =
 8001ce4:	230c      	movs	r3, #12
 8001ce6:	fb03 0006 	mla	r0, r3, r6, r0
 8001cea:	6687      	str	r7, [r0, #104]	; 0x68
 8001cec:	e7c2      	b.n	8001c74 <dwc_ep_setup+0x7c>
		usbd_dev->doeptsiz[addr] = OTG_DIEPSIZ0_PKTCNT |
 8001cee:	f106 013a 	add.w	r1, r6, #58	; 0x3a
		REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
 8001cf2:	f505 6531 	add.w	r5, r5, #2832	; 0xb10
		usbd_dev->doeptsiz[addr] = OTG_DIEPSIZ0_PKTCNT |
 8001cf6:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001cfa:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
		REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
 8001cfe:	f845 4008 	str.w	r4, [r5, r8]
		REBASE(OTG_DOEPCTL(addr)) |= OTG_DOEPCTL0_EPENA |
 8001d02:	f508 6130 	add.w	r1, r8, #2816	; 0xb00
 8001d06:	f8dc 402c 	ldr.w	r4, [ip, #44]	; 0x2c
		    OTG_DOEPCTLX_SD0PID | (type << 18) | max_size;
 8001d0a:	f042 4214 	orr.w	r2, r2, #2483027968	; 0x94000000
		REBASE(OTG_DOEPCTL(addr)) |= OTG_DOEPCTL0_EPENA |
 8001d0e:	590d      	ldr	r5, [r1, r4]
		    OTG_DOEPCTLX_SD0PID | (type << 18) | max_size;
 8001d10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d14:	431a      	orrs	r2, r3
		REBASE(OTG_DOEPCTL(addr)) |= OTG_DOEPCTL0_EPENA |
 8001d16:	432a      	orrs	r2, r5
 8001d18:	510a      	str	r2, [r1, r4]
		if (callback) {
 8001d1a:	2f00      	cmp	r7, #0
 8001d1c:	d0aa      	beq.n	8001c74 <dwc_ep_setup+0x7c>
			usbd_dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
 8001d1e:	230c      	movs	r3, #12
 8001d20:	fb03 0006 	mla	r0, r3, r6, r0
 8001d24:	66c7      	str	r7, [r0, #108]	; 0x6c
 8001d26:	e7a5      	b.n	8001c74 <dwc_ep_setup+0x7c>

08001d28 <dwc_endpoints_reset>:

void dwc_endpoints_reset(usbd_device *usbd_dev)
{
	int i;
	/* The core resets the endpoints automatically on reset. */
	usbd_dev->fifo_mem_top = usbd_dev->fifo_mem_top_ep0;
 8001d28:	f8b0 30e2 	ldrh.w	r3, [r0, #226]	; 0xe2

	/* Disable any currently active endpoints */
	for (i = 1; i < 4; i++) {
		if (REBASE(OTG_DOEPCTL(i)) & OTG_DOEPCTL0_EPENA) {
 8001d2c:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
{
 8001d30:	b510      	push	{r4, lr}
	usbd_dev->fifo_mem_top = usbd_dev->fifo_mem_top_ep0;
 8001d32:	f8a0 30e0 	strh.w	r3, [r0, #224]	; 0xe0
		if (REBASE(OTG_DOEPCTL(i)) & OTG_DOEPCTL0_EPENA) {
 8001d36:	f44f 6332 	mov.w	r3, #2848	; 0xb20
 8001d3a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d3c:	5858      	ldr	r0, [r3, r1]
 8001d3e:	2800      	cmp	r0, #0
			REBASE(OTG_DOEPCTL(i)) |= OTG_DOEPCTL0_EPDIS;
 8001d40:	bfbe      	ittt	lt
 8001d42:	5858      	ldrlt	r0, [r3, r1]
 8001d44:	f040 4080 	orrlt.w	r0, r0, #1073741824	; 0x40000000
 8001d48:	5058      	strlt	r0, [r3, r1]
		}
		if (REBASE(OTG_DIEPCTL(i)) & OTG_DIEPCTL0_EPENA) {
 8001d4a:	f5a3 7000 	sub.w	r0, r3, #512	; 0x200
 8001d4e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d50:	5844      	ldr	r4, [r0, r1]
 8001d52:	2c00      	cmp	r4, #0
			REBASE(OTG_DIEPCTL(i)) |= OTG_DIEPCTL0_EPDIS;
 8001d54:	bfb8      	it	lt
 8001d56:	5844      	ldrlt	r4, [r0, r1]
 8001d58:	f103 0320 	add.w	r3, r3, #32
 8001d5c:	bfbc      	itt	lt
 8001d5e:	f044 4480 	orrlt.w	r4, r4, #1073741824	; 0x40000000
 8001d62:	5044      	strlt	r4, [r0, r1]
	for (i = 1; i < 4; i++) {
 8001d64:	f5b3 6f38 	cmp.w	r3, #2944	; 0xb80
 8001d68:	d1e7      	bne.n	8001d3a <dwc_endpoints_reset+0x12>
		}
	}

	/* Flush all tx/rx fifos */
	REBASE(OTG_GRSTCTL) = OTG_GRSTCTL_TXFFLSH | OTG_GRSTCTL_TXFNUM_ALL
 8001d6a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d6c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8001d70:	611a      	str	r2, [r3, #16]
			      | OTG_GRSTCTL_RXFFLSH;
}
 8001d72:	bd10      	pop	{r4, pc}

08001d74 <dwc_ep_stall_set>:

void dwc_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
 8001d74:	b510      	push	{r4, lr}
 8001d76:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
	if (addr == 0) {
 8001d7a:	b939      	cbnz	r1, 8001d8c <dwc_ep_stall_set+0x18>
 8001d7c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		if (stall) {
			REBASE(OTG_DIEPCTL(addr)) |= OTG_DIEPCTL0_STALL;
 8001d7e:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
		if (stall) {
 8001d82:	b18a      	cbz	r2, 8001da8 <dwc_ep_stall_set+0x34>
			REBASE(OTG_DIEPCTL(addr)) |= OTG_DIEPCTL0_STALL;
 8001d84:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
		} else {
			REBASE(OTG_DIEPCTL(addr)) &= ~OTG_DIEPCTL0_STALL;
 8001d88:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
		}
	}

	if (addr & 0x80) {
 8001d8c:	060c      	lsls	r4, r1, #24
 8001d8e:	bf46      	itte	mi
 8001d90:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8001d94:	3148      	addmi	r1, #72	; 0x48
 8001d96:	3158      	addpl	r1, #88	; 0x58
 8001d98:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001d9a:	0149      	lsls	r1, r1, #5
		} else {
			REBASE(OTG_DIEPCTL(addr)) &= ~OTG_DIEPCTL0_STALL;
			REBASE(OTG_DIEPCTL(addr)) |= OTG_DIEPCTLX_SD0PID;
		}
	} else {
		if (stall) {
 8001d9c:	b13a      	cbz	r2, 8001dae <dwc_ep_stall_set+0x3a>
			REBASE(OTG_DOEPCTL(addr)) |= OTG_DOEPCTL0_STALL;
 8001d9e:	58ca      	ldr	r2, [r1, r3]
 8001da0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001da4:	50ca      	str	r2, [r1, r3]
		} else {
			REBASE(OTG_DOEPCTL(addr)) &= ~OTG_DOEPCTL0_STALL;
			REBASE(OTG_DOEPCTL(addr)) |= OTG_DOEPCTLX_SD0PID;
		}
	}
}
 8001da6:	bd10      	pop	{r4, pc}
			REBASE(OTG_DIEPCTL(addr)) &= ~OTG_DIEPCTL0_STALL;
 8001da8:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
 8001dac:	e7ec      	b.n	8001d88 <dwc_ep_stall_set+0x14>
			REBASE(OTG_DOEPCTL(addr)) &= ~OTG_DOEPCTL0_STALL;
 8001dae:	58ca      	ldr	r2, [r1, r3]
 8001db0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001db4:	50ca      	str	r2, [r1, r3]
			REBASE(OTG_DOEPCTL(addr)) |= OTG_DOEPCTLX_SD0PID;
 8001db6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001db8:	588b      	ldr	r3, [r1, r2]
 8001dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	508b      	str	r3, [r1, r2]
}
 8001dc0:	e7f1      	b.n	8001da6 <dwc_ep_stall_set+0x32>

08001dc2 <dwc_ep_stall_get>:

uint8_t dwc_ep_stall_get(usbd_device *usbd_dev, uint8_t addr)
{
	/* Return non-zero if STALL set. */
	if (addr & 0x80) {
 8001dc2:	060a      	lsls	r2, r1, #24
 8001dc4:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
		return (REBASE(OTG_DIEPCTL(addr & 0x7f)) &
 8001dc8:	bf46      	itte	mi
 8001dca:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8001dce:	3148      	addmi	r1, #72	; 0x48
				OTG_DIEPCTL0_STALL) ? 1 : 0;
	} else {
		return (REBASE(OTG_DOEPCTL(addr)) &
 8001dd0:	3158      	addpl	r1, #88	; 0x58
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	0149      	lsls	r1, r1, #5
 8001dd6:	58c8      	ldr	r0, [r1, r3]
				OTG_DOEPCTL0_STALL) ? 1 : 0;
 8001dd8:	f3c0 5040 	ubfx	r0, r0, #21, #1
	}
}
 8001ddc:	4770      	bx	lr

08001dde <dwc_ep_nak_set>:

void dwc_ep_nak_set(usbd_device *usbd_dev, uint8_t addr, uint8_t nak)
{
	/* It does not make sense to force NAK on IN endpoints. */
	if (addr & 0x80) {
 8001dde:	060b      	lsls	r3, r1, #24
 8001de0:	d40c      	bmi.n	8001dfc <dwc_ep_nak_set+0x1e>
		return;
	}

	usbd_dev->force_nak[addr] = nak;
 8001de2:	1843      	adds	r3, r0, r1
 8001de4:	3158      	adds	r1, #88	; 0x58
 8001de6:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8001dea:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8001dee:	0149      	lsls	r1, r1, #5
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	if (nak) {
 8001df2:	b122      	cbz	r2, 8001dfe <dwc_ep_nak_set+0x20>
		REBASE(OTG_DOEPCTL(addr)) |= OTG_DOEPCTL0_SNAK;
 8001df4:	58ca      	ldr	r2, [r1, r3]
 8001df6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
	} else {
		REBASE(OTG_DOEPCTL(addr)) |= OTG_DOEPCTL0_CNAK;
 8001dfa:	50ca      	str	r2, [r1, r3]
	}
}
 8001dfc:	4770      	bx	lr
		REBASE(OTG_DOEPCTL(addr)) |= OTG_DOEPCTL0_CNAK;
 8001dfe:	58ca      	ldr	r2, [r1, r3]
 8001e00:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001e04:	e7f9      	b.n	8001dfa <dwc_ep_nak_set+0x1c>

08001e06 <dwc_ep_write_packet>:

uint16_t dwc_ep_write_packet(usbd_device *usbd_dev, uint8_t addr,
			      const void *buf, uint16_t len)
{
 8001e06:	b570      	push	{r4, r5, r6, lr}
	int i;

	addr &= 0x7F;

	/* Return if endpoint is already enabled. */
	if (REBASE(OTG_DIEPTSIZ(addr)) & OTG_DIEPSIZ0_PKTCNT) {
 8001e08:	f8d0 50dc 	ldr.w	r5, [r0, #220]	; 0xdc
 8001e0c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	addr &= 0x7F;
 8001e0e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	if (REBASE(OTG_DIEPTSIZ(addr)) & OTG_DIEPSIZ0_PKTCNT) {
 8001e12:	014c      	lsls	r4, r1, #5
 8001e14:	f500 6011 	add.w	r0, r0, #2320	; 0x910
 8001e18:	5906      	ldr	r6, [r0, r4]
 8001e1a:	0336      	lsls	r6, r6, #12
 8001e1c:	d416      	bmi.n	8001e4c <dwc_ep_write_packet+0x46>
		return 0;
	}

	/* Enable endpoint for transmission. */
	REBASE(OTG_DIEPTSIZ(addr)) = OTG_DIEPSIZ0_PKTCNT | len;
 8001e1e:	f443 2600 	orr.w	r6, r3, #524288	; 0x80000
 8001e22:	5106      	str	r6, [r0, r4]
	REBASE(OTG_DIEPCTL(addr)) |= OTG_DIEPCTL0_EPENA |
 8001e24:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 8001e28:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 8001e2a:	59a0      	ldr	r0, [r4, r6]

	/* Copy buffer to endpoint FIFO, note - memcpy does not work.
	 * ARMv7M supports non-word-aligned accesses, ARMv6M does not. */
#if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
	for (i = len; i > 0; i -= 4) {
		REBASE(OTG_FIFO(addr)) = *buf32++;
 8001e2c:	3101      	adds	r1, #1
	REBASE(OTG_DIEPCTL(addr)) |= OTG_DIEPCTL0_EPENA |
 8001e2e:	f040 4004 	orr.w	r0, r0, #2214592512	; 0x84000000
 8001e32:	51a0      	str	r0, [r4, r6]
		REBASE(OTG_FIFO(addr)) = *buf32++;
 8001e34:	0309      	lsls	r1, r1, #12
	for (i = len; i > 0; i -= 4) {
 8001e36:	18d4      	adds	r4, r2, r3
 8001e38:	1aa0      	subs	r0, r4, r2
 8001e3a:	2800      	cmp	r0, #0
 8001e3c:	dc01      	bgt.n	8001e42 <dwc_ep_write_packet+0x3c>
		}
	}
#endif /* defined(__ARM_ARCH_6M__) */

	return len;
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	bd70      	pop	{r4, r5, r6, pc}
		REBASE(OTG_FIFO(addr)) = *buf32++;
 8001e42:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001e44:	f852 6b04 	ldr.w	r6, [r2], #4
 8001e48:	500e      	str	r6, [r1, r0]
 8001e4a:	e7f5      	b.n	8001e38 <dwc_ep_write_packet+0x32>
		return 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	e7f6      	b.n	8001e3e <dwc_ep_write_packet+0x38>

08001e50 <dwc_ep_read_packet>:

uint16_t dwc_ep_read_packet(usbd_device *usbd_dev, uint8_t addr,
				  void *buf, uint16_t len)
{
 8001e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001e52:	4601      	mov	r1, r0
 8001e54:	4610      	mov	r0, r2

	/* We do not need to know the endpoint address since there is only one
	 * receive FIFO for all endpoints.
	 */
	(void) addr;
	len = MIN(len, usbd_dev->rxbcnt);
 8001e56:	f8b1 40f8 	ldrh.w	r4, [r1, #248]	; 0xf8
 8001e5a:	429c      	cmp	r4, r3
 8001e5c:	bf28      	it	cs
 8001e5e:	461c      	movcs	r4, r3

	/* ARMv7M supports non-word-aligned accesses, ARMv6M does not. */
#if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
	for (i = len; i >= 4; i -= 4) {
 8001e60:	1915      	adds	r5, r2, r4
	uint32_t *buf32 = buf;
 8001e62:	4613      	mov	r3, r2
	for (i = len; i >= 4; i -= 4) {
 8001e64:	1aea      	subs	r2, r5, r3
 8001e66:	2a03      	cmp	r2, #3
 8001e68:	dc1c      	bgt.n	8001ea4 <dwc_ep_read_packet+0x54>
 8001e6a:	08a3      	lsrs	r3, r4, #2
 8001e6c:	f06f 0203 	mvn.w	r2, #3
 8001e70:	fb02 4203 	mla	r2, r2, r3, r4
 8001e74:	eb00 0083 	add.w	r0, r0, r3, lsl #2
		/* buf32 needs to be updated as it is used for extra */
		buf32 = (uint32_t *)buf8;
	}
#endif /* defined(__ARM_ARCH_6M__) */

	if (i) {
 8001e78:	b18a      	cbz	r2, 8001e9e <dwc_ep_read_packet+0x4e>
		extra = REBASE(OTG_FIFO(0));
 8001e7a:	f8d1 30dc 	ldr.w	r3, [r1, #220]	; 0xdc
 8001e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	9301      	str	r3, [sp, #4]
		/* we read 4 bytes from the fifo, so update rxbcnt */
		if (usbd_dev->rxbcnt < 4) {
 8001e88:	f8b1 30f8 	ldrh.w	r3, [r1, #248]	; 0xf8
 8001e8c:	2b03      	cmp	r3, #3
			/* Be careful not to underflow (rxbcnt is unsigned) */
			usbd_dev->rxbcnt = 0;
 8001e8e:	bf94      	ite	ls
 8001e90:	2300      	movls	r3, #0
		} else {
			usbd_dev->rxbcnt -= 4;
 8001e92:	3b04      	subhi	r3, #4
 8001e94:	f8a1 30f8 	strh.w	r3, [r1, #248]	; 0xf8
		}
		memcpy(buf32, &extra, i);
 8001e98:	a901      	add	r1, sp, #4
 8001e9a:	f000 f8ff 	bl	800209c <memcpy>
	}

	return len;
}
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	b003      	add	sp, #12
 8001ea2:	bd30      	pop	{r4, r5, pc}
		*buf32++ = REBASE(OTG_FIFO(0));
 8001ea4:	f8d1 20dc 	ldr.w	r2, [r1, #220]	; 0xdc
 8001ea8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001eaa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	f843 2b04 	str.w	r2, [r3], #4
		usbd_dev->rxbcnt -= 4;
 8001eb4:	f8b1 20f8 	ldrh.w	r2, [r1, #248]	; 0xf8
 8001eb8:	3a04      	subs	r2, #4
 8001eba:	f8a1 20f8 	strh.w	r2, [r1, #248]	; 0xf8
 8001ebe:	e7d1      	b.n	8001e64 <dwc_ep_read_packet+0x14>

08001ec0 <dwc_poll>:
		/* idle */
	}
}

void dwc_poll(usbd_device *usbd_dev)
{
 8001ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/* Read interrupt status register. */
	uint32_t intsts = REBASE(OTG_GINTSTS);
 8001ec4:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8001ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eca:	6955      	ldr	r5, [r2, #20]
	int i;

	if (intsts & OTG_GINTSTS_ENUMDNE) {
 8001ecc:	f415 5600 	ands.w	r6, r5, #8192	; 0x2000
{
 8001ed0:	4604      	mov	r4, r0
	if (intsts & OTG_GINTSTS_ENUMDNE) {
 8001ed2:	d009      	beq.n	8001ee8 <dwc_poll+0x28>
		/* Handle USB RESET condition. */
		REBASE(OTG_GINTSTS) = OTG_GINTSTS_ENUMDNE;
		usbd_dev->fifo_mem_top = usbd_dev->driver->rx_fifo_size;
 8001ed4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
		REBASE(OTG_GINTSTS) = OTG_GINTSTS_ENUMDNE;
 8001ed6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eda:	6151      	str	r1, [r2, #20]
		usbd_dev->fifo_mem_top = usbd_dev->driver->rx_fifo_size;
 8001edc:	f8a0 30e0 	strh.w	r3, [r0, #224]	; 0xe0
	if (usbd_dev->user_callback_sof) {
		REBASE(OTG_GINTMSK) |= OTG_GINTMSK_SOFM;
	} else {
		REBASE(OTG_GINTMSK) &= ~OTG_GINTMSK_SOFM;
	}
}
 8001ee0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		_usbd_reset(usbd_dev);
 8001ee4:	f7ff b932 	b.w	800114c <_usbd_reset>
						       [USB_TRANSACTION_IN]) {
 8001ee8:	f04f 080c 	mov.w	r8, #12
			REBASE(OTG_DIEPINT(i)) = OTG_DIEPINTX_XFRC;
 8001eec:	f04f 0901 	mov.w	r9, #1
		if (REBASE(OTG_DIEPINT(i)) & OTG_DIEPINTX_XFRC) {
 8001ef0:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8001ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef6:	0177      	lsls	r7, r6, #5
 8001ef8:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8001efc:	59db      	ldr	r3, [r3, r7]
 8001efe:	07da      	lsls	r2, r3, #31
 8001f00:	d50d      	bpl.n	8001f1e <dwc_poll+0x5e>
						       [USB_TRANSACTION_IN]) {
 8001f02:	fb08 4306 	mla	r3, r8, r6, r4
 8001f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
			if (usbd_dev->user_callback_ctr[i]
 8001f08:	b113      	cbz	r3, 8001f10 <dwc_poll+0x50>
				usbd_dev->user_callback_ctr[i]
 8001f0a:	b2f1      	uxtb	r1, r6
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	4798      	blx	r3
			REBASE(OTG_DIEPINT(i)) = OTG_DIEPINTX_XFRC;
 8001f10:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8001f1a:	f843 9007 	str.w	r9, [r3, r7]
	for (i = 0; i < 4; i++) { /* Iterate over endpoints. */
 8001f1e:	3601      	adds	r6, #1
 8001f20:	2e04      	cmp	r6, #4
 8001f22:	d1e5      	bne.n	8001ef0 <dwc_poll+0x30>
	if (intsts & OTG_GINTSTS_RXFLVL) {
 8001f24:	06eb      	lsls	r3, r5, #27
 8001f26:	d548      	bpl.n	8001fba <dwc_poll+0xfa>
		uint32_t rxstsp = REBASE(OTG_GRXSTSP);
 8001f28:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
 8001f2c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001f2e:	6a1a      	ldr	r2, [r3, #32]
		uint32_t pktsts = rxstsp & OTG_GRXSTSP_PKTSTS_MASK;
 8001f30:	f402 16f0 	and.w	r6, r2, #1966080	; 0x1e0000
		if (pktsts == OTG_GRXSTSP_PKTSTS_OUT_COMP
 8001f34:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
		uint8_t ep = rxstsp & OTG_GRXSTSP_EPNUM_MASK;
 8001f38:	f002 010f 	and.w	r1, r2, #15
		if (pktsts == OTG_GRXSTSP_PKTSTS_OUT_COMP
 8001f3c:	d002      	beq.n	8001f44 <dwc_poll+0x84>
			|| pktsts == OTG_GRXSTSP_PKTSTS_SETUP_COMP)  {
 8001f3e:	f5b6 2f00 	cmp.w	r6, #524288	; 0x80000
 8001f42:	d118      	bne.n	8001f76 <dwc_poll+0xb6>
			REBASE(OTG_DOEPTSIZ(ep)) = usbd_dev->doeptsiz[ep];
 8001f44:	f101 053a 	add.w	r5, r1, #58	; 0x3a
 8001f48:	014a      	lsls	r2, r1, #5
 8001f4a:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 8001f4e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8001f52:	509d      	str	r5, [r3, r2]
				(usbd_dev->force_nak[ep] ?
 8001f54:	4421      	add	r1, r4
			REBASE(OTG_DOEPCTL(ep)) |= OTG_DOEPCTL0_EPENA |
 8001f56:	f502 6330 	add.w	r3, r2, #2816	; 0xb00
 8001f5a:	f891 10e4 	ldrb.w	r1, [r1, #228]	; 0xe4
 8001f5e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001f60:	2900      	cmp	r1, #0
 8001f62:	581a      	ldr	r2, [r3, r0]
 8001f64:	bf0c      	ite	eq
 8001f66:	f04f 4104 	moveq.w	r1, #2214592512	; 0x84000000
 8001f6a:	f04f 4108 	movne.w	r1, #2281701376	; 0x88000000
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	501a      	str	r2, [r3, r0]
}
 8001f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ((pktsts != OTG_GRXSTSP_PKTSTS_OUT) &&
 8001f76:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 8001f7a:	d073      	beq.n	8002064 <dwc_poll+0x1a4>
 8001f7c:	f5b6 2f40 	cmp.w	r6, #786432	; 0xc0000
 8001f80:	d1f7      	bne.n	8001f72 <dwc_poll+0xb2>
			&& (REBASE(OTG_DIEPTSIZ(ep)) & OTG_DIEPSIZ0_PKTCNT)) {
 8001f82:	014e      	lsls	r6, r1, #5
 8001f84:	f503 6711 	add.w	r7, r3, #2320	; 0x910
 8001f88:	59bf      	ldr	r7, [r7, r6]
 8001f8a:	033f      	lsls	r7, r7, #12
 8001f8c:	d440      	bmi.n	8002010 <dwc_poll+0x150>
			type = USB_TRANSACTION_SETUP;
 8001f8e:	2002      	movs	r0, #2
		if (usbd_dev->user_callback_ctr[ep][type]) {
 8001f90:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8001f94:	4403      	add	r3, r0
 8001f96:	331a      	adds	r3, #26
		usbd_dev->rxbcnt = (rxstsp & OTG_GRXSTSP_BCNT_MASK) >> 4;
 8001f98:	f3c2 120a 	ubfx	r2, r2, #4, #11
		if (usbd_dev->user_callback_ctr[ep][type]) {
 8001f9c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
		usbd_dev->rxbcnt = (rxstsp & OTG_GRXSTSP_BCNT_MASK) >> 4;
 8001fa0:	f8a4 20f8 	strh.w	r2, [r4, #248]	; 0xf8
		if (usbd_dev->user_callback_ctr[ep][type]) {
 8001fa4:	b10b      	cbz	r3, 8001faa <dwc_poll+0xea>
			usbd_dev->user_callback_ctr[ep][type] (usbd_dev, ep);
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	4798      	blx	r3
		for (i = 0; i < usbd_dev->rxbcnt; i += 4) {
 8001faa:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 8001fae:	2300      	movs	r3, #0
 8001fb0:	4299      	cmp	r1, r3
 8001fb2:	dc59      	bgt.n	8002068 <dwc_poll+0x1a8>
		usbd_dev->rxbcnt = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
	if (intsts & OTG_GINTSTS_USBSUSP) {
 8001fba:	052a      	lsls	r2, r5, #20
 8001fbc:	d508      	bpl.n	8001fd0 <dwc_poll+0x110>
		if (usbd_dev->user_callback_suspend) {
 8001fbe:	6a23      	ldr	r3, [r4, #32]
 8001fc0:	b103      	cbz	r3, 8001fc4 <dwc_poll+0x104>
			usbd_dev->user_callback_suspend();
 8001fc2:	4798      	blx	r3
		REBASE(OTG_GINTSTS) = OTG_GINTSTS_USBSUSP;
 8001fc4:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8001fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fce:	615a      	str	r2, [r3, #20]
	if (intsts & OTG_GINTSTS_WKUPINT) {
 8001fd0:	2d00      	cmp	r5, #0
 8001fd2:	da08      	bge.n	8001fe6 <dwc_poll+0x126>
		if (usbd_dev->user_callback_resume) {
 8001fd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fd6:	b103      	cbz	r3, 8001fda <dwc_poll+0x11a>
			usbd_dev->user_callback_resume();
 8001fd8:	4798      	blx	r3
		REBASE(OTG_GINTSTS) = OTG_GINTSTS_WKUPINT;
 8001fda:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001fe4:	615a      	str	r2, [r3, #20]
	if (intsts & OTG_GINTSTS_SOF) {
 8001fe6:	072b      	lsls	r3, r5, #28
 8001fe8:	d507      	bpl.n	8001ffa <dwc_poll+0x13a>
 8001fea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		if (usbd_dev->user_callback_sof) {
 8001fec:	b103      	cbz	r3, 8001ff0 <dwc_poll+0x130>
			usbd_dev->user_callback_sof();
 8001fee:	4798      	blx	r3
		REBASE(OTG_GINTSTS) = OTG_GINTSTS_SOF;
 8001ff0:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	2208      	movs	r2, #8
 8001ff8:	615a      	str	r2, [r3, #20]
 8001ffa:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	if (usbd_dev->user_callback_sof) {
 8001ffe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002002:	2a00      	cmp	r2, #0
 8002004:	d038      	beq.n	8002078 <dwc_poll+0x1b8>
		REBASE(OTG_GINTMSK) |= OTG_GINTMSK_SOFM;
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	f042 0208 	orr.w	r2, r2, #8
		REBASE(OTG_GINTMSK) &= ~OTG_GINTMSK_SOFM;
 800200c:	619a      	str	r2, [r3, #24]
 800200e:	e7b0      	b.n	8001f72 <dwc_poll+0xb2>
	REBASE(OTG_DIEPCTL(ep)) |= OTG_DIEPCTL0_SNAK;
 8002010:	f506 6c10 	add.w	ip, r6, #2304	; 0x900
 8002014:	f853 700c 	ldr.w	r7, [r3, ip]
 8002018:	f047 6700 	orr.w	r7, r7, #134217728	; 0x8000000
 800201c:	f843 700c 	str.w	r7, [r3, ip]
	while (!(REBASE(OTG_DIEPINT(ep)) & OTG_DIEPINTX_INEPNE)) {
 8002020:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8002022:	f607 1308 	addw	r3, r7, #2312	; 0x908
 8002026:	4433      	add	r3, r6
 8002028:	f8d3 e000 	ldr.w	lr, [r3]
 800202c:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8002030:	d0fa      	beq.n	8002028 <dwc_poll+0x168>
	fifo = (REBASE(OTG_DIEPCTL(ep)) & OTG_DIEPCTL0_TXFNUM_MASK) >> 22;
 8002032:	f85c 3007 	ldr.w	r3, [ip, r7]
 8002036:	0d9b      	lsrs	r3, r3, #22
	while (!(REBASE(OTG_GRSTCTL) & OTG_GRSTCTL_AHBIDL)) {
 8002038:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800203c:	f1be 0f00 	cmp.w	lr, #0
 8002040:	dafa      	bge.n	8002038 <dwc_poll+0x178>
	REBASE(OTG_GRSTCTL) = (fifo << 6) | OTG_GRSTCTL_TXFFLSH;
 8002042:	019b      	lsls	r3, r3, #6
 8002044:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
 8002048:	f043 0320 	orr.w	r3, r3, #32
 800204c:	613b      	str	r3, [r7, #16]
	REBASE(OTG_DIEPTSIZ(ep)) = 0;
 800204e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002050:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8002054:	2700      	movs	r7, #0
 8002056:	519f      	str	r7, [r3, r6]
	while ((REBASE(OTG_GRSTCTL) & OTG_GRSTCTL_TXFFLSH)) {
 8002058:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800205a:	3310      	adds	r3, #16
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	0680      	lsls	r0, r0, #26
 8002060:	d4fc      	bmi.n	800205c <dwc_poll+0x19c>
 8002062:	e794      	b.n	8001f8e <dwc_poll+0xce>
			type = USB_TRANSACTION_OUT;
 8002064:	2001      	movs	r0, #1
 8002066:	e793      	b.n	8001f90 <dwc_poll+0xd0>
			(void)REBASE(OTG_FIFO(0));
 8002068:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
 800206c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800206e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
		for (i = 0; i < usbd_dev->rxbcnt; i += 4) {
 8002072:	3304      	adds	r3, #4
			(void)REBASE(OTG_FIFO(0));
 8002074:	6812      	ldr	r2, [r2, #0]
 8002076:	e79b      	b.n	8001fb0 <dwc_poll+0xf0>
		REBASE(OTG_GINTMSK) &= ~OTG_GINTMSK_SOFM;
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	f022 0208 	bic.w	r2, r2, #8
 800207e:	e7c5      	b.n	800200c <dwc_poll+0x14c>

08002080 <dwc_disconnect>:

void dwc_disconnect(usbd_device *usbd_dev, bool disconnected)
{
 8002080:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8002084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	if (disconnected) {
		REBASE(OTG_DCTL) |= OTG_DCTL_SDIS;
 8002086:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
	if (disconnected) {
 800208a:	b121      	cbz	r1, 8002096 <dwc_disconnect+0x16>
		REBASE(OTG_DCTL) |= OTG_DCTL_SDIS;
 800208c:	f042 0202 	orr.w	r2, r2, #2
	} else {
		REBASE(OTG_DCTL) &= ~OTG_DCTL_SDIS;
 8002090:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
	}
}
 8002094:	4770      	bx	lr
		REBASE(OTG_DCTL) &= ~OTG_DCTL_SDIS;
 8002096:	f022 0202 	bic.w	r2, r2, #2
 800209a:	e7f9      	b.n	8002090 <dwc_disconnect+0x10>

0800209c <memcpy>:
 800209c:	b510      	push	{r4, lr}
 800209e:	1e43      	subs	r3, r0, #1
 80020a0:	440a      	add	r2, r1
 80020a2:	4291      	cmp	r1, r2
 80020a4:	d100      	bne.n	80020a8 <memcpy+0xc>
 80020a6:	bd10      	pop	{r4, pc}
 80020a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80020ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80020b0:	e7f7      	b.n	80020a2 <memcpy+0x6>

080020b2 <memset>:
 80020b2:	4402      	add	r2, r0
 80020b4:	4603      	mov	r3, r0
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d100      	bne.n	80020bc <memset+0xa>
 80020ba:	4770      	bx	lr
 80020bc:	f803 1b01 	strb.w	r1, [r3], #1
 80020c0:	e7f9      	b.n	80020b6 <memset+0x4>

080020c2 <strlen>:
 80020c2:	4603      	mov	r3, r0
 80020c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80020c8:	2a00      	cmp	r2, #0
 80020ca:	d1fb      	bne.n	80020c4 <strlen+0x2>
 80020cc:	1a18      	subs	r0, r3, r0
 80020ce:	3801      	subs	r0, #1
 80020d0:	4770      	bx	lr
	...

080020d4 <dev_descr>:
 80020d4:	0112 0200 0000 4000 0483 5710 0200 0201     .......@...W....
 80020e4:	0103 0000                                   ....

080020e8 <hid_report_descriptor>:
 80020e8:	0006 09ff a101 1501 2600 00ff 0875 2095     .........&..u.. 
 80020f8:	0009 0282 c001 0000                         ........

08002100 <hid_function>:
 8002100:	2109 0100 0100 1622 0000 0000               .!....".....

0800210c <hid_endpoint>:
 800210c:	0507 0381 0022 0001 0000 0000 0000 0000     ...."...........

0800211c <hid_iface>:
 800211c:	0409 0000 0301 0000 0c00 0021 0008 0021     ..........!...!.
 800212c:	0908 0000 0000 0000                         ........

08002134 <ifaces>:
 8002134:	0000 0000 0001 0000 0000 0000 211c 0800     .............!..

08002144 <config>:
 8002144:	0209 0000 0101 c000 3432 0021 0008 0000     ........24!.....
 8002154:	6c42 6361 206b 7053 6568 6572 5420 6365     Black Sphere Tec
 8002164:	6e68 6c6f 676f 6569 0073 0000 4948 2044     hnologies...HID 
 8002174:	6544 6f6d 0000 0000 4544 4f4d 0000 0000     Demo....DEMO....

08002184 <rcc_hse_8mhz_3v3>:
 8002184:	0008 0060 0202 0000 0603 0000 0500 0104     ..`.............
 8002194:	6c00 02dc 1b00 00b7 3600 016e 0008 0150     .l.......6n...P.
 80021a4:	0704 0000 0602 0000 0400 0000 bd00 0501     ................
 80021b4:	de80 0280 bd00 0501 0008 00f0 0502 0000     ................
 80021c4:	0603 0000 0500 0104 0e00 0727 c380 01c9     ..........'.....
 80021d4:	8700 0393 0008 0150 0702 0000 0605 0000     ......P.........
 80021e4:	0500 0004 7a00 0a03 de80 0280 bd00 0501     .....z..........

080021f4 <stm32f107_usb_driver>:
 80021f4:	19d1 0800 1be1 0800 1bf9 0800 1d29 0800     ............)...
 8002204:	1d75 0800 1ddf 0800 1dc3 0800 1e07 0800     u...............
 8002214:	1e51 0800 1ec1 0800 2081 0800 0000 5000     Q........ .....P
 8002224:	0001 0080                                   ....
