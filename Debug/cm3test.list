
cm3test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002254  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .preinit_array 00000000  08002254  08002254  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .init_array   00000000  08002254  08002254  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000000  08002254  08002254  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000028  20000000  08002254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000258  20000028  0800227c  00020028  2**2
                  ALLOC
  6 .ccm          00000000  10000000  10000000  00020028  2**0
                  CONTENTS
  7 .debug_info   0000ed8a  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002a3a  00000000  00000000  0002edb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008a0  00000000  00000000  000317ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007e0  00000000  00000000  0003208c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00005dc1  00000000  00000000  0003286c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00018697  00000000  00000000  0003862d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      000000ee  00000000  00000000  00050cc4  2**0
                  CONTENTS, READONLY
 14 .ARM.attributes 00000037  00000000  00000000  00050db2  2**0
                  CONTENTS, READONLY
 15 .debug_frame  000013cc  00000000  00000000  00050dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00003259  00000000  00000000  000521b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00005d0f  00000000  00000000  00055411  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 00 02 20 e5 1a 00 08 e3 1a 00 08 e1 1a 00 08     ... ............
 8000010:	e1 1a 00 08 e1 1a 00 08 e1 1a 00 08 00 00 00 00     ................
	...
 800002c:	e3 1a 00 08 e3 1a 00 08 00 00 00 00 e3 1a 00 08     ................
 800003c:	e3 1a 00 08 e1 1a 00 08 e1 1a 00 08 e1 1a 00 08     ................
 800004c:	e1 1a 00 08 e1 1a 00 08 e1 1a 00 08 e1 1a 00 08     ................
 800005c:	e1 1a 00 08 e1 1a 00 08 e1 1a 00 08 a5 02 00 08     ................
 800006c:	e1 1a 00 08 e1 1a 00 08 e1 1a 00 08 e1 1a 00 08     ................
 800007c:	e1 1a 00 08 e1 1a 00 08 e1 1a 00 08 e1 1a 00 08     ................
 800008c:	e1 1a 00 08 e1 1a 00 08 e1 1a 00 08 e1 1a 00 08     ................
 800009c:	e1 1a 00 08 e1 1a 00 08 e1 1a 00 08 e1 1a 00 08     ................
 80000ac:	e1 1a 00 08 e1 1a 00 08 e1 1a 00 08 e1 1a 00 08     ................
 80000bc:	e1 1a 00 08 e1 1a 00 08 e1 1a 00 08 e1 1a 00 08     ................
 80000cc:	e1 1a 00 08 e1 1a 00 08 e1 1a 00 08 e1 1a 00 08     ................
 80000dc:	e1 1a 00 08 e1 1a 00 08 e1 1a 00 08 e1 1a 00 08     ................
 80000ec:	e1 1a 00 08 e1 1a 00 08 e1 1a 00 08 e1 1a 00 08     ................
 80000fc:	e1 1a 00 08 e1 1a 00 08 e1 1a 00 08 e1 1a 00 08     ................
 800010c:	e1 1a 00 08 e1 1a 00 08 e1 1a 00 08 e1 1a 00 08     ................
 800011c:	e1 1a 00 08 e1 1a 00 08 e1 1a 00 08 e1 1a 00 08     ................
 800012c:	e1 1a 00 08 e1 1a 00 08 e1 1a 00 08 e1 1a 00 08     ................
 800013c:	e1 1a 00 08 e1 1a 00 08 e1 1a 00 08 e1 1a 00 08     ................
 800014c:	e1 1a 00 08 e1 1a 00 08 e1 1a 00 08 e1 1a 00 08     ................
 800015c:	e1 1a 00 08 e1 1a 00 08 e1 1a 00 08 e1 1a 00 08     ................
 800016c:	e1 1a 00 08 e1 1a 00 08 e1 1a 00 08 e1 1a 00 08     ................
 800017c:	e1 1a 00 08 e1 1a 00 08 e1 1a 00 08 e1 1a 00 08     ................
 800018c:	e1 1a 00 08 e1 1a 00 08 e1 1a 00 08 e1 1a 00 08     ................
 800019c:	e1 1a 00 08 e1 1a 00 08 e1 1a 00 08 e1 1a 00 08     ................

080001ac <cm_enable_interrupts>:
/** @brief Cortex M Enable interrupts
 *
 * Disable the interrupt mask and enable interrupts globally
 */
static inline void cm_enable_interrupts(void)
{
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0
	__asm__ volatile ("CPSIE I\n");
 80001b0:	b662      	cpsie	i
}
 80001b2:	bf00      	nop
 80001b4:	46bd      	mov	sp, r7
 80001b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ba:	4770      	bx	lr

080001bc <cm_disable_interrupts>:
/** @brief Cortex M Disable interrupts
 *
 * Mask all interrupts globally
 */
static inline void cm_disable_interrupts(void)
{
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0
	__asm__ volatile ("CPSID I\n");
 80001c0:	b672      	cpsid	i
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ca:	4770      	bx	lr

080001cc <push>:
struct{
	uint8_t buf[128];
	uint32_t wpoint, rpoint, len;
} simq;

uint8_t push(void* x) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	if(simq.len >= 8) return 0;
 80001d4:	4b12      	ldr	r3, [pc, #72]	; (8000220 <push+0x54>)
 80001d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001da:	2b07      	cmp	r3, #7
 80001dc:	d901      	bls.n	80001e2 <push+0x16>
 80001de:	2300      	movs	r3, #0
 80001e0:	e01a      	b.n	8000218 <push+0x4c>
	memcpy(simq.buf + simq.wpoint, x, 16);
 80001e2:	4b0f      	ldr	r3, [pc, #60]	; (8000220 <push+0x54>)
 80001e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80001e8:	4a0d      	ldr	r2, [pc, #52]	; (8000220 <push+0x54>)
 80001ea:	4413      	add	r3, r2
 80001ec:	2210      	movs	r2, #16
 80001ee:	6879      	ldr	r1, [r7, #4]
 80001f0:	4618      	mov	r0, r3
 80001f2:	f001 ff63 	bl	80020bc <memcpy>
	simq.wpoint = (simq.wpoint + 16) % 128;
 80001f6:	4b0a      	ldr	r3, [pc, #40]	; (8000220 <push+0x54>)
 80001f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80001fc:	3310      	adds	r3, #16
 80001fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000202:	4a07      	ldr	r2, [pc, #28]	; (8000220 <push+0x54>)
 8000204:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	simq.len ++;
 8000208:	4b05      	ldr	r3, [pc, #20]	; (8000220 <push+0x54>)
 800020a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800020e:	3301      	adds	r3, #1
 8000210:	4a03      	ldr	r2, [pc, #12]	; (8000220 <push+0x54>)
 8000212:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	return 1;
 8000216:	2301      	movs	r3, #1
}
 8000218:	4618      	mov	r0, r3
 800021a:	3708      	adds	r7, #8
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}
 8000220:	2000014c 	.word	0x2000014c

08000224 <pop>:
uint8_t pop(void* x) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	if(simq.len == 0) return 0;
 800022c:	4b12      	ldr	r3, [pc, #72]	; (8000278 <pop+0x54>)
 800022e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000232:	2b00      	cmp	r3, #0
 8000234:	d101      	bne.n	800023a <pop+0x16>
 8000236:	2300      	movs	r3, #0
 8000238:	e01a      	b.n	8000270 <pop+0x4c>
	memcpy(x, simq.buf + simq.rpoint, 16);
 800023a:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <pop+0x54>)
 800023c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000240:	4a0d      	ldr	r2, [pc, #52]	; (8000278 <pop+0x54>)
 8000242:	4413      	add	r3, r2
 8000244:	2210      	movs	r2, #16
 8000246:	4619      	mov	r1, r3
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f001 ff37 	bl	80020bc <memcpy>
	simq.rpoint = (simq.rpoint + 16) % 128;
 800024e:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <pop+0x54>)
 8000250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000254:	3310      	adds	r3, #16
 8000256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800025a:	4a07      	ldr	r2, [pc, #28]	; (8000278 <pop+0x54>)
 800025c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	simq.len --;
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <pop+0x54>)
 8000262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000266:	3b01      	subs	r3, #1
 8000268:	4a03      	ldr	r2, [pc, #12]	; (8000278 <pop+0x54>)
 800026a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	return 1;
 800026e:	2301      	movs	r3, #1
 8000270:	4618      	mov	r0, r3
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	2000014c 	.word	0x2000014c

0800027c <comms_init>:
usbd_device * usb;
struct params_t params;
volatile uint64_t cnt = 0;
//void apply_offsets(int16_t* buf);

void comms_init(usbd_device * usbd){
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	usb = usbd;
 8000284:	4a05      	ldr	r2, [pc, #20]	; (800029c <comms_init+0x20>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	6013      	str	r3, [r2, #0]
	memset(&params, 0, sizeof(struct params_t));
 800028a:	2204      	movs	r2, #4
 800028c:	2100      	movs	r1, #0
 800028e:	4804      	ldr	r0, [pc, #16]	; (80002a0 <comms_init+0x24>)
 8000290:	f001 ff1f 	bl	80020d2 <memset>
	//usbd_ep_write_packet(usb, 0x81, simq.buf, 32);
}
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	200001d8 	.word	0x200001d8
 80002a0:	20000148 	.word	0x20000148

080002a4 <exti4_isr>:

// From here we get notified of new data
// So we need to read it out
void exti4_isr(){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	exti_reset_request(EXTI4);
 80002a8:	2010      	movs	r0, #16
 80002aa:	f000 fe33 	bl	8000f14 <exti_reset_request>
	gpio_toggle(GPIOD, GPIO14);
 80002ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002b2:	4806      	ldr	r0, [pc, #24]	; (80002cc <exti4_isr+0x28>)
 80002b4:	f000 fda5 	bl	8000e02 <gpio_toggle>
	mpu_getsample();
 80002b8:	f000 fa32 	bl	8000720 <mpu_getsample>
	gpio_clear(GPIOD, GPIO13);
 80002bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c0:	4802      	ldr	r0, [pc, #8]	; (80002cc <exti4_isr+0x28>)
 80002c2:	f000 fd9b 	bl	8000dfc <gpio_clear>
}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40020c00 	.word	0x40020c00

080002d0 <comms_new_sample>:

// Data has been read out, push it into FIFO
void comms_new_sample(uint8_t* buf){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	//apply_offsets((int16_t*) buf);
	push(buf);
 80002d8:	6878      	ldr	r0, [r7, #4]
 80002da:	f7ff ff77 	bl	80001cc <push>
	cm_enable_interrupts();
 80002de:	f7ff ff65 	bl	80001ac <cm_enable_interrupts>
}
 80002e2:	bf00      	nop
 80002e4:	3708      	adds	r7, #8
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <tx_callback>:

// Data has been transmitted, transmit new data
void tx_callback(usbd_device *usbd_dev, uint8_t ep){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	460b      	mov	r3, r1
 80002f6:	70fb      	strb	r3, [r7, #3]
	static uint8_t localbuf[32];
	gpio_set(GPIOD, GPIO13);
 80002f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002fc:	4810      	ldr	r0, [pc, #64]	; (8000340 <tx_callback+0x54>)
 80002fe:	f000 fd7b 	bl	8000df8 <gpio_set>
	memset(localbuf, 0, 32);
 8000302:	2220      	movs	r2, #32
 8000304:	2100      	movs	r1, #0
 8000306:	480f      	ldr	r0, [pc, #60]	; (8000344 <tx_callback+0x58>)
 8000308:	f001 fee3 	bl	80020d2 <memset>
	cm_disable_interrupts();
 800030c:	f7ff ff56 	bl	80001bc <cm_disable_interrupts>
	pop(localbuf);
 8000310:	480c      	ldr	r0, [pc, #48]	; (8000344 <tx_callback+0x58>)
 8000312:	f7ff ff87 	bl	8000224 <pop>
	cm_enable_interrupts();
 8000316:	f7ff ff49 	bl	80001ac <cm_enable_interrupts>
	cm_disable_interrupts();
 800031a:	f7ff ff4f 	bl	80001bc <cm_disable_interrupts>
	pop(localbuf + 16);
 800031e:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <tx_callback+0x5c>)
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ff7f 	bl	8000224 <pop>
	cm_enable_interrupts();
 8000326:	f7ff ff41 	bl	80001ac <cm_enable_interrupts>
	usbd_ep_write_packet(usb, 0x81, localbuf, 32);
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <tx_callback+0x60>)
 800032c:	6818      	ldr	r0, [r3, #0]
 800032e:	2320      	movs	r3, #32
 8000330:	4a04      	ldr	r2, [pc, #16]	; (8000344 <tx_callback+0x58>)
 8000332:	2181      	movs	r1, #129	; 0x81
 8000334:	f000 ff43 	bl	80011be <usbd_ep_write_packet>
}
 8000338:	bf00      	nop
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	40020c00 	.word	0x40020c00
 8000344:	20000028 	.word	0x20000028
 8000348:	20000038 	.word	0x20000038
 800034c:	200001d8 	.word	0x200001d8

08000350 <hid_control_request_class>:

// Handle GET_REPORT and SET_REPORT
enum usbd_request_return_codes hid_control_request_class(usbd_device *dev, struct usb_setup_data *req, uint8_t **buf, uint16_t *len,
		void (**complete)(usbd_device *dev, struct usb_setup_data *req))
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
 800035c:	603b      	str	r3, [r7, #0]
	(void)complete;
	(void)dev;
	if((req->bRequest == USB_REQ_GET_REPORT) && USB_VAL_IS_FEATURE(req->wValue)) {
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	785b      	ldrb	r3, [r3, #1]
 8000362:	2b01      	cmp	r3, #1
 8000364:	d125      	bne.n	80003b2 <hid_control_request_class+0x62>
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	885b      	ldrh	r3, [r3, #2]
 800036a:	b29b      	uxth	r3, r3
 800036c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000370:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000374:	d11d      	bne.n	80003b2 <hid_control_request_class+0x62>
		uint32_t time = dwt_read_cycle_counter();
 8000376:	f001 fc29 	bl	8001bcc <dwt_read_cycle_counter>
 800037a:	6178      	str	r0, [r7, #20]
		// We want little endian here to be consistent with other data
		BUF_SET_TIME((uint8_t*) &params.timestamp, time, 0);
 800037c:	4a1c      	ldr	r2, [pc, #112]	; (80003f0 <hid_control_request_class+0xa0>)
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	0e1b      	lsrs	r3, r3, #24
 8000382:	b2db      	uxtb	r3, r3
 8000384:	7013      	strb	r3, [r2, #0]
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <hid_control_request_class+0xa4>)
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	0c1b      	lsrs	r3, r3, #16
 800038c:	b2db      	uxtb	r3, r3
 800038e:	7013      	strb	r3, [r2, #0]
 8000390:	4a19      	ldr	r2, [pc, #100]	; (80003f8 <hid_control_request_class+0xa8>)
 8000392:	697b      	ldr	r3, [r7, #20]
 8000394:	0a1b      	lsrs	r3, r3, #8
 8000396:	b2db      	uxtb	r3, r3
 8000398:	7013      	strb	r3, [r2, #0]
 800039a:	4b18      	ldr	r3, [pc, #96]	; (80003fc <hid_control_request_class+0xac>)
 800039c:	697a      	ldr	r2, [r7, #20]
 800039e:	b2d2      	uxtb	r2, r2
 80003a0:	701a      	strb	r2, [r3, #0]
		*buf = (uint8_t*) &params;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <hid_control_request_class+0xa0>)
 80003a6:	601a      	str	r2, [r3, #0]
		*len = sizeof(struct params_t);
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	2204      	movs	r2, #4
 80003ac:	801a      	strh	r2, [r3, #0]
		return USBD_REQ_HANDLED;
 80003ae:	2301      	movs	r3, #1
 80003b0:	e01a      	b.n	80003e8 <hid_control_request_class+0x98>
	}
	if((req->bRequest == USB_REQ_SET_REPORT) && USB_VAL_IS_FEATURE(req->wValue)) {
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	785b      	ldrb	r3, [r3, #1]
 80003b6:	2b09      	cmp	r3, #9
 80003b8:	d115      	bne.n	80003e6 <hid_control_request_class+0x96>
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	885b      	ldrh	r3, [r3, #2]
 80003be:	b29b      	uxth	r3, r3
 80003c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80003c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80003c8:	d10d      	bne.n	80003e6 <hid_control_request_class+0x96>
		memcpy(&params, *buf, sizeof(params));
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	461a      	mov	r2, r3
 80003d2:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <hid_control_request_class+0xa0>)
 80003d4:	601a      	str	r2, [r3, #0]
		*buf = (uint8_t*) &params;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a05      	ldr	r2, [pc, #20]	; (80003f0 <hid_control_request_class+0xa0>)
 80003da:	601a      	str	r2, [r3, #0]
		*len = 0;
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	2200      	movs	r2, #0
 80003e0:	801a      	strh	r2, [r3, #0]

		return USBD_REQ_HANDLED;
 80003e2:	2301      	movs	r3, #1
 80003e4:	e000      	b.n	80003e8 <hid_control_request_class+0x98>
	}
	return USBD_REQ_NOTSUPP;
 80003e6:	2300      	movs	r3, #0

}
 80003e8:	4618      	mov	r0, r3
 80003ea:	3718      	adds	r7, #24
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000148 	.word	0x20000148
 80003f4:	20000149 	.word	0x20000149
 80003f8:	2000014a 	.word	0x2000014a
 80003fc:	2000014b 	.word	0x2000014b

08000400 <led_setup>:
#include <init.h>

unsigned long SystemCoreClock = 16000000UL;

void led_setup(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	rcc_periph_clock_enable(RCC_GPIOD);
 8000404:	f240 6003 	movw	r0, #1539	; 0x603
 8000408:	f000 fdf6 	bl	8000ff8 <rcc_periph_clock_enable>
	gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO12 | GPIO13 | GPIO14 | GPIO15);
 800040c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000410:	2200      	movs	r2, #0
 8000412:	2101      	movs	r1, #1
 8000414:	4802      	ldr	r0, [pc, #8]	; (8000420 <led_setup+0x20>)
 8000416:	f000 fcfd 	bl	8000e14 <gpio_mode_setup>

}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40020c00 	.word	0x40020c00

08000424 <spi_setup>:
void spi_setup(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	rcc_periph_clock_enable(RCC_SPI1);
 8000428:	f640 008c 	movw	r0, #2188	; 0x88c
 800042c:	f000 fde4 	bl	8000ff8 <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_GPIOA);
 8000430:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8000434:	f000 fde0 	bl	8000ff8 <rcc_periph_clock_enable>

	gpio_mode_setup(GPIOA, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO4);
 8000438:	2310      	movs	r3, #16
 800043a:	2200      	movs	r2, #0
 800043c:	2101      	movs	r1, #1
 800043e:	481c      	ldr	r0, [pc, #112]	; (80004b0 <spi_setup+0x8c>)
 8000440:	f000 fce8 	bl	8000e14 <gpio_mode_setup>
	gpio_set(GPIOA, GPIO4);
 8000444:	2110      	movs	r1, #16
 8000446:	481a      	ldr	r0, [pc, #104]	; (80004b0 <spi_setup+0x8c>)
 8000448:	f000 fcd6 	bl	8000df8 <gpio_set>

	gpio_mode_setup(GPIOA, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO5 | GPIO6 | GPIO7);
 800044c:	23e0      	movs	r3, #224	; 0xe0
 800044e:	2200      	movs	r2, #0
 8000450:	2102      	movs	r1, #2
 8000452:	4817      	ldr	r0, [pc, #92]	; (80004b0 <spi_setup+0x8c>)
 8000454:	f000 fcde 	bl	8000e14 <gpio_mode_setup>
	gpio_set_af(GPIOA, GPIO_AF5, GPIO5 | GPIO6 | GPIO7);
 8000458:	22e0      	movs	r2, #224	; 0xe0
 800045a:	2105      	movs	r1, #5
 800045c:	4814      	ldr	r0, [pc, #80]	; (80004b0 <spi_setup+0x8c>)
 800045e:	f000 fcfb 	bl	8000e58 <gpio_set_af>

	spi_reset(SPI1);
 8000462:	4814      	ldr	r0, [pc, #80]	; (80004b4 <spi_setup+0x90>)
 8000464:	f000 fde6 	bl	8001034 <spi_reset>
	spi_set_master_mode(SPI1);
 8000468:	4812      	ldr	r0, [pc, #72]	; (80004b4 <spi_setup+0x90>)
 800046a:	f000 fe47 	bl	80010fc <spi_set_master_mode>
	spi_set_baudrate_prescaler(SPI1, SPI_CR1_BR_FPCLK_DIV_128);
 800046e:	2106      	movs	r1, #6
 8000470:	4810      	ldr	r0, [pc, #64]	; (80004b4 <spi_setup+0x90>)
 8000472:	f000 fe38 	bl	80010e6 <spi_set_baudrate_prescaler>
	spi_set_clock_polarity_1(SPI1);
 8000476:	480f      	ldr	r0, [pc, #60]	; (80004b4 <spi_setup+0x90>)
 8000478:	f000 fe45 	bl	8001106 <spi_set_clock_polarity_1>
	spi_set_clock_phase_1(SPI1);
 800047c:	480d      	ldr	r0, [pc, #52]	; (80004b4 <spi_setup+0x90>)
 800047e:	f000 fe47 	bl	8001110 <spi_set_clock_phase_1>
	spi_set_full_duplex_mode(SPI1);
 8000482:	480c      	ldr	r0, [pc, #48]	; (80004b4 <spi_setup+0x90>)
 8000484:	f000 fe17 	bl	80010b6 <spi_set_full_duplex_mode>
	spi_set_unidirectional_mode(SPI1);
 8000488:	480a      	ldr	r0, [pc, #40]	; (80004b4 <spi_setup+0x90>)
 800048a:	f000 fe0f 	bl	80010ac <spi_set_unidirectional_mode>
	spi_set_dff_8bit(SPI1);
 800048e:	4809      	ldr	r0, [pc, #36]	; (80004b4 <spi_setup+0x90>)
 8000490:	f000 fe43 	bl	800111a <spi_set_dff_8bit>
	spi_enable_software_slave_management(SPI1);
 8000494:	4807      	ldr	r0, [pc, #28]	; (80004b4 <spi_setup+0x90>)
 8000496:	f000 fe13 	bl	80010c0 <spi_enable_software_slave_management>
	spi_send_msb_first(SPI1);
 800049a:	4806      	ldr	r0, [pc, #24]	; (80004b4 <spi_setup+0x90>)
 800049c:	f000 fe1e 	bl	80010dc <spi_send_msb_first>
	spi_set_nss_high(SPI1);
 80004a0:	4804      	ldr	r0, [pc, #16]	; (80004b4 <spi_setup+0x90>)
 80004a2:	f000 fe16 	bl	80010d2 <spi_set_nss_high>
	spi_enable(SPI1);
 80004a6:	4803      	ldr	r0, [pc, #12]	; (80004b4 <spi_setup+0x90>)
 80004a8:	f000 fdf4 	bl	8001094 <spi_enable>
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40020000 	.word	0x40020000
 80004b4:	40013000 	.word	0x40013000

080004b8 <clk_setup>:
void clk_setup(void) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	//rcc_clock_setup_hse_3v3(&rcc_hse_8mhz_3v3[RCC_CLOCK_3V3_168MHZ]);
	rcc_clock_setup_hse_3v3(&rcc_hse_8mhz_3v3[RCC_CLOCK_3V3_120MHZ]);
 80004bc:	4804      	ldr	r0, [pc, #16]	; (80004d0 <clk_setup+0x18>)
 80004be:	f000 fc45 	bl	8000d4c <rcc_clock_setup_hse_3v3>
	SystemCoreClock = 120000000UL;
 80004c2:	4b04      	ldr	r3, [pc, #16]	; (80004d4 <clk_setup+0x1c>)
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <clk_setup+0x20>)
 80004c6:	601a      	str	r2, [r3, #0]
	dwt_enable_cycle_counter();
 80004c8:	f001 fb66 	bl	8001b98 <dwt_enable_cycle_counter>
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	080021e8 	.word	0x080021e8
 80004d4:	20000000 	.word	0x20000000
 80004d8:	07270e00 	.word	0x07270e00

080004dc <exti_setup>:
void exti_setup(void){
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	rcc_periph_clock_enable(RCC_SYSCFG);
 80004e0:	f640 008e 	movw	r0, #2190	; 0x88e
 80004e4:	f000 fd88 	bl	8000ff8 <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_GPIOC);
 80004e8:	f240 6002 	movw	r0, #1538	; 0x602
 80004ec:	f000 fd84 	bl	8000ff8 <rcc_periph_clock_enable>

    gpio_mode_setup(GPIOC, GPIO_MODE_INPUT, GPIO_PUPD_NONE, GPIO4);
 80004f0:	2310      	movs	r3, #16
 80004f2:	2200      	movs	r2, #0
 80004f4:	2100      	movs	r1, #0
 80004f6:	4809      	ldr	r0, [pc, #36]	; (800051c <exti_setup+0x40>)
 80004f8:	f000 fc8c 	bl	8000e14 <gpio_mode_setup>

	exti_enable_request(EXTI4);
 80004fc:	2010      	movs	r0, #16
 80004fe:	f000 fcff 	bl	8000f00 <exti_enable_request>
	exti_select_source(EXTI4, GPIOC);
 8000502:	4906      	ldr	r1, [pc, #24]	; (800051c <exti_setup+0x40>)
 8000504:	2010      	movs	r0, #16
 8000506:	f000 fd0b 	bl	8000f20 <exti_select_source>
	exti_set_trigger(EXTI4, EXTI_TRIGGER_RISING);
 800050a:	2100      	movs	r1, #0
 800050c:	2010      	movs	r0, #16
 800050e:	f000 fcd9 	bl	8000ec4 <exti_set_trigger>
    nvic_enable_irq(NVIC_EXTI4_IRQ);
 8000512:	200a      	movs	r0, #10
 8000514:	f001 fb32 	bl	8001b7c <nvic_enable_irq>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40020800 	.word	0x40020800

08000520 <main>:
#include <usb.h>

struct spiHandle_t spi_hnd = {.spi = SPI1, .cs_port = GPIOA, .cs_pin = GPIO4};

int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
    clk_setup();
 8000526:	f7ff ffc7 	bl	80004b8 <clk_setup>

	delayMS_DWT(1000);
 800052a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052e:	f000 fb29 	bl	8000b84 <delayMS_DWT>

	led_setup();
 8000532:	f7ff ff65 	bl	8000400 <led_setup>
	spi_setup();
 8000536:	f7ff ff75 	bl	8000424 <spi_setup>

	usbd_device * usb = usb_init();
 800053a:	f000 fac5 	bl	8000ac8 <usb_init>
 800053e:	6078      	str	r0, [r7, #4]
	comms_init(usb);
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f7ff fe9b 	bl	800027c <comms_init>
	mpu_start(&spi_hnd);
 8000546:	4803      	ldr	r0, [pc, #12]	; (8000554 <main+0x34>)
 8000548:	f000 f806 	bl	8000558 <mpu_start>

	while(1) {
		usbd_poll(usb);
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f000 fe11 	bl	8001174 <usbd_poll>
 8000552:	e7fb      	b.n	800054c <main+0x2c>
 8000554:	20000004 	.word	0x20000004

08000558 <mpu_start>:
void mpu_init(struct spiHandle_t* spi);
void mpu_reset_fifo(struct spiHandle_t* spi);
uint16_t mpu_count(struct spiHandle_t* spi);
void mpu_sendusb(uint8_t* data);

void mpu_start(struct spiHandle_t *spi) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	g_spi = spi;
 8000560:	4a10      	ldr	r2, [pc, #64]	; (80005a4 <mpu_start+0x4c>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	6013      	str	r3, [r2, #0]
    delayUS_DWT(1000);
 8000566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056a:	f000 faef 	bl	8000b4c <delayUS_DWT>
    spi_read_reg(spi, 0x75);
 800056e:	2175      	movs	r1, #117	; 0x75
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f000 f938 	bl	80007e6 <spi_read_reg>
    spi_delay();
 8000576:	f000 fa4d 	bl	8000a14 <spi_delay>
    spi_read_reg(spi, 0x75);
 800057a:	2175      	movs	r1, #117	; 0x75
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f000 f932 	bl	80007e6 <spi_read_reg>
    spi_delay();
 8000582:	f000 fa47 	bl	8000a14 <spi_delay>
    spi_read_reg(spi, 0x75);
 8000586:	2175      	movs	r1, #117	; 0x75
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f000 f92c 	bl	80007e6 <spi_read_reg>
    spi_delay();
 800058e:	f000 fa41 	bl	8000a14 <spi_delay>
    mpu_init(spi);
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f000 f838 	bl	8000608 <mpu_init>
	exti_setup();
 8000598:	f7ff ffa0 	bl	80004dc <exti_setup>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200001fc 	.word	0x200001fc

080005a8 <mpu_sendusb>:
void mpu_sendusb(uint8_t* data){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	comms_new_sample(&buf[0]);
 80005b0:	4813      	ldr	r0, [pc, #76]	; (8000600 <mpu_sendusb+0x58>)
 80005b2:	f7ff fe8d 	bl	80002d0 <comms_new_sample>
	(buf[0]&0x80) ? gpio_set(GPIOD, GPIO12) : gpio_clear(GPIOD, GPIO12);
 80005b6:	4b12      	ldr	r3, [pc, #72]	; (8000600 <mpu_sendusb+0x58>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	b25b      	sxtb	r3, r3
 80005bc:	2b00      	cmp	r3, #0
 80005be:	da05      	bge.n	80005cc <mpu_sendusb+0x24>
 80005c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c4:	480f      	ldr	r0, [pc, #60]	; (8000604 <mpu_sendusb+0x5c>)
 80005c6:	f000 fc17 	bl	8000df8 <gpio_set>
 80005ca:	e004      	b.n	80005d6 <mpu_sendusb+0x2e>
 80005cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <mpu_sendusb+0x5c>)
 80005d2:	f000 fc13 	bl	8000dfc <gpio_clear>
	(buf[2]&0x80) ? gpio_set(GPIOD, GPIO15) : gpio_clear(GPIOD, GPIO15);
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <mpu_sendusb+0x58>)
 80005d8:	789b      	ldrb	r3, [r3, #2]
 80005da:	b25b      	sxtb	r3, r3
 80005dc:	2b00      	cmp	r3, #0
 80005de:	da05      	bge.n	80005ec <mpu_sendusb+0x44>
 80005e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e4:	4807      	ldr	r0, [pc, #28]	; (8000604 <mpu_sendusb+0x5c>)
 80005e6:	f000 fc07 	bl	8000df8 <gpio_set>
}
 80005ea:	e004      	b.n	80005f6 <mpu_sendusb+0x4e>
	(buf[2]&0x80) ? gpio_set(GPIOD, GPIO15) : gpio_clear(GPIOD, GPIO15);
 80005ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <mpu_sendusb+0x5c>)
 80005f2:	f000 fc03 	bl	8000dfc <gpio_clear>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200001dc 	.word	0x200001dc
 8000604:	40020c00 	.word	0x40020c00

08000608 <mpu_init>:

void mpu_init(struct spiHandle_t* spi){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
    spi_write_reg_d(spi, 0x6B, 0x80); // Reset all
 8000610:	2280      	movs	r2, #128	; 0x80
 8000612:	216b      	movs	r1, #107	; 0x6b
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 f954 	bl	80008c2 <spi_write_reg_d>
    delayUS_DWT(5000);
 800061a:	f241 3088 	movw	r0, #5000	; 0x1388
 800061e:	f000 fa95 	bl	8000b4c <delayUS_DWT>
    spi_write_reg_d(spi, 0x6B, 1); // Power up
 8000622:	2201      	movs	r2, #1
 8000624:	216b      	movs	r1, #107	; 0x6b
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f000 f94b 	bl	80008c2 <spi_write_reg_d>
    spi_write_reg_d(spi, 0x6c, 0); // Enable all sensors, all axes
 800062c:	2200      	movs	r2, #0
 800062e:	216c      	movs	r1, #108	; 0x6c
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f000 f946 	bl	80008c2 <spi_write_reg_d>

    spi_write_reg_d(spi, 0x1b, 3 << 3); // Gyro scale
 8000636:	2218      	movs	r2, #24
 8000638:	211b      	movs	r1, #27
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f000 f941 	bl	80008c2 <spi_write_reg_d>
    spi_write_reg_d(spi, 0x1c, 1 << 3); // Accel scale
 8000640:	2208      	movs	r2, #8
 8000642:	211c      	movs	r1, #28
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f000 f93c 	bl	80008c2 <spi_write_reg_d>

    spi_write_reg_d(spi, 0x19, 0); //
 800064a:	2200      	movs	r2, #0
 800064c:	2119      	movs	r1, #25
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 f937 	bl	80008c2 <spi_write_reg_d>
    spi_write_reg_d(spi, 0x1a, 0x01); // DLPF
 8000654:	2201      	movs	r2, #1
 8000656:	211a      	movs	r1, #26
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f000 f932 	bl	80008c2 <spi_write_reg_d>
    spi_write_reg_d(spi, 0x1d, 0x01); // -||-
 800065e:	2201      	movs	r2, #1
 8000660:	211d      	movs	r1, #29
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f000 f92d 	bl	80008c2 <spi_write_reg_d>
    spi_write_reg_d(spi, 0x23, 0x78); // FIFO setup
 8000668:	2278      	movs	r2, #120	; 0x78
 800066a:	2123      	movs	r1, #35	; 0x23
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f000 f928 	bl	80008c2 <spi_write_reg_d>
    spi_write_reg_d(spi, 0x37, 0x20); // int setup
 8000672:	2220      	movs	r2, #32
 8000674:	2137      	movs	r1, #55	; 0x37
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f000 f923 	bl	80008c2 <spi_write_reg_d>
    spi_write_reg_d(spi, 0x38, 0x01); // Data interrupt
 800067c:	2201      	movs	r2, #1
 800067e:	2138      	movs	r1, #56	; 0x38
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f000 f91e 	bl	80008c2 <spi_write_reg_d>
    // +- 2 G
    // +- 250 dps
    mpu_reset_fifo(spi);
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f000 f804 	bl	8000694 <mpu_reset_fifo>
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <mpu_reset_fifo>:

void mpu_reset_fifo(struct spiHandle_t* spi) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
    spi_modeSlow(spi);
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f000 f9ab 	bl	80009f8 <spi_modeSlow>
    spi_delay(10);
 80006a2:	200a      	movs	r0, #10
 80006a4:	f000 f9b6 	bl	8000a14 <spi_delay>
    uint8_t user_ctrl = spi_read_reg_d(spi, 0x6a) & (~0x44);
 80006a8:	216a      	movs	r1, #106	; 0x6a
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f000 f8c9 	bl	8000842 <spi_read_reg_d>
 80006b0:	4603      	mov	r3, r0
 80006b2:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80006b6:	73fb      	strb	r3, [r7, #15]
    uint8_t fifo_en = spi_read_reg_d(spi, 0x23);
 80006b8:	2123      	movs	r1, #35	; 0x23
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f000 f8c1 	bl	8000842 <spi_read_reg_d>
 80006c0:	4603      	mov	r3, r0
 80006c2:	73bb      	strb	r3, [r7, #14]
    spi_write_reg_d(spi, 0x23, 0);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2123      	movs	r1, #35	; 0x23
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f000 f8fa 	bl	80008c2 <spi_write_reg_d>
    spi_write_reg_d(spi, 0x6a, user_ctrl);
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	461a      	mov	r2, r3
 80006d2:	216a      	movs	r1, #106	; 0x6a
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f000 f8f4 	bl	80008c2 <spi_write_reg_d>
    spi_write_reg_d(spi, 0x6a, user_ctrl | 0x04);
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	461a      	mov	r2, r3
 80006e4:	216a      	movs	r1, #106	; 0x6a
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f000 f8eb 	bl	80008c2 <spi_write_reg_d>
    spi_write_reg_d(spi, 0x6a, user_ctrl | 0x40);
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	461a      	mov	r2, r3
 80006f6:	216a      	movs	r1, #106	; 0x6a
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f000 f8e2 	bl	80008c2 <spi_write_reg_d>
    spi_write_reg_d(spi, 0x23, fifo_en);
 80006fe:	7bbb      	ldrb	r3, [r7, #14]
 8000700:	461a      	mov	r2, r3
 8000702:	2123      	movs	r1, #35	; 0x23
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f000 f8dc 	bl	80008c2 <spi_write_reg_d>
    spi_modeFast(spi);
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f000 f966 	bl	80009dc <spi_modeFast>
    delayUS_DWT(50);
 8000710:	2032      	movs	r0, #50	; 0x32
 8000712:	f000 fa1b 	bl	8000b4c <delayUS_DWT>

}
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <mpu_getsample>:

void mpu_getsample(){
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
	uint32_t time = dwt_read_cycle_counter();
 8000726:	f001 fa51 	bl	8001bcc <dwt_read_cycle_counter>
 800072a:	60b8      	str	r0, [r7, #8]
	spi_read_reg_d(g_spi, 0x3a); // Reset int status
 800072c:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <mpu_getsample+0xa0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	213a      	movs	r1, #58	; 0x3a
 8000732:	4618      	mov	r0, r3
 8000734:	f000 f885 	bl	8000842 <spi_read_reg_d>
	uint8_t n = mpu_count(g_spi)/12;
 8000738:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <mpu_getsample+0xa0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f000 f845 	bl	80007cc <mpu_count>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <mpu_getsample+0xa4>)
 8000748:	fba3 2302 	umull	r2, r3, r3, r2
 800074c:	08db      	lsrs	r3, r3, #3
 800074e:	b29b      	uxth	r3, r3
 8000750:	71fb      	strb	r3, [r7, #7]
	for(int i = 0 ; i < n; i++) {
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	e023      	b.n	80007a0 <mpu_getsample+0x80>
		spi_delay();
 8000758:	f000 f95c 	bl	8000a14 <spi_delay>
		spi_read_reg_burst(g_spi, 0x74, 12, buf);
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <mpu_getsample+0xa0>)
 800075e:	6818      	ldr	r0, [r3, #0]
 8000760:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <mpu_getsample+0xa8>)
 8000762:	220c      	movs	r2, #12
 8000764:	2174      	movs	r1, #116	; 0x74
 8000766:	f000 f8fc 	bl	8000962 <spi_read_reg_burst>
		BUF_SET_TIME(buf, time, 12);
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	0e1b      	lsrs	r3, r3, #24
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <mpu_getsample+0xa8>)
 8000772:	731a      	strb	r2, [r3, #12]
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	0c1b      	lsrs	r3, r3, #16
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <mpu_getsample+0xa8>)
 800077c:	735a      	strb	r2, [r3, #13]
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	0a1b      	lsrs	r3, r3, #8
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <mpu_getsample+0xa8>)
 8000786:	739a      	strb	r2, [r3, #14]
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <mpu_getsample+0xa8>)
 800078e:	73da      	strb	r2, [r3, #15]
		mpu_sendusb(buf);
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <mpu_getsample+0xa8>)
 8000792:	f7ff ff09 	bl	80005a8 <mpu_sendusb>
		spi_delay();
 8000796:	f000 f93d 	bl	8000a14 <spi_delay>
	for(int i = 0 ; i < n; i++) {
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	3301      	adds	r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	79fa      	ldrb	r2, [r7, #7]
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	dcd7      	bgt.n	8000758 <mpu_getsample+0x38>
	}
	if(n > 39){
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	2b27      	cmp	r3, #39	; 0x27
 80007ac:	d904      	bls.n	80007b8 <mpu_getsample+0x98>
		//gpio_set(GPIOD, GPIO13);
		//delayMS_DWT(1000);
		//gpio_clear(GPIOD, GPIO13);
		mpu_reset_fifo(g_spi);
 80007ae:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <mpu_getsample+0xa0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff6e 	bl	8000694 <mpu_reset_fifo>
	}
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200001fc 	.word	0x200001fc
 80007c4:	aaaaaaab 	.word	0xaaaaaaab
 80007c8:	200001dc 	.word	0x200001dc

080007cc <mpu_count>:

uint16_t mpu_count(struct spiHandle_t* spi) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
    return spi_read_reg16(spi, 0x72);
 80007d4:	2172      	movs	r1, #114	; 0x72
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f000 f887 	bl	80008ea <spi_read_reg16>
 80007dc:	4603      	mov	r3, r0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <spi_read_reg>:
#include "spi.h"

uint8_t spi_read_reg(struct spiHandle_t* spi, uint8_t reg) {
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b084      	sub	sp, #16
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	460b      	mov	r3, r1
 80007f0:	70fb      	strb	r3, [r7, #3]
	gpio_clear(spi->cs_port, spi->cs_pin);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	685a      	ldr	r2, [r3, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	891b      	ldrh	r3, [r3, #8]
 80007fa:	4619      	mov	r1, r3
 80007fc:	4610      	mov	r0, r2
 80007fe:	f000 fafd 	bl	8000dfc <gpio_clear>
	spi_xfer(spi->spi, reg | 0x80);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	78fb      	ldrb	r3, [r7, #3]
 8000808:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800080c:	b2db      	uxtb	r3, r3
 800080e:	b29b      	uxth	r3, r3
 8000810:	4619      	mov	r1, r3
 8000812:	4610      	mov	r0, r2
 8000814:	f000 fc43 	bl	800109e <spi_xfer>
	uint8_t ret = spi_xfer(spi->spi, 0x00);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f000 fc3d 	bl	800109e <spi_xfer>
 8000824:	4603      	mov	r3, r0
 8000826:	73fb      	strb	r3, [r7, #15]
	gpio_set(spi->cs_port, spi->cs_pin);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	685a      	ldr	r2, [r3, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	891b      	ldrh	r3, [r3, #8]
 8000830:	4619      	mov	r1, r3
 8000832:	4610      	mov	r0, r2
 8000834:	f000 fae0 	bl	8000df8 <gpio_set>
	return ret;
 8000838:	7bfb      	ldrb	r3, [r7, #15]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <spi_read_reg_d>:
uint8_t spi_read_reg_d(struct spiHandle_t* spi, uint8_t reg) {
 8000842:	b580      	push	{r7, lr}
 8000844:	b084      	sub	sp, #16
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
 800084a:	460b      	mov	r3, r1
 800084c:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = spi_read_reg(spi, reg);
 800084e:	78fb      	ldrb	r3, [r7, #3]
 8000850:	4619      	mov	r1, r3
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff ffc7 	bl	80007e6 <spi_read_reg>
 8000858:	4603      	mov	r3, r0
 800085a:	73fb      	strb	r3, [r7, #15]
	spi_delay();
 800085c:	f000 f8da 	bl	8000a14 <spi_delay>
	return ret;
 8000860:	7bfb      	ldrb	r3, [r7, #15]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <spi_write_reg>:
void spi_write_reg(struct spiHandle_t* spi, uint8_t reg, uint8_t data){
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
 8000872:	460b      	mov	r3, r1
 8000874:	70fb      	strb	r3, [r7, #3]
 8000876:	4613      	mov	r3, r2
 8000878:	70bb      	strb	r3, [r7, #2]
	gpio_clear(spi->cs_port, spi->cs_pin);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	685a      	ldr	r2, [r3, #4]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	891b      	ldrh	r3, [r3, #8]
 8000882:	4619      	mov	r1, r3
 8000884:	4610      	mov	r0, r2
 8000886:	f000 fab9 	bl	8000dfc <gpio_clear>
	spi_xfer(spi->spi, reg);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	78fa      	ldrb	r2, [r7, #3]
 8000890:	b292      	uxth	r2, r2
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f000 fc02 	bl	800109e <spi_xfer>
	spi_xfer(spi->spi, data);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	78ba      	ldrb	r2, [r7, #2]
 80008a0:	b292      	uxth	r2, r2
 80008a2:	4611      	mov	r1, r2
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 fbfa 	bl	800109e <spi_xfer>
	gpio_set(spi->cs_port, spi->cs_pin);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	685a      	ldr	r2, [r3, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	891b      	ldrh	r3, [r3, #8]
 80008b2:	4619      	mov	r1, r3
 80008b4:	4610      	mov	r0, r2
 80008b6:	f000 fa9f 	bl	8000df8 <gpio_set>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <spi_write_reg_d>:
void spi_write_reg_d(struct spiHandle_t* spi, uint8_t reg, uint8_t data){
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
 80008ca:	460b      	mov	r3, r1
 80008cc:	70fb      	strb	r3, [r7, #3]
 80008ce:	4613      	mov	r3, r2
 80008d0:	70bb      	strb	r3, [r7, #2]
	spi_write_reg(spi, reg, data);
 80008d2:	78ba      	ldrb	r2, [r7, #2]
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	4619      	mov	r1, r3
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f7ff ffc6 	bl	800086a <spi_write_reg>
    spi_delay();
 80008de:	f000 f899 	bl	8000a14 <spi_delay>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <spi_read_reg16>:
uint16_t spi_read_reg16(struct spiHandle_t* spi, uint8_t reg){
 80008ea:	b590      	push	{r4, r7, lr}
 80008ec:	b085      	sub	sp, #20
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	460b      	mov	r3, r1
 80008f4:	70fb      	strb	r3, [r7, #3]
	gpio_clear(spi->cs_port, spi->cs_pin);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	685a      	ldr	r2, [r3, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	891b      	ldrh	r3, [r3, #8]
 80008fe:	4619      	mov	r1, r3
 8000900:	4610      	mov	r0, r2
 8000902:	f000 fa7b 	bl	8000dfc <gpio_clear>
	spi_xfer(spi->spi, reg | 0x80);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	78fb      	ldrb	r3, [r7, #3]
 800090c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000910:	b2db      	uxtb	r3, r3
 8000912:	b29b      	uxth	r3, r3
 8000914:	4619      	mov	r1, r3
 8000916:	4610      	mov	r0, r2
 8000918:	f000 fbc1 	bl	800109e <spi_xfer>
	uint16_t ret = spi_xfer(spi->spi, 0x00);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f000 fbbb 	bl	800109e <spi_xfer>
 8000928:	4603      	mov	r3, r0
 800092a:	81fb      	strh	r3, [r7, #14]
	ret = (ret<<8) | spi_xfer(spi->spi, 0x00);
 800092c:	89fb      	ldrh	r3, [r7, #14]
 800092e:	021b      	lsls	r3, r3, #8
 8000930:	b21c      	sxth	r4, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f000 fbb0 	bl	800109e <spi_xfer>
 800093e:	4603      	mov	r3, r0
 8000940:	b21b      	sxth	r3, r3
 8000942:	4323      	orrs	r3, r4
 8000944:	b21b      	sxth	r3, r3
 8000946:	81fb      	strh	r3, [r7, #14]
	gpio_set(spi->cs_port, spi->cs_pin);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685a      	ldr	r2, [r3, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	891b      	ldrh	r3, [r3, #8]
 8000950:	4619      	mov	r1, r3
 8000952:	4610      	mov	r0, r2
 8000954:	f000 fa50 	bl	8000df8 <gpio_set>
	return ret;
 8000958:	89fb      	ldrh	r3, [r7, #14]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	bd90      	pop	{r4, r7, pc}

08000962 <spi_read_reg_burst>:
void spi_read_reg_burst(struct spiHandle_t* spi, uint8_t reg, int count, uint8_t* buf){
 8000962:	b590      	push	{r4, r7, lr}
 8000964:	b087      	sub	sp, #28
 8000966:	af00      	add	r7, sp, #0
 8000968:	60f8      	str	r0, [r7, #12]
 800096a:	607a      	str	r2, [r7, #4]
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	460b      	mov	r3, r1
 8000970:	72fb      	strb	r3, [r7, #11]
	gpio_clear(spi->cs_port, spi->cs_pin);
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	685a      	ldr	r2, [r3, #4]
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	891b      	ldrh	r3, [r3, #8]
 800097a:	4619      	mov	r1, r3
 800097c:	4610      	mov	r0, r2
 800097e:	f000 fa3d 	bl	8000dfc <gpio_clear>
	spi_xfer(spi->spi, reg | 0x80);
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	7afb      	ldrb	r3, [r7, #11]
 8000988:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800098c:	b2db      	uxtb	r3, r3
 800098e:	b29b      	uxth	r3, r3
 8000990:	4619      	mov	r1, r3
 8000992:	4610      	mov	r0, r2
 8000994:	f000 fb83 	bl	800109e <spi_xfer>
	for(int i = 0; i < count; i++) {
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	e00e      	b.n	80009bc <spi_read_reg_burst+0x5a>
		buf[i] = spi_xfer(spi->spi, 0x00);
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	18d4      	adds	r4, r2, r3
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 fb77 	bl	800109e <spi_xfer>
 80009b0:	4603      	mov	r3, r0
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	7023      	strb	r3, [r4, #0]
	for(int i = 0; i < count; i++) {
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	3301      	adds	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	697a      	ldr	r2, [r7, #20]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	dbec      	blt.n	800099e <spi_read_reg_burst+0x3c>
	}
	gpio_set(spi->cs_port, spi->cs_pin);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	685a      	ldr	r2, [r3, #4]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	891b      	ldrh	r3, [r3, #8]
 80009cc:	4619      	mov	r1, r3
 80009ce:	4610      	mov	r0, r2
 80009d0:	f000 fa12 	bl	8000df8 <gpio_set>
}
 80009d4:	bf00      	nop
 80009d6:	371c      	adds	r7, #28
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd90      	pop	{r4, r7, pc}

080009dc <spi_modeFast>:
void spi_modeFast(struct spiHandle_t* spi){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	spi_set_baudrate_prescaler(spi->spi, SPI_CR1_BR_FPCLK_DIV_8);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2102      	movs	r1, #2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 fb7b 	bl	80010e6 <spi_set_baudrate_prescaler>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <spi_modeSlow>:
void spi_modeSlow(struct spiHandle_t* spi){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	spi_set_baudrate_prescaler(spi->spi, SPI_CR1_BR_FPCLK_DIV_128);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2106      	movs	r1, #6
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fb6d 	bl	80010e6 <spi_set_baudrate_prescaler>
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <spi_delay>:
void spi_delay(){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	delayUS_DWT(2);
 8000a18:	2002      	movs	r0, #2
 8000a1a:	f000 f897 	bl	8000b4c <delayUS_DWT>
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <hid_control_request>:
/* Buffer used for control requests. */
uint8_t usbd_control_buffer[128];

static enum usbd_request_return_codes hid_control_request(usbd_device *dev, struct usb_setup_data *req, uint8_t **buf, uint16_t *len,
			void (**complete)(usbd_device *dev, struct usb_setup_data *req))
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
 8000a30:	603b      	str	r3, [r7, #0]
	(void)complete;
	(void)dev;

	if((req->bmRequestType != 0x81) ||
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b81      	cmp	r3, #129	; 0x81
 8000a38:	d109      	bne.n	8000a4e <hid_control_request+0x2a>
	   (req->bRequest != USB_REQ_GET_DESCRIPTOR) ||
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	785b      	ldrb	r3, [r3, #1]
	if((req->bmRequestType != 0x81) ||
 8000a3e:	2b06      	cmp	r3, #6
 8000a40:	d105      	bne.n	8000a4e <hid_control_request+0x2a>
	   (req->wValue != 0x2200))
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	885b      	ldrh	r3, [r3, #2]
 8000a46:	b29b      	uxth	r3, r3
	   (req->bRequest != USB_REQ_GET_DESCRIPTOR) ||
 8000a48:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 8000a4c:	d001      	beq.n	8000a52 <hid_control_request+0x2e>
		return USBD_REQ_NOTSUPP;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	e006      	b.n	8000a60 <hid_control_request+0x3c>

	/* Handle the HID report descriptor. */
	*buf = (uint8_t *)hid_report_descriptor;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <hid_control_request+0x48>)
 8000a56:	601a      	str	r2, [r3, #0]
	*len = sizeof(hid_report_descriptor);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	2224      	movs	r2, #36	; 0x24
 8000a5c:	801a      	strh	r2, [r3, #0]

	return USBD_REQ_HANDLED;
 8000a5e:	2301      	movs	r3, #1
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	08002108 	.word	0x08002108

08000a70 <hid_set_config>:

static void hid_set_config(usbd_device *dev, uint16_t wValue)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	807b      	strh	r3, [r7, #2]
	(void)wValue;

	usbd_ep_setup(dev, 0x81, USB_ENDPOINT_ATTR_INTERRUPT, 32, tx_callback);
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <hid_set_config+0x48>)
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	2320      	movs	r3, #32
 8000a82:	2203      	movs	r2, #3
 8000a84:	2181      	movs	r1, #129	; 0x81
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f000 fb78 	bl	800117c <usbd_ep_setup>

	usbd_register_control_callback(
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <hid_set_config+0x4c>)
 8000a8e:	227f      	movs	r2, #127	; 0x7f
 8000a90:	2121      	movs	r1, #33	; 0x21
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f000 ff0f 	bl	80018b6 <usbd_register_control_callback>
						dev,
						USB_REQ_TYPE_CLASS | USB_REQ_TYPE_INTERFACE,
						USB_REQ_TYPE_TYPE | USB_REQ_TYPE_RECIPIENT,
						hid_control_request_class);

	usbd_register_control_callback(
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <hid_set_config+0x50>)
 8000a9a:	227f      	movs	r2, #127	; 0x7f
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f000 ff09 	bl	80018b6 <usbd_register_control_callback>
				dev,
				USB_REQ_TYPE_STANDARD | USB_REQ_TYPE_INTERFACE,
				USB_REQ_TYPE_TYPE | USB_REQ_TYPE_RECIPIENT,
				hid_control_request);

	usbd_ep_write_packet(dev, 0x81, usbd_control_buffer, 32);
 8000aa4:	2320      	movs	r3, #32
 8000aa6:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <hid_set_config+0x54>)
 8000aa8:	2181      	movs	r1, #129	; 0x81
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f000 fb87 	bl	80011be <usbd_ep_write_packet>
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	080002ed 	.word	0x080002ed
 8000abc:	08000351 	.word	0x08000351
 8000ac0:	08000a25 	.word	0x08000a25
 8000ac4:	20000200 	.word	0x20000200

08000ac8 <usb_init>:


usbd_device * usb_init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af04      	add	r7, sp, #16
	rcc_periph_clock_enable(RCC_GPIOA);
 8000ace:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8000ad2:	f000 fa91 	bl	8000ff8 <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_OTGFS);
 8000ad6:	f240 6087 	movw	r0, #1671	; 0x687
 8000ada:	f000 fa8d 	bl	8000ff8 <rcc_periph_clock_enable>

	gpio_mode_setup(GPIOA, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO11 | GPIO12);
 8000ade:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	4811      	ldr	r0, [pc, #68]	; (8000b2c <usb_init+0x64>)
 8000ae8:	f000 f994 	bl	8000e14 <gpio_mode_setup>
	gpio_set_af(GPIOA, GPIO_AF10, GPIO11 | GPIO12);
 8000aec:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000af0:	210a      	movs	r1, #10
 8000af2:	480e      	ldr	r0, [pc, #56]	; (8000b2c <usb_init+0x64>)
 8000af4:	f000 f9b0 	bl	8000e58 <gpio_set_af>

	usbd_dev = usbd_init(&otgfs_usb_driver, &dev_descr, &config, usb_strings, 3, usbd_control_buffer, sizeof(usbd_control_buffer));
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	9302      	str	r3, [sp, #8]
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <usb_init+0x68>)
 8000afe:	9301      	str	r3, [sp, #4]
 8000b00:	2303      	movs	r3, #3
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <usb_init+0x6c>)
 8000b06:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <usb_init+0x70>)
 8000b08:	490c      	ldr	r1, [pc, #48]	; (8000b3c <usb_init+0x74>)
 8000b0a:	480d      	ldr	r0, [pc, #52]	; (8000b40 <usb_init+0x78>)
 8000b0c:	f000 fb0a 	bl	8001124 <usbd_init>
 8000b10:	4602      	mov	r2, r0
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <usb_init+0x7c>)
 8000b14:	601a      	str	r2, [r3, #0]
	usbd_register_set_config_callback(usbd_dev, hid_set_config);
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <usb_init+0x7c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	490b      	ldr	r1, [pc, #44]	; (8000b48 <usb_init+0x80>)
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 fd85 	bl	800162c <usbd_register_set_config_callback>
	/*systick_set_clocksource(STK_CSR_CLKSOURCE_AHB_DIV8);
	systick_set_reload(7499);
	systick_interrupt_enable();
	systick_counter_enable();*/

	return usbd_dev;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <usb_init+0x7c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40020000 	.word	0x40020000
 8000b30:	20000200 	.word	0x20000200
 8000b34:	20000010 	.word	0x20000010
 8000b38:	08002170 	.word	0x08002170
 8000b3c:	080020f4 	.word	0x080020f4
 8000b40:	08002220 	.word	0x08002220
 8000b44:	20000048 	.word	0x20000048
 8000b48:	08000a71 	.word	0x08000a71

08000b4c <delayUS_DWT>:
#include <util.h>

#pragma GCC push_options
#pragma GCC optimize ("O3")
void delayUS_DWT(uint32_t us) {
 8000b4c:	b500      	push	{lr}
	//cm_disable_interrupts();
	volatile uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <delayUS_DWT+0x30>)
 8000b50:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <delayUS_DWT+0x34>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	fba2 2303 	umull	r2, r3, r2, r3
void delayUS_DWT(uint32_t us) {
 8000b58:	b083      	sub	sp, #12
	volatile uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000b5a:	0c9b      	lsrs	r3, r3, #18
 8000b5c:	fb00 f003 	mul.w	r0, r0, r3
 8000b60:	9000      	str	r0, [sp, #0]
	volatile uint32_t start = dwt_read_cycle_counter();
 8000b62:	f001 f833 	bl	8001bcc <dwt_read_cycle_counter>
 8000b66:	9001      	str	r0, [sp, #4]
	do  {
	} while(dwt_read_cycle_counter() - start < cycles);
 8000b68:	f001 f830 	bl	8001bcc <dwt_read_cycle_counter>
 8000b6c:	9b01      	ldr	r3, [sp, #4]
 8000b6e:	9a00      	ldr	r2, [sp, #0]
 8000b70:	1ac0      	subs	r0, r0, r3
 8000b72:	4290      	cmp	r0, r2
 8000b74:	d3f8      	bcc.n	8000b68 <delayUS_DWT+0x1c>
	//cm_enable_interrupts();
}
 8000b76:	b003      	add	sp, #12
 8000b78:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	431bde83 	.word	0x431bde83

08000b84 <delayMS_DWT>:
void delayMS_DWT(uint32_t ms){
	while(ms--) delayUS_DWT(1000);
 8000b84:	b148      	cbz	r0, 8000b9a <delayMS_DWT+0x16>
void delayMS_DWT(uint32_t ms){
 8000b86:	b510      	push	{r4, lr}
 8000b88:	1e44      	subs	r4, r0, #1
	while(ms--) delayUS_DWT(1000);
 8000b8a:	3c01      	subs	r4, #1
 8000b8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b90:	f7ff ffdc 	bl	8000b4c <delayUS_DWT>
 8000b94:	1c63      	adds	r3, r4, #1
 8000b96:	d1f8      	bne.n	8000b8a <delayMS_DWT+0x6>
 8000b98:	bd10      	pop	{r4, pc}
 8000b9a:	4770      	bx	lr

08000b9c <rcc_is_osc_ready>:
	return ((RCC_CIR & RCC_CIR_CSSF) != 0);
}

bool rcc_is_osc_ready(enum rcc_osc osc)
{
	switch (osc) {
 8000b9c:	2806      	cmp	r0, #6
 8000b9e:	d822      	bhi.n	8000be6 <rcc_is_osc_ready+0x4a>
 8000ba0:	e8df f000 	tbb	[pc, r0]
 8000ba4:	091c1704 	.word	0x091c1704
 8000ba8:	130e      	.short	0x130e
 8000baa:	15          	.byte	0x15
 8000bab:	00          	.byte	0x00
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <rcc_is_osc_ready+0x50>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	f3c0 6040 	ubfx	r0, r0, #25, #1
 8000bb4:	4770      	bx	lr
	case RCC_HSE:
		return RCC_CR & RCC_CR_HSERDY;
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <rcc_is_osc_ready+0x50>)
 8000bb8:	6818      	ldr	r0, [r3, #0]
 8000bba:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8000bbe:	4770      	bx	lr
	case RCC_HSI:
		return RCC_CR & RCC_CR_HSIRDY;
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <rcc_is_osc_ready+0x50>)
	case RCC_LSE:
		return RCC_BDCR & RCC_BDCR_LSERDY;
 8000bc2:	6818      	ldr	r0, [r3, #0]
 8000bc4:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8000bc8:	4770      	bx	lr
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <rcc_is_osc_ready+0x54>)
 8000bcc:	e7f9      	b.n	8000bc2 <rcc_is_osc_ready+0x26>
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <rcc_is_osc_ready+0x58>)
 8000bd0:	e7f7      	b.n	8000bc2 <rcc_is_osc_ready+0x26>
	case RCC_PLLSAI:
		return RCC_CR & RCC_CR_PLLSAIRDY;
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <rcc_is_osc_ready+0x50>)
 8000bd4:	6818      	ldr	r0, [r3, #0]
 8000bd6:	f3c0 7040 	ubfx	r0, r0, #29, #1
 8000bda:	4770      	bx	lr
	case RCC_PLLI2S:
		return RCC_CR & RCC_CR_PLLI2SRDY;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <rcc_is_osc_ready+0x50>)
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 8000be4:	4770      	bx	lr
	}
	return false;
 8000be6:	2000      	movs	r0, #0
}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40023870 	.word	0x40023870
 8000bf4:	40023874 	.word	0x40023874

08000bf8 <rcc_wait_for_osc_ready>:

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
 8000bf8:	b508      	push	{r3, lr}
 8000bfa:	4602      	mov	r2, r0
	while (!rcc_is_osc_ready(osc));
 8000bfc:	4610      	mov	r0, r2
 8000bfe:	f7ff ffcd 	bl	8000b9c <rcc_is_osc_ready>
 8000c02:	2800      	cmp	r0, #0
 8000c04:	d0fa      	beq.n	8000bfc <rcc_wait_for_osc_ready+0x4>
}
 8000c06:	bd08      	pop	{r3, pc}

08000c08 <rcc_osc_on>:
	}
}

void rcc_osc_on(enum rcc_osc osc)
{
	switch (osc) {
 8000c08:	2806      	cmp	r0, #6
 8000c0a:	d80a      	bhi.n	8000c22 <rcc_osc_on+0x1a>
 8000c0c:	e8df f000 	tbb	[pc, r0]
 8000c10:	0a1d1804 	.word	0x0a1d1804
 8000c14:	140f      	.short	0x140f
 8000c16:	16          	.byte	0x16
 8000c17:	00          	.byte	0x00
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 8000c18:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <rcc_osc_on+0x4c>)
 8000c1a:	6813      	ldr	r3, [r2, #0]
 8000c1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
		break;
	case RCC_PLLSAI:
		RCC_CR |= RCC_CR_PLLSAION;
		break;
	case RCC_PLLI2S:
		RCC_CR |= RCC_CR_PLLI2SON;
 8000c20:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8000c22:	4770      	bx	lr
		RCC_CR |= RCC_CR_HSEON;
 8000c24:	4a0b      	ldr	r2, [pc, #44]	; (8000c54 <rcc_osc_on+0x4c>)
 8000c26:	6813      	ldr	r3, [r2, #0]
 8000c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c2c:	e7f8      	b.n	8000c20 <rcc_osc_on+0x18>
		RCC_CR |= RCC_CR_HSION;
 8000c2e:	4a09      	ldr	r2, [pc, #36]	; (8000c54 <rcc_osc_on+0x4c>)
		RCC_CSR |= RCC_CSR_LSION;
 8000c30:	6813      	ldr	r3, [r2, #0]
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	e7f3      	b.n	8000c20 <rcc_osc_on+0x18>
		RCC_BDCR |= RCC_BDCR_LSEON;
 8000c38:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <rcc_osc_on+0x50>)
 8000c3a:	e7f9      	b.n	8000c30 <rcc_osc_on+0x28>
		RCC_CSR |= RCC_CSR_LSION;
 8000c3c:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <rcc_osc_on+0x54>)
 8000c3e:	e7f7      	b.n	8000c30 <rcc_osc_on+0x28>
		RCC_CR |= RCC_CR_PLLSAION;
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <rcc_osc_on+0x4c>)
 8000c42:	6813      	ldr	r3, [r2, #0]
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c48:	e7ea      	b.n	8000c20 <rcc_osc_on+0x18>
		RCC_CR |= RCC_CR_PLLI2SON;
 8000c4a:	4a02      	ldr	r2, [pc, #8]	; (8000c54 <rcc_osc_on+0x4c>)
 8000c4c:	6813      	ldr	r3, [r2, #0]
 8000c4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c52:	e7e5      	b.n	8000c20 <rcc_osc_on+0x18>
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40023870 	.word	0x40023870
 8000c5c:	40023874 	.word	0x40023874

08000c60 <rcc_osc_off>:

void rcc_osc_off(enum rcc_osc osc)
{
	switch (osc) {
 8000c60:	2806      	cmp	r0, #6
 8000c62:	d80a      	bhi.n	8000c7a <rcc_osc_off+0x1a>
 8000c64:	e8df f000 	tbb	[pc, r0]
 8000c68:	0a1d1804 	.word	0x0a1d1804
 8000c6c:	140f      	.short	0x140f
 8000c6e:	16          	.byte	0x16
 8000c6f:	00          	.byte	0x00
	case RCC_PLL:
		RCC_CR &= ~RCC_CR_PLLON;
 8000c70:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <rcc_osc_off+0x4c>)
 8000c72:	6813      	ldr	r3, [r2, #0]
 8000c74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
		break;
	case RCC_PLLSAI:
		RCC_CR &= ~RCC_CR_PLLSAION;
		break;
	case RCC_PLLI2S:
		RCC_CR &= ~RCC_CR_PLLI2SON;
 8000c78:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8000c7a:	4770      	bx	lr
		RCC_CR &= ~RCC_CR_HSEON;
 8000c7c:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <rcc_osc_off+0x4c>)
 8000c7e:	6813      	ldr	r3, [r2, #0]
 8000c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c84:	e7f8      	b.n	8000c78 <rcc_osc_off+0x18>
		RCC_CR &= ~RCC_CR_HSION;
 8000c86:	4a09      	ldr	r2, [pc, #36]	; (8000cac <rcc_osc_off+0x4c>)
		RCC_CSR &= ~RCC_CSR_LSION;
 8000c88:	6813      	ldr	r3, [r2, #0]
 8000c8a:	f023 0301 	bic.w	r3, r3, #1
 8000c8e:	e7f3      	b.n	8000c78 <rcc_osc_off+0x18>
		RCC_BDCR &= ~RCC_BDCR_LSEON;
 8000c90:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <rcc_osc_off+0x50>)
 8000c92:	e7f9      	b.n	8000c88 <rcc_osc_off+0x28>
		RCC_CSR &= ~RCC_CSR_LSION;
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <rcc_osc_off+0x54>)
 8000c96:	e7f7      	b.n	8000c88 <rcc_osc_off+0x28>
		RCC_CR &= ~RCC_CR_PLLSAION;
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <rcc_osc_off+0x4c>)
 8000c9a:	6813      	ldr	r3, [r2, #0]
 8000c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	e7ea      	b.n	8000c78 <rcc_osc_off+0x18>
		RCC_CR &= ~RCC_CR_PLLI2SON;
 8000ca2:	4a02      	ldr	r2, [pc, #8]	; (8000cac <rcc_osc_off+0x4c>)
 8000ca4:	6813      	ldr	r3, [r2, #0]
 8000ca6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000caa:	e7e5      	b.n	8000c78 <rcc_osc_off+0x18>
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40023870 	.word	0x40023870
 8000cb4:	40023874 	.word	0x40023874

08000cb8 <rcc_set_sysclk_source>:

void rcc_set_sysclk_source(uint32_t clk)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8000cb8:	4a03      	ldr	r2, [pc, #12]	; (8000cc8 <rcc_set_sysclk_source+0x10>)
 8000cba:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~((1 << 1) | (1 << 0));
 8000cbc:	f023 0303 	bic.w	r3, r3, #3
	RCC_CFGR = (reg32 | clk);
 8000cc0:	4318      	orrs	r0, r3
 8000cc2:	6010      	str	r0, [r2, #0]
}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40023808 	.word	0x40023808

08000ccc <rcc_set_ppre2>:

void rcc_set_ppre2(uint32_t ppre2)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8000ccc:	4a03      	ldr	r2, [pc, #12]	; (8000cdc <rcc_set_ppre2+0x10>)
 8000cce:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~((1 << 13) | (1 << 14) | (1 << 15));
 8000cd0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
	RCC_CFGR = (reg32 | (ppre2 << 13));
 8000cd4:	ea43 3040 	orr.w	r0, r3, r0, lsl #13
 8000cd8:	6010      	str	r0, [r2, #0]
}
 8000cda:	4770      	bx	lr
 8000cdc:	40023808 	.word	0x40023808

08000ce0 <rcc_set_ppre1>:

void rcc_set_ppre1(uint32_t ppre1)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8000ce0:	4a03      	ldr	r2, [pc, #12]	; (8000cf0 <rcc_set_ppre1+0x10>)
 8000ce2:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~((1 << 10) | (1 << 11) | (1 << 12));
 8000ce4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
	RCC_CFGR = (reg32 | (ppre1 << 10));
 8000ce8:	ea43 2080 	orr.w	r0, r3, r0, lsl #10
 8000cec:	6010      	str	r0, [r2, #0]
}
 8000cee:	4770      	bx	lr
 8000cf0:	40023808 	.word	0x40023808

08000cf4 <rcc_set_hpre>:

void rcc_set_hpre(uint32_t hpre)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8000cf4:	4a03      	ldr	r2, [pc, #12]	; (8000d04 <rcc_set_hpre+0x10>)
 8000cf6:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~((1 << 4) | (1 << 5) | (1 << 6) | (1 << 7));
 8000cf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
	RCC_CFGR = (reg32 | (hpre << 4));
 8000cfc:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8000d00:	6010      	str	r0, [r2, #0]
}
 8000d02:	4770      	bx	lr
 8000d04:	40023808 	.word	0x40023808

08000d08 <rcc_set_main_pll_hse>:
	}
	RCC_PLLCFGR = RCC_PLLCFGR_PLLSRC | /* HSE */
		((pllm & RCC_PLLCFGR_PLLM_MASK) << RCC_PLLCFGR_PLLM_SHIFT) |
		((plln & RCC_PLLCFGR_PLLN_MASK) << RCC_PLLCFGR_PLLN_SHIFT) |
		((((pllp >> 1) - 1) & RCC_PLLCFGR_PLLP_MASK) << RCC_PLLCFGR_PLLP_SHIFT) |
		((pllq & RCC_PLLCFGR_PLLQ_MASK) << RCC_PLLCFGR_PLLQ_SHIFT) |
 8000d08:	061b      	lsls	r3, r3, #24
 8000d0a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
		((pllm & RCC_PLLCFGR_PLLM_MASK) << RCC_PLLCFGR_PLLM_SHIFT) |
 8000d0e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		((pllq & RCC_PLLCFGR_PLLQ_MASK) << RCC_PLLCFGR_PLLQ_SHIFT) |
 8000d12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d16:	4303      	orrs	r3, r0
		((plln & RCC_PLLCFGR_PLLN_MASK) << RCC_PLLCFGR_PLLN_SHIFT) |
 8000d18:	f647 70c0 	movw	r0, #32704	; 0x7fc0
 8000d1c:	ea00 1181 	and.w	r1, r0, r1, lsl #6
		((pllq & RCC_PLLCFGR_PLLQ_MASK) << RCC_PLLCFGR_PLLQ_SHIFT) |
 8000d20:	430b      	orrs	r3, r1
		((((pllp >> 1) - 1) & RCC_PLLCFGR_PLLP_MASK) << RCC_PLLCFGR_PLLP_SHIFT) |
 8000d22:	0851      	lsrs	r1, r2, #1
		((pllr & RCC_PLLCFGR_PLLR_MASK) << RCC_PLLCFGR_PLLR_SHIFT);
 8000d24:	9a00      	ldr	r2, [sp, #0]
		((((pllp >> 1) - 1) & RCC_PLLCFGR_PLLP_MASK) << RCC_PLLCFGR_PLLP_SHIFT) |
 8000d26:	3901      	subs	r1, #1
		((pllr & RCC_PLLCFGR_PLLR_MASK) << RCC_PLLCFGR_PLLR_SHIFT);
 8000d28:	2a02      	cmp	r2, #2
		((((pllp >> 1) - 1) & RCC_PLLCFGR_PLLP_MASK) << RCC_PLLCFGR_PLLP_SHIFT) |
 8000d2a:	ea4f 4101 	mov.w	r1, r1, lsl #16
		((pllr & RCC_PLLCFGR_PLLR_MASK) << RCC_PLLCFGR_PLLR_SHIFT);
 8000d2e:	bf38      	it	cc
 8000d30:	2202      	movcc	r2, #2
		((((pllp >> 1) - 1) & RCC_PLLCFGR_PLLP_MASK) << RCC_PLLCFGR_PLLP_SHIFT) |
 8000d32:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
		((pllr & RCC_PLLCFGR_PLLR_MASK) << RCC_PLLCFGR_PLLR_SHIFT);
 8000d36:	0712      	lsls	r2, r2, #28
 8000d38:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
		((pllq & RCC_PLLCFGR_PLLQ_MASK) << RCC_PLLCFGR_PLLQ_SHIFT) |
 8000d3c:	430b      	orrs	r3, r1
 8000d3e:	4313      	orrs	r3, r2
	RCC_PLLCFGR = RCC_PLLCFGR_PLLSRC | /* HSE */
 8000d40:	4a01      	ldr	r2, [pc, #4]	; (8000d48 <rcc_set_main_pll_hse+0x40>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40023804 	.word	0x40023804

08000d4c <rcc_clock_setup_hse_3v3>:
	/* Return the clock source which is used as system clock. */
	return (RCC_CFGR & 0x000c) >> 2;
}

void rcc_clock_setup_hse_3v3(const struct rcc_clock_scale *clock)
{
 8000d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d4e:	4604      	mov	r4, r0
	/* Enable internal high-speed oscillator. */
	rcc_osc_on(RCC_HSI);
 8000d50:	2004      	movs	r0, #4
 8000d52:	f7ff ff59 	bl	8000c08 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_HSI);
 8000d56:	2004      	movs	r0, #4
 8000d58:	f7ff ff4e 	bl	8000bf8 <rcc_wait_for_osc_ready>

	/* Select HSI as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_HSI);
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff ffab 	bl	8000cb8 <rcc_set_sysclk_source>

	/* Enable external high-speed oscillator 8MHz. */
	rcc_osc_on(RCC_HSE);
 8000d62:	2003      	movs	r0, #3
 8000d64:	f7ff ff50 	bl	8000c08 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_HSE);
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f7ff ff45 	bl	8000bf8 <rcc_wait_for_osc_ready>

	/* Enable/disable high performance mode */
	if (!clock->power_save) {
 8000d6e:	7be0      	ldrb	r0, [r4, #15]
 8000d70:	2800      	cmp	r0, #0
 8000d72:	d135      	bne.n	8000de0 <rcc_clock_setup_hse_3v3+0x94>
		pwr_set_vos_scale(PWR_SCALE1);
	} else {
		pwr_set_vos_scale(PWR_SCALE2);
 8000d74:	f000 ff34 	bl	8001be0 <pwr_set_vos_scale>

	/*
	 * Set prescalers for AHB, ADC, ABP1, ABP2.
	 * Do this before touching the PLL (TODO: why?).
	 */
	rcc_set_hpre(clock->hpre);
 8000d78:	7b20      	ldrb	r0, [r4, #12]
 8000d7a:	f7ff ffbb 	bl	8000cf4 <rcc_set_hpre>
	rcc_set_ppre1(clock->ppre1);
 8000d7e:	7b60      	ldrb	r0, [r4, #13]
 8000d80:	f7ff ffae 	bl	8000ce0 <rcc_set_ppre1>
	rcc_set_ppre2(clock->ppre2);
 8000d84:	7ba0      	ldrb	r0, [r4, #14]
 8000d86:	f7ff ffa1 	bl	8000ccc <rcc_set_ppre2>

	rcc_set_main_pll_hse(clock->pllm, clock->plln,
 8000d8a:	79a5      	ldrb	r5, [r4, #6]
 8000d8c:	8861      	ldrh	r1, [r4, #2]
 8000d8e:	7963      	ldrb	r3, [r4, #5]
 8000d90:	7922      	ldrb	r2, [r4, #4]
 8000d92:	7820      	ldrb	r0, [r4, #0]
 8000d94:	9500      	str	r5, [sp, #0]
 8000d96:	f7ff ffb7 	bl	8000d08 <rcc_set_main_pll_hse>
		RCC_CR |= RCC_CR_PLLON;
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <rcc_clock_setup_hse_3v3+0x98>)
 8000d9c:	6813      	ldr	r3, [r2, #0]
 8000d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000da2:	6013      	str	r3, [r2, #0]
			clock->pllp, clock->pllq, clock->pllr);

	/* Enable PLL oscillator and wait for it to stabilize. */
	rcc_osc_on(RCC_PLL);
	rcc_wait_for_osc_ready(RCC_PLL);
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff ff27 	bl	8000bf8 <rcc_wait_for_osc_ready>

	/* Configure flash settings. */
	flash_set_ws(clock->flash_config);
 8000daa:	68a0      	ldr	r0, [r4, #8]
 8000dac:	f000 f880 	bl	8000eb0 <flash_set_ws>

	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_PLL);
 8000db0:	2002      	movs	r0, #2
 8000db2:	f7ff ff81 	bl	8000cb8 <rcc_set_sysclk_source>
		while (((RCC_CFGR >> RCC_CFGR_SWS_SHIFT) & RCC_CFGR_SWS_MASK) !=
 8000db6:	4a0c      	ldr	r2, [pc, #48]	; (8000de8 <rcc_clock_setup_hse_3v3+0x9c>)
 8000db8:	6813      	ldr	r3, [r2, #0]
 8000dba:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d1fa      	bne.n	8000db8 <rcc_clock_setup_hse_3v3+0x6c>

	/* Wait for PLL clock to be selected. */
	rcc_wait_for_sysclk_status(RCC_PLL);

	/* Set the peripheral clock frequencies used. */
	rcc_ahb_frequency  = clock->ahb_frequency;
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <rcc_clock_setup_hse_3v3+0xa0>)
 8000dc4:	6922      	ldr	r2, [r4, #16]
 8000dc6:	601a      	str	r2, [r3, #0]
	rcc_apb1_frequency = clock->apb1_frequency;
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <rcc_clock_setup_hse_3v3+0xa4>)
 8000dca:	6962      	ldr	r2, [r4, #20]
 8000dcc:	601a      	str	r2, [r3, #0]
	rcc_apb2_frequency = clock->apb2_frequency;
 8000dce:	69a2      	ldr	r2, [r4, #24]
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <rcc_clock_setup_hse_3v3+0xa8>)

	/* Disable internal high-speed oscillator. */
	rcc_osc_off(RCC_HSI);
 8000dd2:	2004      	movs	r0, #4
	rcc_apb2_frequency = clock->apb2_frequency;
 8000dd4:	601a      	str	r2, [r3, #0]
}
 8000dd6:	b003      	add	sp, #12
 8000dd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	rcc_osc_off(RCC_HSI);
 8000ddc:	f7ff bf40 	b.w	8000c60 <rcc_osc_off>
		pwr_set_vos_scale(PWR_SCALE2);
 8000de0:	2001      	movs	r0, #1
 8000de2:	e7c7      	b.n	8000d74 <rcc_clock_setup_hse_3v3+0x28>
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40023808 	.word	0x40023808
 8000dec:	2000001c 	.word	0x2000001c
 8000df0:	20000020 	.word	0x20000020
 8000df4:	20000024 	.word	0x20000024

08000df8 <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8000df8:	6181      	str	r1, [r0, #24]
}
 8000dfa:	4770      	bx	lr

08000dfc <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 8000dfc:	0409      	lsls	r1, r1, #16
 8000dfe:	6181      	str	r1, [r0, #24]
}
 8000e00:	4770      	bx	lr

08000e02 <gpio_toggle>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_toggle(uint32_t gpioport, uint16_t gpios)
{
	uint32_t port = GPIO_ODR(gpioport);
 8000e02:	6943      	ldr	r3, [r0, #20]
	GPIO_BSRR(gpioport) = ((port & gpios) << 16) | (~port & gpios);
 8000e04:	ea01 0203 	and.w	r2, r1, r3
 8000e08:	ea21 0103 	bic.w	r1, r1, r3
 8000e0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000e10:	6181      	str	r1, [r0, #24]
}
 8000e12:	4770      	bx	lr

08000e14 <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 8000e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/*
	 * We want to set the config only for the pins mentioned in gpios,
	 * but keeping the others, so read out the actual config first.
	 */
	moder = GPIO_MODER(gpioport);
 8000e18:	6805      	ldr	r5, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 8000e1a:	68c4      	ldr	r4, [r0, #12]
 8000e1c:	2600      	movs	r6, #0
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 8000e1e:	f04f 0e03 	mov.w	lr, #3
		if (!((1 << i) & gpios)) {
 8000e22:	fa43 f706 	asr.w	r7, r3, r6
 8000e26:	07ff      	lsls	r7, r7, #31
 8000e28:	d50f      	bpl.n	8000e4a <gpio_mode_setup+0x36>
 8000e2a:	0077      	lsls	r7, r6, #1
		moder &= ~GPIO_MODE_MASK(i);
 8000e2c:	fa0e fc07 	lsl.w	ip, lr, r7
 8000e30:	ea6f 0c0c 	mvn.w	ip, ip
		moder |= GPIO_MODE(i, mode);
 8000e34:	fa01 f807 	lsl.w	r8, r1, r7
		moder &= ~GPIO_MODE_MASK(i);
 8000e38:	ea0c 0505 	and.w	r5, ip, r5
		pupd &= ~GPIO_PUPD_MASK(i);
 8000e3c:	ea0c 0404 	and.w	r4, ip, r4
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000e40:	fa02 f707 	lsl.w	r7, r2, r7
		moder |= GPIO_MODE(i, mode);
 8000e44:	ea48 0505 	orr.w	r5, r8, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000e48:	433c      	orrs	r4, r7
 8000e4a:	3601      	adds	r6, #1
	for (i = 0; i < 16; i++) {
 8000e4c:	2e10      	cmp	r6, #16
 8000e4e:	d1e8      	bne.n	8000e22 <gpio_mode_setup+0xe>
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 8000e50:	6005      	str	r5, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 8000e52:	60c4      	str	r4, [r0, #12]
}
 8000e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000e58 <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 8000e58:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
 8000e5a:	6a07      	ldr	r7, [r0, #32]
	afrh = GPIO_AFRH(gpioport);
 8000e5c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8000e5e:	2300      	movs	r3, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 8000e60:	f04f 0c0f 	mov.w	ip, #15
		if (!((1 << i) & gpios)) {
 8000e64:	fa42 f403 	asr.w	r4, r2, r3
 8000e68:	07e5      	lsls	r5, r4, #31
 8000e6a:	d507      	bpl.n	8000e7c <gpio_set_af+0x24>
 8000e6c:	009d      	lsls	r5, r3, #2
		afrl &= ~GPIO_AFR_MASK(i);
 8000e6e:	fa0c f405 	lsl.w	r4, ip, r5
 8000e72:	ea27 0704 	bic.w	r7, r7, r4
		afrl |= GPIO_AFR(i, alt_func_num);
 8000e76:	fa01 f505 	lsl.w	r5, r1, r5
 8000e7a:	432f      	orrs	r7, r5
 8000e7c:	3301      	adds	r3, #1
	for (i = 0; i < 8; i++) {
 8000e7e:	2b08      	cmp	r3, #8
 8000e80:	d1f0      	bne.n	8000e64 <gpio_set_af+0xc>

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 8000e82:	f04f 0c0f 	mov.w	ip, #15
		if (!((1 << i) & gpios)) {
 8000e86:	fa42 f403 	asr.w	r4, r2, r3
 8000e8a:	07e4      	lsls	r4, r4, #31
 8000e8c:	d50a      	bpl.n	8000ea4 <gpio_set_af+0x4c>
 8000e8e:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 8000e92:	3c08      	subs	r4, #8
 8000e94:	00a4      	lsls	r4, r4, #2
		afrh &= ~GPIO_AFR_MASK(i - 8);
 8000e96:	fa0c f504 	lsl.w	r5, ip, r4
 8000e9a:	ea26 0605 	bic.w	r6, r6, r5
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 8000e9e:	fa01 f404 	lsl.w	r4, r1, r4
 8000ea2:	4326      	orrs	r6, r4
 8000ea4:	3301      	adds	r3, #1
	for (i = 8; i < 16; i++) {
 8000ea6:	2b10      	cmp	r3, #16
 8000ea8:	d1ed      	bne.n	8000e86 <gpio_set_af+0x2e>
	}

	GPIO_AFRL(gpioport) = afrl;
 8000eaa:	6207      	str	r7, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 8000eac:	6246      	str	r6, [r0, #36]	; 0x24
}
 8000eae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000eb0 <flash_set_ws>:
*/
void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
 8000eb0:	4a03      	ldr	r2, [pc, #12]	; (8000ec0 <flash_set_ws+0x10>)
 8000eb2:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK);
 8000eb4:	f023 0307 	bic.w	r3, r3, #7
	reg32 |= ws;
 8000eb8:	4318      	orrs	r0, r3
	FLASH_ACR = reg32;
 8000eba:	6010      	str	r0, [r2, #0]
}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40023c00 	.word	0x40023c00

08000ec4 <exti_set_trigger>:
#       include <libopencm3/stm32/syscfg.h>
#endif

void exti_set_trigger(uint32_t extis, enum exti_trigger_type trig)
{
	switch (trig) {
 8000ec4:	2901      	cmp	r1, #1
 8000ec6:	d00c      	beq.n	8000ee2 <exti_set_trigger+0x1e>
 8000ec8:	d302      	bcc.n	8000ed0 <exti_set_trigger+0xc>
 8000eca:	2902      	cmp	r1, #2
 8000ecc:	d011      	beq.n	8000ef2 <exti_set_trigger+0x2e>
 8000ece:	4770      	bx	lr
	case EXTI_TRIGGER_RISING:
		EXTI_RTSR |= extis;
 8000ed0:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <exti_set_trigger+0x38>)
 8000ed2:	6813      	ldr	r3, [r2, #0]
 8000ed4:	4303      	orrs	r3, r0
 8000ed6:	6013      	str	r3, [r2, #0]
		EXTI_FTSR &= ~extis;
 8000ed8:	6853      	ldr	r3, [r2, #4]
 8000eda:	ea23 0000 	bic.w	r0, r3, r0
		EXTI_RTSR &= ~extis;
		EXTI_FTSR |= extis;
		break;
	case EXTI_TRIGGER_BOTH:
		EXTI_RTSR |= extis;
		EXTI_FTSR |= extis;
 8000ede:	6050      	str	r0, [r2, #4]
		break;
	}
}
 8000ee0:	4770      	bx	lr
		EXTI_RTSR &= ~extis;
 8000ee2:	4a06      	ldr	r2, [pc, #24]	; (8000efc <exti_set_trigger+0x38>)
 8000ee4:	6813      	ldr	r3, [r2, #0]
 8000ee6:	ea23 0300 	bic.w	r3, r3, r0
		EXTI_RTSR |= extis;
 8000eea:	6013      	str	r3, [r2, #0]
		EXTI_FTSR |= extis;
 8000eec:	6853      	ldr	r3, [r2, #4]
 8000eee:	4318      	orrs	r0, r3
 8000ef0:	e7f5      	b.n	8000ede <exti_set_trigger+0x1a>
		EXTI_RTSR |= extis;
 8000ef2:	4a02      	ldr	r2, [pc, #8]	; (8000efc <exti_set_trigger+0x38>)
 8000ef4:	6813      	ldr	r3, [r2, #0]
 8000ef6:	4303      	orrs	r3, r0
 8000ef8:	e7f7      	b.n	8000eea <exti_set_trigger+0x26>
 8000efa:	bf00      	nop
 8000efc:	40013c08 	.word	0x40013c08

08000f00 <exti_enable_request>:

void exti_enable_request(uint32_t extis)
{
	/* Enable interrupts. */
	EXTI_IMR |= extis;
 8000f00:	4a03      	ldr	r2, [pc, #12]	; (8000f10 <exti_enable_request+0x10>)
 8000f02:	6813      	ldr	r3, [r2, #0]
 8000f04:	4303      	orrs	r3, r0
 8000f06:	6013      	str	r3, [r2, #0]

	/* Enable events. */
	EXTI_EMR |= extis;
 8000f08:	6853      	ldr	r3, [r2, #4]
 8000f0a:	4318      	orrs	r0, r3
 8000f0c:	6050      	str	r0, [r2, #4]
}
 8000f0e:	4770      	bx	lr
 8000f10:	40013c00 	.word	0x40013c00

08000f14 <exti_reset_request>:
 * Reset the interrupt request by writing a 1 to the corresponding
 * pending bit register.
 */
void exti_reset_request(uint32_t extis)
{
	EXTI_PR = extis;
 8000f14:	4b01      	ldr	r3, [pc, #4]	; (8000f1c <exti_reset_request+0x8>)
 8000f16:	6018      	str	r0, [r3, #0]
}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40013c14 	.word	0x40013c14

08000f20 <exti_select_source>:
 * specified GPIO port.
 *
 * TODO: This could be rewritten in fewer lines of code.
 */
void exti_select_source(uint32_t exti, uint32_t gpioport)
{
 8000f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			continue;
		}

		uint32_t bits = 0, mask = 0x0F;

		switch (gpioport) {
 8000f24:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8000fe0 <exti_select_source+0xc0>
 8000f28:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 8000fe4 <exti_select_source+0xc4>
 8000f2c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8000fe8 <exti_select_source+0xc8>
 8000f30:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8000fec <exti_select_source+0xcc>
 8000f34:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8000ff0 <exti_select_source+0xd0>
 8000f38:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8000ff4 <exti_select_source+0xd4>
	for (line = 0; line < 16; line++) {
 8000f3c:	2200      	movs	r2, #0
		if (!(exti & (1 << line))) {
 8000f3e:	2301      	movs	r3, #1
 8000f40:	fa03 f402 	lsl.w	r4, r3, r2
 8000f44:	4204      	tst	r4, r0
 8000f46:	d033      	beq.n	8000fb0 <exti_select_source+0x90>
		switch (gpioport) {
 8000f48:	4c21      	ldr	r4, [pc, #132]	; (8000fd0 <exti_select_source+0xb0>)
 8000f4a:	42a1      	cmp	r1, r4
 8000f4c:	d037      	beq.n	8000fbe <exti_select_source+0x9e>
 8000f4e:	d80d      	bhi.n	8000f6c <exti_select_source+0x4c>
 8000f50:	4549      	cmp	r1, r9
 8000f52:	d01d      	beq.n	8000f90 <exti_select_source+0x70>
 8000f54:	d803      	bhi.n	8000f5e <exti_select_source+0x3e>
 8000f56:	4559      	cmp	r1, fp
 8000f58:	d01b      	beq.n	8000f92 <exti_select_source+0x72>
		uint32_t bits = 0, mask = 0x0F;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e019      	b.n	8000f92 <exti_select_source+0x72>
		switch (gpioport) {
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <exti_select_source+0xb4>)
 8000f60:	4299      	cmp	r1, r3
 8000f62:	d02a      	beq.n	8000fba <exti_select_source+0x9a>
 8000f64:	4551      	cmp	r1, sl
 8000f66:	d1f8      	bne.n	8000f5a <exti_select_source+0x3a>
		case GPIOD:
			bits = 3;
			break;
#if defined(GPIOE) && defined(GPIO_PORT_E_BASE)
		case GPIOE:
			bits = 4;
 8000f68:	2304      	movs	r3, #4
			break;
 8000f6a:	e012      	b.n	8000f92 <exti_select_source+0x72>
		switch (gpioport) {
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <exti_select_source+0xb8>)
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	d029      	beq.n	8000fc6 <exti_select_source+0xa6>
 8000f72:	d807      	bhi.n	8000f84 <exti_select_source+0x64>
 8000f74:	4541      	cmp	r1, r8
 8000f76:	d024      	beq.n	8000fc2 <exti_select_source+0xa2>
 8000f78:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	d1ec      	bne.n	8000f5a <exti_select_source+0x3a>
			bits = 6;
			break;
#endif
#if defined(GPIOH) && defined(GPIO_PORT_H_BASE)
		case GPIOH:
			bits = 7;
 8000f80:	2307      	movs	r3, #7
			break;
 8000f82:	e006      	b.n	8000f92 <exti_select_source+0x72>
		switch (gpioport) {
 8000f84:	4561      	cmp	r1, ip
 8000f86:	d020      	beq.n	8000fca <exti_select_source+0xaa>
 8000f88:	4571      	cmp	r1, lr
 8000f8a:	d1e6      	bne.n	8000f5a <exti_select_source+0x3a>
			bits = 9;
			break;
#endif
#if defined(GPIOK) && defined(GPIO_PORT_K_BASE)
		case GPIOK:
			bits = 10;
 8000f8c:	230a      	movs	r3, #10
			break;
 8000f8e:	e000      	b.n	8000f92 <exti_select_source+0x72>
			bits = 2;
 8000f90:	2302      	movs	r3, #2
		mask <<= shift;

#if defined(AFIO_BASE)
		AFIO_EXTICR(reg) = (AFIO_EXTICR(reg) & ~mask) | bits;
#else
		SYSCFG_EXTICR(reg) = (SYSCFG_EXTICR(reg) & ~mask) | bits;
 8000f92:	4c12      	ldr	r4, [pc, #72]	; (8000fdc <exti_select_source+0xbc>)
 8000f94:	eb04 0592 	add.w	r5, r4, r2, lsr #2
 8000f98:	00ad      	lsls	r5, r5, #2
		uint8_t shift = (uint8_t)(4 * (line % 4));
 8000f9a:	f002 0603 	and.w	r6, r2, #3
		bits <<= shift;
 8000f9e:	00b6      	lsls	r6, r6, #2
		SYSCFG_EXTICR(reg) = (SYSCFG_EXTICR(reg) & ~mask) | bits;
 8000fa0:	682c      	ldr	r4, [r5, #0]
		mask <<= shift;
 8000fa2:	270f      	movs	r7, #15
 8000fa4:	40b7      	lsls	r7, r6
		SYSCFG_EXTICR(reg) = (SYSCFG_EXTICR(reg) & ~mask) | bits;
 8000fa6:	ea24 0407 	bic.w	r4, r4, r7
		bits <<= shift;
 8000faa:	40b3      	lsls	r3, r6
		SYSCFG_EXTICR(reg) = (SYSCFG_EXTICR(reg) & ~mask) | bits;
 8000fac:	431c      	orrs	r4, r3
 8000fae:	602c      	str	r4, [r5, #0]
	for (line = 0; line < 16; line++) {
 8000fb0:	3201      	adds	r2, #1
 8000fb2:	2a10      	cmp	r2, #16
 8000fb4:	d1c3      	bne.n	8000f3e <exti_select_source+0x1e>
#endif
	};
}
 8000fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			bits = 3;
 8000fba:	2303      	movs	r3, #3
			break;
 8000fbc:	e7e9      	b.n	8000f92 <exti_select_source+0x72>
			bits = 5;
 8000fbe:	2305      	movs	r3, #5
			break;
 8000fc0:	e7e7      	b.n	8000f92 <exti_select_source+0x72>
			bits = 6;
 8000fc2:	2306      	movs	r3, #6
			break;
 8000fc4:	e7e5      	b.n	8000f92 <exti_select_source+0x72>
			bits = 8;
 8000fc6:	2308      	movs	r3, #8
			break;
 8000fc8:	e7e3      	b.n	8000f92 <exti_select_source+0x72>
			bits = 9;
 8000fca:	2309      	movs	r3, #9
			break;
 8000fcc:	e7e1      	b.n	8000f92 <exti_select_source+0x72>
 8000fce:	bf00      	nop
 8000fd0:	40021400 	.word	0x40021400
 8000fd4:	40020c00 	.word	0x40020c00
 8000fd8:	40022000 	.word	0x40022000
 8000fdc:	10004e02 	.word	0x10004e02
 8000fe0:	40022400 	.word	0x40022400
 8000fe4:	40022800 	.word	0x40022800
 8000fe8:	40021800 	.word	0x40021800
 8000fec:	40020800 	.word	0x40020800
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40020400 	.word	0x40020400

08000ff8 <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 8000ff8:	0943      	lsrs	r3, r0, #5
 8000ffa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ffe:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001002:	f000 021f 	and.w	r2, r0, #31
 8001006:	6819      	ldr	r1, [r3, #0]
 8001008:	2001      	movs	r0, #1
 800100a:	4090      	lsls	r0, r2
 800100c:	4308      	orrs	r0, r1
 800100e:	6018      	str	r0, [r3, #0]
}
 8001010:	4770      	bx	lr

08001012 <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8001012:	0943      	lsrs	r3, r0, #5
 8001014:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001018:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800101c:	f000 021f 	and.w	r2, r0, #31
 8001020:	6819      	ldr	r1, [r3, #0]
 8001022:	2001      	movs	r0, #1
 8001024:	4090      	lsls	r0, r2
 8001026:	4301      	orrs	r1, r0
 8001028:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	ea22 0000 	bic.w	r0, r2, r0
 8001030:	6018      	str	r0, [r3, #0]
}
 8001032:	4770      	bx	lr

08001034 <spi_reset>:
@param[in] spi_peripheral Unsigned int32. SPI peripheral identifier @ref
spi_reg_base.
*/

void spi_reset(uint32_t spi_peripheral)
{	switch (spi_peripheral) {
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <spi_reset+0x58>)
 8001036:	4298      	cmp	r0, r3
 8001038:	d017      	beq.n	800106a <spi_reset+0x36>
 800103a:	d808      	bhi.n	800104e <spi_reset+0x1a>
 800103c:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
 8001040:	4298      	cmp	r0, r3
 8001042:	d016      	beq.n	8001072 <spi_reset+0x3e>
 8001044:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001048:	4298      	cmp	r0, r3
 800104a:	d015      	beq.n	8001078 <spi_reset+0x44>
 800104c:	4770      	bx	lr
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <spi_reset+0x5c>)
 8001050:	4298      	cmp	r0, r3
 8001052:	d014      	beq.n	800107e <spi_reset+0x4a>
 8001054:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001058:	4298      	cmp	r0, r3
 800105a:	d013      	beq.n	8001084 <spi_reset+0x50>
 800105c:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8001060:	4298      	cmp	r0, r3
 8001062:	d112      	bne.n	800108a <spi_reset+0x56>
		rcc_periph_reset_pulse(RST_SPI3);
		break;
#endif
#if defined(SPI4_BASE)
	case SPI4_BASE:
		rcc_periph_reset_pulse(RST_SPI4);
 8001064:	f240 408d 	movw	r0, #1165	; 0x48d
 8001068:	e001      	b.n	800106e <spi_reset+0x3a>
		rcc_periph_reset_pulse(RST_SPI1);
 800106a:	f240 408c 	movw	r0, #1164	; 0x48c
		rcc_periph_reset_pulse(RST_SPI5);
		break;
#endif
#if defined(SPI6_BASE)
	case SPI6_BASE:
		rcc_periph_reset_pulse(RST_SPI6);
 800106e:	f7ff bfd0 	b.w	8001012 <rcc_periph_reset_pulse>
		rcc_periph_reset_pulse(RST_SPI2);
 8001072:	f240 400e 	movw	r0, #1038	; 0x40e
 8001076:	e7fa      	b.n	800106e <spi_reset+0x3a>
		rcc_periph_reset_pulse(RST_SPI3);
 8001078:	f240 400f 	movw	r0, #1039	; 0x40f
 800107c:	e7f7      	b.n	800106e <spi_reset+0x3a>
		rcc_periph_reset_pulse(RST_SPI5);
 800107e:	f240 4094 	movw	r0, #1172	; 0x494
 8001082:	e7f4      	b.n	800106e <spi_reset+0x3a>
		rcc_periph_reset_pulse(RST_SPI6);
 8001084:	f240 4095 	movw	r0, #1173	; 0x495
 8001088:	e7f1      	b.n	800106e <spi_reset+0x3a>
		break;
#endif
	default:
		break;
	}
}
 800108a:	4770      	bx	lr
 800108c:	40013000 	.word	0x40013000
 8001090:	40015000 	.word	0x40015000

08001094 <spi_enable>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_enable(uint32_t spi)
{
	SPI_CR1(spi) |= SPI_CR1_SPE; /* Enable SPI. */
 8001094:	6803      	ldr	r3, [r0, #0]
 8001096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800109a:	6003      	str	r3, [r0, #0]
}
 800109c:	4770      	bx	lr

0800109e <spi_xfer>:
*/

void spi_write(uint32_t spi, uint16_t data)
{
	/* Write data (8 or 16 bits, depending on DFF) into DR. */
	SPI_DR(spi) = data;
 800109e:	60c1      	str	r1, [r0, #12]
uint16_t spi_xfer(uint32_t spi, uint16_t data)
{
	spi_write(spi, data);

	/* Wait for transfer finished. */
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 80010a0:	6883      	ldr	r3, [r0, #8]
 80010a2:	07db      	lsls	r3, r3, #31
 80010a4:	d5fc      	bpl.n	80010a0 <spi_xfer+0x2>

	/* Read the data (8 or 16 bits, depending on DFF bit) from DR. */
	return SPI_DR(spi);
 80010a6:	68c0      	ldr	r0, [r0, #12]
}
 80010a8:	b280      	uxth	r0, r0
 80010aa:	4770      	bx	lr

080010ac <spi_set_unidirectional_mode>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_set_unidirectional_mode(uint32_t spi)
{
	SPI_CR1(spi) &= ~SPI_CR1_BIDIMODE;
 80010ac:	6803      	ldr	r3, [r0, #0]
 80010ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80010b2:	6003      	str	r3, [r0, #0]
}
 80010b4:	4770      	bx	lr

080010b6 <spi_set_full_duplex_mode>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_set_full_duplex_mode(uint32_t spi)
{
	SPI_CR1(spi) &= ~SPI_CR1_RXONLY;
 80010b6:	6803      	ldr	r3, [r0, #0]
 80010b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010bc:	6003      	str	r3, [r0, #0]
}
 80010be:	4770      	bx	lr

080010c0 <spi_enable_software_slave_management>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_enable_software_slave_management(uint32_t spi)
{
	SPI_CR1(spi) |= SPI_CR1_SSM;
 80010c0:	6803      	ldr	r3, [r0, #0]
 80010c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c6:	6003      	str	r3, [r0, #0]
	/* allow slave select to be an input */
	SPI_CR2(spi) &= ~SPI_CR2_SSOE;
 80010c8:	6843      	ldr	r3, [r0, #4]
 80010ca:	f023 0304 	bic.w	r3, r3, #4
 80010ce:	6043      	str	r3, [r0, #4]
}
 80010d0:	4770      	bx	lr

080010d2 <spi_set_nss_high>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_set_nss_high(uint32_t spi)
{
	SPI_CR1(spi) |= SPI_CR1_SSI;
 80010d2:	6803      	ldr	r3, [r0, #0]
 80010d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d8:	6003      	str	r3, [r0, #0]
}
 80010da:	4770      	bx	lr

080010dc <spi_send_msb_first>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_send_msb_first(uint32_t spi)
{
	SPI_CR1(spi) &= ~SPI_CR1_LSBFIRST;
 80010dc:	6803      	ldr	r3, [r0, #0]
 80010de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80010e2:	6003      	str	r3, [r0, #0]
}
 80010e4:	4770      	bx	lr

080010e6 <spi_set_baudrate_prescaler>:

void spi_set_baudrate_prescaler(uint32_t spi, uint8_t baudrate)
{
	uint32_t reg32;

	if (baudrate > 7) {
 80010e6:	2907      	cmp	r1, #7
 80010e8:	d807      	bhi.n	80010fa <spi_set_baudrate_prescaler+0x14>
		return;
	}

	reg32 = (SPI_CR1(spi) & 0xffc7); /* Clear bits [5:3]. */
 80010ea:	6803      	ldr	r3, [r0, #0]
 80010ec:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80010f0:	041b      	lsls	r3, r3, #16
 80010f2:	0c1b      	lsrs	r3, r3, #16
	reg32 |= (baudrate << 3);
 80010f4:	ea43 01c1 	orr.w	r1, r3, r1, lsl #3
	SPI_CR1(spi) = reg32;
 80010f8:	6001      	str	r1, [r0, #0]
}
 80010fa:	4770      	bx	lr

080010fc <spi_set_master_mode>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_set_master_mode(uint32_t spi)
{
	SPI_CR1(spi) |= SPI_CR1_MSTR;
 80010fc:	6803      	ldr	r3, [r0, #0]
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6003      	str	r3, [r0, #0]
}
 8001104:	4770      	bx	lr

08001106 <spi_set_clock_polarity_1>:
@sa spi_set_clock_polarity_0
*/

void spi_set_clock_polarity_1(uint32_t spi)
{
	SPI_CR1(spi) |= SPI_CR1_CPOL;
 8001106:	6803      	ldr	r3, [r0, #0]
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6003      	str	r3, [r0, #0]
}
 800110e:	4770      	bx	lr

08001110 <spi_set_clock_phase_1>:
@sa spi_set_clock_phase_0
*/

void spi_set_clock_phase_1(uint32_t spi)
{
	SPI_CR1(spi) |= SPI_CR1_CPHA;
 8001110:	6803      	ldr	r3, [r0, #0]
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6003      	str	r3, [r0, #0]
}
 8001118:	4770      	bx	lr

0800111a <spi_set_dff_8bit>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_set_dff_8bit(uint32_t spi)
{
	SPI_CR1(spi) &= ~SPI_CR1_DFF;
 800111a:	6803      	ldr	r3, [r0, #0]
 800111c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001120:	6003      	str	r3, [r0, #0]
}
 8001122:	4770      	bx	lr

08001124 <usbd_init>:
usbd_device *usbd_init(const usbd_driver *driver,
		       const struct usb_device_descriptor *dev,
		       const struct usb_config_descriptor *conf,
		       const char **strings, int num_strings,
		       uint8_t *control_buffer, uint16_t control_buffer_size)
{
 8001124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001128:	461e      	mov	r6, r3
	usbd_device *usbd_dev;

	usbd_dev = driver->init();
 800112a:	6803      	ldr	r3, [r0, #0]
{
 800112c:	4605      	mov	r5, r0
 800112e:	4688      	mov	r8, r1
 8001130:	4617      	mov	r7, r2
	usbd_dev = driver->init();
 8001132:	4798      	blx	r3

	usbd_dev->driver = driver;
	usbd_dev->desc = dev;
	usbd_dev->config = conf;
	usbd_dev->strings = strings;
	usbd_dev->num_strings = num_strings;
 8001134:	9b06      	ldr	r3, [sp, #24]
 8001136:	60c3      	str	r3, [r0, #12]
	usbd_dev->ctrl_buf = control_buffer;
 8001138:	9b07      	ldr	r3, [sp, #28]
 800113a:	6103      	str	r3, [r0, #16]
	usbd_dev->ctrl_buf_len = control_buffer_size;
 800113c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8001140:	8283      	strh	r3, [r0, #20]

	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <usbd_init+0x44>)
 8001144:	6703      	str	r3, [r0, #112]	; 0x70
	    _usbd_control_setup;
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <usbd_init+0x48>)
 8001148:	66c3      	str	r3, [r0, #108]	; 0x6c
	    _usbd_control_out;
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <usbd_init+0x4c>)
 800114c:	6683      	str	r3, [r0, #104]	; 0x68
	    _usbd_control_in;

	int i;
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
		usbd_dev->user_callback_set_config[i] = NULL;
 800114e:	2300      	movs	r3, #0
	usbd_dev->driver = driver;
 8001150:	f8c0 50dc 	str.w	r5, [r0, #220]	; 0xdc
	usbd_dev->config = conf;
 8001154:	e9c0 8700 	strd	r8, r7, [r0]
	usbd_dev->strings = strings;
 8001158:	6086      	str	r6, [r0, #8]
		usbd_dev->user_callback_set_config[i] = NULL;
 800115a:	e9c0 3332 	strd	r3, r3, [r0, #200]	; 0xc8
 800115e:	e9c0 3334 	strd	r3, r3, [r0, #208]	; 0xd0
	}

	return usbd_dev;
}
 8001162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001166:	bf00      	nop
 8001168:	080018dd 	.word	0x080018dd
 800116c:	08001937 	.word	0x08001937
 8001170:	080019b9 	.word	0x080019b9

08001174 <usbd_poll>:
}

/* Functions to wrap the low-level driver */
void usbd_poll(usbd_device *usbd_dev)
{
	usbd_dev->driver->poll(usbd_dev);
 8001174:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	4718      	bx	r3

0800117c <usbd_ep_setup>:
	}
}

void usbd_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
		   uint16_t max_size, usbd_endpoint_callback callback)
{
 800117c:	b410      	push	{r4}
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 800117e:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 8001182:	68a4      	ldr	r4, [r4, #8]
 8001184:	46a4      	mov	ip, r4
}
 8001186:	f85d 4b04 	ldr.w	r4, [sp], #4
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 800118a:	4760      	bx	ip

0800118c <_usbd_reset>:
{
 800118c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
 800118e:	6803      	ldr	r3, [r0, #0]
	usbd_dev->current_address = 0;
 8001190:	2500      	movs	r5, #0
{
 8001192:	4604      	mov	r4, r0
	usbd_dev->current_address = 0;
 8001194:	82c5      	strh	r5, [r0, #22]
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
 8001196:	79db      	ldrb	r3, [r3, #7]
 8001198:	9500      	str	r5, [sp, #0]
 800119a:	462a      	mov	r2, r5
 800119c:	4629      	mov	r1, r5
 800119e:	f7ff ffed 	bl	800117c <usbd_ep_setup>
	usbd_dev->driver->set_address(usbd_dev, 0);
 80011a2:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 80011a6:	4629      	mov	r1, r5
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	4620      	mov	r0, r4
 80011ac:	4798      	blx	r3
	if (usbd_dev->user_callback_reset) {
 80011ae:	69e3      	ldr	r3, [r4, #28]
 80011b0:	b11b      	cbz	r3, 80011ba <_usbd_reset+0x2e>
}
 80011b2:	b003      	add	sp, #12
 80011b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		usbd_dev->user_callback_reset();
 80011b8:	4718      	bx	r3
}
 80011ba:	b003      	add	sp, #12
 80011bc:	bd30      	pop	{r4, r5, pc}

080011be <usbd_ep_write_packet>:

uint16_t usbd_ep_write_packet(usbd_device *usbd_dev, uint8_t addr,
			 const void *buf, uint16_t len)
{
 80011be:	b410      	push	{r4}
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 80011c0:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 80011c4:	69e4      	ldr	r4, [r4, #28]
 80011c6:	46a4      	mov	ip, r4
}
 80011c8:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 80011cc:	4760      	bx	ip

080011ce <usbd_ep_read_packet>:

uint16_t usbd_ep_read_packet(usbd_device *usbd_dev, uint8_t addr, void *buf,
			     uint16_t len)
{
 80011ce:	b410      	push	{r4}
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 80011d0:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 80011d4:	6a24      	ldr	r4, [r4, #32]
 80011d6:	46a4      	mov	ip, r4
}
 80011d8:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 80011dc:	4760      	bx	ip

080011de <usbd_ep_stall_set>:

void usbd_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
	usbd_dev->driver->ep_stall_set(usbd_dev, addr, stall);
 80011de:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	4718      	bx	r3

080011e6 <usbd_ep_stall_get>:
}

uint8_t usbd_ep_stall_get(usbd_device *usbd_dev, uint8_t addr)
{
	return usbd_dev->driver->ep_stall_get(usbd_dev, addr);
 80011e6:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4718      	bx	r3

080011ee <usb_standard_set_configuration>:

static enum usbd_request_return_codes
usb_standard_set_configuration(usbd_device *usbd_dev,
			       struct usb_setup_data *req,
			       uint8_t **buf, uint16_t *len)
{
 80011ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011f0:	460d      	mov	r5, r1

	(void)req;
	(void)buf;
	(void)len;

	if (req->wValue > 0) {
 80011f2:	8849      	ldrh	r1, [r1, #2]
{
 80011f4:	4604      	mov	r4, r0
	if (req->wValue > 0) {
 80011f6:	b179      	cbz	r1, 8001218 <usb_standard_set_configuration+0x2a>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 80011f8:	6803      	ldr	r3, [r0, #0]
			if (req->wValue
			    == usbd_dev->config[i].bConfigurationValue) {
 80011fa:	260d      	movs	r6, #13
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 80011fc:	7c58      	ldrb	r0, [r3, #17]
 80011fe:	2300      	movs	r3, #0
 8001200:	4298      	cmp	r0, r3
 8001202:	d801      	bhi.n	8001208 <usb_standard_set_configuration+0x1a>
				found_index = i;
				break;
			}
		}
		if (found_index < 0) {
			return USBD_REQ_NOTSUPP;
 8001204:	2000      	movs	r0, #0
			}
		}
	}

	return USBD_REQ_HANDLED;
}
 8001206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			    == usbd_dev->config[i].bConfigurationValue) {
 8001208:	6862      	ldr	r2, [r4, #4]
 800120a:	fb06 2203 	mla	r2, r6, r3, r2
			if (req->wValue
 800120e:	7952      	ldrb	r2, [r2, #5]
 8001210:	428a      	cmp	r2, r1
 8001212:	d003      	beq.n	800121c <usb_standard_set_configuration+0x2e>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 8001214:	3301      	adds	r3, #1
 8001216:	e7f3      	b.n	8001200 <usb_standard_set_configuration+0x12>
	int found_index = -1;
 8001218:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	usbd_dev->current_config = found_index + 1;
 800121c:	3301      	adds	r3, #1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	75e3      	strb	r3, [r4, #23]
	if (usbd_dev->current_config > 0) {
 8001222:	b94b      	cbnz	r3, 8001238 <usb_standard_set_configuration+0x4a>
	usbd_dev->driver->ep_reset(usbd_dev);
 8001224:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8001228:	4620      	mov	r0, r4
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	4798      	blx	r3
	if (usbd_dev->user_callback_set_config[0]) {
 800122e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8001232:	b9ab      	cbnz	r3, 8001260 <usb_standard_set_configuration+0x72>
	return USBD_REQ_HANDLED;
 8001234:	2001      	movs	r0, #1
 8001236:	e7e6      	b.n	8001206 <usb_standard_set_configuration+0x18>
		cfg = &usbd_dev->config[usbd_dev->current_config - 1];
 8001238:	220d      	movs	r2, #13
 800123a:	f06f 010c 	mvn.w	r1, #12
 800123e:	fb12 1203 	smlabb	r2, r2, r3, r1
 8001242:	6863      	ldr	r3, [r4, #4]
 8001244:	4413      	add	r3, r2
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001246:	2200      	movs	r2, #0
				*cfg->interface[i].cur_altsetting = 0;
 8001248:	4610      	mov	r0, r2
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 800124a:	7919      	ldrb	r1, [r3, #4]
 800124c:	4291      	cmp	r1, r2
 800124e:	d9e9      	bls.n	8001224 <usb_standard_set_configuration+0x36>
			if (cfg->interface[i].cur_altsetting) {
 8001250:	f8d3 1009 	ldr.w	r1, [r3, #9]
 8001254:	0116      	lsls	r6, r2, #4
 8001256:	5871      	ldr	r1, [r6, r1]
 8001258:	b101      	cbz	r1, 800125c <usb_standard_set_configuration+0x6e>
				*cfg->interface[i].cur_altsetting = 0;
 800125a:	7008      	strb	r0, [r1, #0]
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 800125c:	3201      	adds	r2, #1
 800125e:	e7f4      	b.n	800124a <usb_standard_set_configuration+0x5c>
			usbd_dev->user_control_callback[i].cb = NULL;
 8001260:	2300      	movs	r3, #0
 8001262:	64a3      	str	r3, [r4, #72]	; 0x48
 8001264:	6523      	str	r3, [r4, #80]	; 0x50
 8001266:	65a3      	str	r3, [r4, #88]	; 0x58
 8001268:	6623      	str	r3, [r4, #96]	; 0x60
 800126a:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
 800126e:	f104 07d8 	add.w	r7, r4, #216	; 0xd8
			if (usbd_dev->user_callback_set_config[i]) {
 8001272:	f856 3b04 	ldr.w	r3, [r6], #4
 8001276:	b113      	cbz	r3, 800127e <usb_standard_set_configuration+0x90>
				usbd_dev->user_callback_set_config[i](usbd_dev,
 8001278:	8869      	ldrh	r1, [r5, #2]
 800127a:	4620      	mov	r0, r4
 800127c:	4798      	blx	r3
		for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 800127e:	42b7      	cmp	r7, r6
 8001280:	d1f7      	bne.n	8001272 <usb_standard_set_configuration+0x84>
 8001282:	e7d7      	b.n	8001234 <usb_standard_set_configuration+0x46>

08001284 <usb_standard_get_configuration>:
			       struct usb_setup_data *req,
			       uint8_t **buf, uint16_t *len)
{
	(void)req;

	if (*len > 1) {
 8001284:	8819      	ldrh	r1, [r3, #0]
 8001286:	6812      	ldr	r2, [r2, #0]
 8001288:	2901      	cmp	r1, #1
		*len = 1;
 800128a:	bf84      	itt	hi
 800128c:	2101      	movhi	r1, #1
 800128e:	8019      	strhhi	r1, [r3, #0]
	}
	if (usbd_dev->current_config > 0) {
 8001290:	7dc3      	ldrb	r3, [r0, #23]
 8001292:	b12b      	cbz	r3, 80012a0 <usb_standard_get_configuration+0x1c>
		const struct usb_config_descriptor *cfg =
			&usbd_dev->config[usbd_dev->current_config - 1];
		(*buf)[0] = cfg->bConfigurationValue;
 8001294:	6841      	ldr	r1, [r0, #4]
 8001296:	200d      	movs	r0, #13
 8001298:	fb00 1303 	mla	r3, r0, r3, r1
 800129c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	} else {
		(*buf)[0] = 0;
 80012a0:	7013      	strb	r3, [r2, #0]
	}

	return USBD_REQ_HANDLED;
}
 80012a2:	2001      	movs	r0, #1
 80012a4:	4770      	bx	lr

080012a6 <usb_standard_get_interface>:

static enum usbd_request_return_codes
usb_standard_get_interface(usbd_device *usbd_dev,
			   struct usb_setup_data *req,
			   uint8_t **buf, uint16_t *len)
{
 80012a6:	b570      	push	{r4, r5, r6, lr}
	uint8_t *cur_altsetting;
	const struct usb_config_descriptor *cfx =
		&usbd_dev->config[usbd_dev->current_config - 1];
 80012a8:	7dc6      	ldrb	r6, [r0, #23]
	const struct usb_config_descriptor *cfx =
 80012aa:	6840      	ldr	r0, [r0, #4]
		&usbd_dev->config[usbd_dev->current_config - 1];
 80012ac:	f06f 050c 	mvn.w	r5, #12
 80012b0:	240d      	movs	r4, #13
 80012b2:	fb14 5406 	smlabb	r4, r4, r6, r5
	const struct usb_config_descriptor *cfx =
 80012b6:	4420      	add	r0, r4

	if (req->wIndex >= cfx->bNumInterfaces) {
 80012b8:	888d      	ldrh	r5, [r1, #4]
 80012ba:	7904      	ldrb	r4, [r0, #4]
 80012bc:	42a5      	cmp	r5, r4
 80012be:	d20c      	bcs.n	80012da <usb_standard_get_interface+0x34>
		return USBD_REQ_NOTSUPP;
	}

	*len = 1;
 80012c0:	2401      	movs	r4, #1
 80012c2:	801c      	strh	r4, [r3, #0]
	cur_altsetting = cfx->interface[req->wIndex].cur_altsetting;
 80012c4:	888b      	ldrh	r3, [r1, #4]
 80012c6:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	581b      	ldr	r3, [r3, r0]
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 80012ce:	b103      	cbz	r3, 80012d2 <usb_standard_get_interface+0x2c>
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	6812      	ldr	r2, [r2, #0]

	return USBD_REQ_HANDLED;
 80012d4:	2001      	movs	r0, #1
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 80012d6:	7013      	strb	r3, [r2, #0]
}
 80012d8:	bd70      	pop	{r4, r5, r6, pc}
		return USBD_REQ_NOTSUPP;
 80012da:	2000      	movs	r0, #0
 80012dc:	e7fc      	b.n	80012d8 <usb_standard_get_interface+0x32>

080012de <usb_standard_device_get_status>:
	(void)usbd_dev;
	(void)req;

	/* bit 0: self powered */
	/* bit 1: remote wakeup */
	if (*len > 2) {
 80012de:	8819      	ldrh	r1, [r3, #0]
 80012e0:	2902      	cmp	r1, #2
		*len = 2;
 80012e2:	bf84      	itt	hi
 80012e4:	2102      	movhi	r1, #2
 80012e6:	8019      	strhhi	r1, [r3, #0]
	}
	(*buf)[0] = 0;
 80012e8:	6811      	ldr	r1, [r2, #0]
 80012ea:	2300      	movs	r3, #0
 80012ec:	700b      	strb	r3, [r1, #0]
	(*buf)[1] = 0;
 80012ee:	6812      	ldr	r2, [r2, #0]

	return USBD_REQ_HANDLED;
}
 80012f0:	2001      	movs	r0, #1
	(*buf)[1] = 0;
 80012f2:	7053      	strb	r3, [r2, #1]
}
 80012f4:	4770      	bx	lr

080012f6 <usb_standard_endpoint_get_status>:

static enum usbd_request_return_codes
usb_standard_endpoint_get_status(usbd_device *usbd_dev,
				 struct usb_setup_data *req,
				 uint8_t **buf, uint16_t *len)
{
 80012f6:	b510      	push	{r4, lr}
 80012f8:	4614      	mov	r4, r2
	(void)req;

	if (*len > 2) {
 80012fa:	881a      	ldrh	r2, [r3, #0]
 80012fc:	2a02      	cmp	r2, #2
		*len = 2;
 80012fe:	bf84      	itt	hi
 8001300:	2202      	movhi	r2, #2
 8001302:	801a      	strhhi	r2, [r3, #0]
	}
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 8001304:	8889      	ldrh	r1, [r1, #4]
 8001306:	b2c9      	uxtb	r1, r1
 8001308:	f7ff ff6d 	bl	80011e6 <usbd_ep_stall_get>
 800130c:	6823      	ldr	r3, [r4, #0]
 800130e:	3000      	adds	r0, #0
 8001310:	bf18      	it	ne
 8001312:	2001      	movne	r0, #1
 8001314:	7018      	strb	r0, [r3, #0]
	(*buf)[1] = 0;
 8001316:	6823      	ldr	r3, [r4, #0]
 8001318:	2200      	movs	r2, #0
 800131a:	705a      	strb	r2, [r3, #1]

	return USBD_REQ_HANDLED;
}
 800131c:	2001      	movs	r0, #1
 800131e:	bd10      	pop	{r4, pc}

08001320 <usb_standard_endpoint_stall>:

static enum usbd_request_return_codes
usb_standard_endpoint_stall(usbd_device *usbd_dev,
			    struct usb_setup_data *req,
			    uint8_t **buf, uint16_t *len)
{
 8001320:	b508      	push	{r3, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 1);
 8001322:	8889      	ldrh	r1, [r1, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	b2c9      	uxtb	r1, r1
 8001328:	f7ff ff59 	bl	80011de <usbd_ep_stall_set>

	return USBD_REQ_HANDLED;
}
 800132c:	2001      	movs	r0, #1
 800132e:	bd08      	pop	{r3, pc}

08001330 <usb_standard_endpoint_unstall>:

static enum usbd_request_return_codes
usb_standard_endpoint_unstall(usbd_device *usbd_dev,
			      struct usb_setup_data *req,
			      uint8_t **buf, uint16_t *len)
{
 8001330:	b508      	push	{r3, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 0);
 8001332:	8889      	ldrh	r1, [r1, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	b2c9      	uxtb	r1, r1
 8001338:	f7ff ff51 	bl	80011de <usbd_ep_stall_set>

	return USBD_REQ_HANDLED;
}
 800133c:	2001      	movs	r0, #1
 800133e:	bd08      	pop	{r3, pc}

08001340 <usb_standard_set_address>:
{
 8001340:	b510      	push	{r4, lr}
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
 8001342:	780b      	ldrb	r3, [r1, #0]
 8001344:	b973      	cbnz	r3, 8001364 <usb_standard_set_address+0x24>
 8001346:	884c      	ldrh	r4, [r1, #2]
 8001348:	2c7f      	cmp	r4, #127	; 0x7f
 800134a:	d80b      	bhi.n	8001364 <usb_standard_set_address+0x24>
	if (usbd_dev->driver->set_address_before_status) {
 800134c:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
	usbd_dev->current_address = req->wValue;
 8001350:	7584      	strb	r4, [r0, #22]
	if (usbd_dev->driver->set_address_before_status) {
 8001352:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8001356:	b11a      	cbz	r2, 8001360 <usb_standard_set_address+0x20>
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
 8001358:	8849      	ldrh	r1, [r1, #2]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	b2c9      	uxtb	r1, r1
 800135e:	4798      	blx	r3
	return USBD_REQ_HANDLED;
 8001360:	2001      	movs	r0, #1
 8001362:	e000      	b.n	8001366 <usb_standard_set_address+0x26>
		return USBD_REQ_NOTSUPP;
 8001364:	2000      	movs	r0, #0
}
 8001366:	bd10      	pop	{r4, pc}

08001368 <usb_standard_set_interface>:
{
 8001368:	b570      	push	{r4, r5, r6, lr}
		&usbd_dev->config[usbd_dev->current_config - 1];
 800136a:	7dc2      	ldrb	r2, [r0, #23]
 800136c:	240d      	movs	r4, #13
{
 800136e:	461d      	mov	r5, r3
		&usbd_dev->config[usbd_dev->current_config - 1];
 8001370:	f06f 030c 	mvn.w	r3, #12
 8001374:	fb14 3302 	smlabb	r3, r4, r2, r3
	const struct usb_config_descriptor *cfx =
 8001378:	6844      	ldr	r4, [r0, #4]
	if (req->wIndex >= cfx->bNumInterfaces) {
 800137a:	888a      	ldrh	r2, [r1, #4]
	const struct usb_config_descriptor *cfx =
 800137c:	441c      	add	r4, r3
	if (req->wIndex >= cfx->bNumInterfaces) {
 800137e:	7923      	ldrb	r3, [r4, #4]
 8001380:	4293      	cmp	r3, r2
 8001382:	d918      	bls.n	80013b6 <usb_standard_set_interface+0x4e>
	iface = &cfx->interface[req->wIndex];
 8001384:	f8d4 3009 	ldr.w	r3, [r4, #9]
	if (req->wValue >= iface->num_altsetting) {
 8001388:	884c      	ldrh	r4, [r1, #2]
	iface = &cfx->interface[req->wIndex];
 800138a:	0112      	lsls	r2, r2, #4
 800138c:	189e      	adds	r6, r3, r2
	if (req->wValue >= iface->num_altsetting) {
 800138e:	7936      	ldrb	r6, [r6, #4]
 8001390:	42a6      	cmp	r6, r4
 8001392:	d910      	bls.n	80013b6 <usb_standard_set_interface+0x4e>
	if (iface->cur_altsetting) {
 8001394:	589a      	ldr	r2, [r3, r2]
 8001396:	b152      	cbz	r2, 80013ae <usb_standard_set_interface+0x46>
		*iface->cur_altsetting = req->wValue;
 8001398:	7014      	strb	r4, [r2, #0]
	if (usbd_dev->user_callback_set_altsetting) {
 800139a:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800139e:	b113      	cbz	r3, 80013a6 <usb_standard_set_interface+0x3e>
			usbd_dev->user_callback_set_altsetting(usbd_dev,
 80013a0:	884a      	ldrh	r2, [r1, #2]
 80013a2:	8889      	ldrh	r1, [r1, #4]
 80013a4:	4798      	blx	r3
	*len = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	802b      	strh	r3, [r5, #0]
 80013aa:	2001      	movs	r0, #1
}
 80013ac:	bd70      	pop	{r4, r5, r6, pc}
	} else if (req->wValue > 0) {
 80013ae:	2c00      	cmp	r4, #0
 80013b0:	d0f3      	beq.n	800139a <usb_standard_set_interface+0x32>
		return USBD_REQ_NOTSUPP;
 80013b2:	4610      	mov	r0, r2
 80013b4:	e7fa      	b.n	80013ac <usb_standard_set_interface+0x44>
 80013b6:	2000      	movs	r0, #0
 80013b8:	e7f8      	b.n	80013ac <usb_standard_set_interface+0x44>

080013ba <usb_standard_get_descriptor>:
{
 80013ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	descr_idx = usb_descriptor_index(req->wValue);
 80013be:	884d      	ldrh	r5, [r1, #2]
{
 80013c0:	461f      	mov	r7, r3
	switch (usb_descriptor_type(req->wValue)) {
 80013c2:	0a2b      	lsrs	r3, r5, #8
 80013c4:	2b02      	cmp	r3, #2
{
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	4616      	mov	r6, r2
	switch (usb_descriptor_type(req->wValue)) {
 80013ca:	d011      	beq.n	80013f0 <usb_standard_get_descriptor+0x36>
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	f000 80e7 	beq.w	80015a0 <usb_standard_get_descriptor+0x1e6>
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	f040 811c 	bne.w	8001610 <usb_standard_get_descriptor+0x256>
		*buf = (uint8_t *) usbd_dev->desc;
 80013d8:	6802      	ldr	r2, [r0, #0]
 80013da:	6032      	str	r2, [r6, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 80013dc:	7812      	ldrb	r2, [r2, #0]
 80013de:	8839      	ldrh	r1, [r7, #0]
 80013e0:	428a      	cmp	r2, r1
 80013e2:	bf28      	it	cs
 80013e4:	460a      	movcs	r2, r1
 80013e6:	803a      	strh	r2, [r7, #0]
		return USBD_REQ_HANDLED;
 80013e8:	2001      	movs	r0, #1
}
 80013ea:	b009      	add	sp, #36	; 0x24
 80013ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80013f0:	b2ed      	uxtb	r5, r5
 80013f2:	eb05 0645 	add.w	r6, r5, r5, lsl #1
		*buf = usbd_dev->ctrl_buf;
 80013f6:	6903      	ldr	r3, [r0, #16]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80013f8:	f8d0 8004 	ldr.w	r8, [r0, #4]
		*buf = usbd_dev->ctrl_buf;
 80013fc:	6013      	str	r3, [r2, #0]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80013fe:	eb05 0686 	add.w	r6, r5, r6, lsl #2
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 8001402:	883c      	ldrh	r4, [r7, #0]
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 8001404:	f818 5006 	ldrb.w	r5, [r8, r6]
		*buf = usbd_dev->ctrl_buf;
 8001408:	9301      	str	r3, [sp, #4]
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 800140a:	42a5      	cmp	r5, r4
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 800140c:	eb08 0306 	add.w	r3, r8, r6
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 8001410:	bf28      	it	cs
 8001412:	4625      	movcs	r5, r4
 8001414:	462a      	mov	r2, r5
 8001416:	4619      	mov	r1, r3
 8001418:	9801      	ldr	r0, [sp, #4]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 800141a:	9302      	str	r3, [sp, #8]
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 800141c:	f000 fe4e 	bl	80020bc <memcpy>
	buf += count;
 8001420:	9b01      	ldr	r3, [sp, #4]
	totallen += cfg->bLength;
 8001422:	f818 6006 	ldrb.w	r6, [r8, r6]
	len -= count;
 8001426:	1b64      	subs	r4, r4, r5
	buf += count;
 8001428:	442b      	add	r3, r5
	len -= count;
 800142a:	b2a4      	uxth	r4, r4
	totallen += cfg->bLength;
 800142c:	2200      	movs	r2, #0
 800142e:	9204      	str	r2, [sp, #16]
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001430:	9a02      	ldr	r2, [sp, #8]
 8001432:	7911      	ldrb	r1, [r2, #4]
 8001434:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8001438:	4291      	cmp	r1, r2
 800143a:	d803      	bhi.n	8001444 <usb_standard_get_descriptor+0x8a>
	memcpy((tmpbuf + 2), &totallen, sizeof(uint16_t));
 800143c:	9b01      	ldr	r3, [sp, #4]
 800143e:	805e      	strh	r6, [r3, #2]
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 8001440:	803d      	strh	r5, [r7, #0]
 8001442:	e7d1      	b.n	80013e8 <usb_standard_get_descriptor+0x2e>
 8001444:	9a04      	ldr	r2, [sp, #16]
 8001446:	0112      	lsls	r2, r2, #4
 8001448:	9207      	str	r2, [sp, #28]
		if (cfg->interface[i].iface_assoc) {
 800144a:	9a02      	ldr	r2, [sp, #8]
 800144c:	9907      	ldr	r1, [sp, #28]
 800144e:	f8d2 2009 	ldr.w	r2, [r2, #9]
 8001452:	440a      	add	r2, r1
 8001454:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8001458:	f1b9 0f00 	cmp.w	r9, #0
 800145c:	d014      	beq.n	8001488 <usb_standard_get_descriptor+0xce>
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
 800145e:	f899 8000 	ldrb.w	r8, [r9]
 8001462:	45a0      	cmp	r8, r4
 8001464:	bf28      	it	cs
 8001466:	46a0      	movcs	r8, r4
 8001468:	4642      	mov	r2, r8
 800146a:	4618      	mov	r0, r3
 800146c:	4649      	mov	r1, r9
 800146e:	f000 fe25 	bl	80020bc <memcpy>
			totallen += assoc->bLength;
 8001472:	f899 2000 	ldrb.w	r2, [r9]
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
 8001476:	4603      	mov	r3, r0
			len -= count;
 8001478:	eba4 0408 	sub.w	r4, r4, r8
			total += count;
 800147c:	4445      	add	r5, r8
			totallen += assoc->bLength;
 800147e:	4416      	add	r6, r2
			buf += count;
 8001480:	4443      	add	r3, r8
			len -= count;
 8001482:	b2a4      	uxth	r4, r4
			total += count;
 8001484:	b2ad      	uxth	r5, r5
			totallen += assoc->bLength;
 8001486:	b2b6      	uxth	r6, r6
{
 8001488:	2200      	movs	r2, #0
 800148a:	9205      	str	r2, [sp, #20]
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 800148c:	9a02      	ldr	r2, [sp, #8]
 800148e:	9907      	ldr	r1, [sp, #28]
 8001490:	f8d2 2009 	ldr.w	r2, [r2, #9]
 8001494:	440a      	add	r2, r1
 8001496:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800149a:	7910      	ldrb	r0, [r2, #4]
 800149c:	4288      	cmp	r0, r1
 800149e:	d802      	bhi.n	80014a6 <usb_standard_get_descriptor+0xec>
 80014a0:	9a04      	ldr	r2, [sp, #16]
 80014a2:	3201      	adds	r2, #1
 80014a4:	e7c3      	b.n	800142e <usb_standard_get_descriptor+0x74>
			const struct usb_interface_descriptor *iface =
 80014a6:	9905      	ldr	r1, [sp, #20]
 80014a8:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 80014ac:	2015      	movs	r0, #21
 80014ae:	fb00 f901 	mul.w	r9, r0, r1
 80014b2:	eb0a 0b09 	add.w	fp, sl, r9
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 80014b6:	f81a 8009 	ldrb.w	r8, [sl, r9]
 80014ba:	45a0      	cmp	r8, r4
 80014bc:	bf28      	it	cs
 80014be:	46a0      	movcs	r8, r4
 80014c0:	4642      	mov	r2, r8
 80014c2:	4659      	mov	r1, fp
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fdf9 	bl	80020bc <memcpy>
			totallen += iface->bLength;
 80014ca:	f81a 2009 	ldrb.w	r2, [sl, r9]
			if (iface->extra) {
 80014ce:	f8db 100d 	ldr.w	r1, [fp, #13]
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 80014d2:	4603      	mov	r3, r0
			len -= count;
 80014d4:	eba4 0408 	sub.w	r4, r4, r8
			total += count;
 80014d8:	4445      	add	r5, r8
			totallen += iface->bLength;
 80014da:	4416      	add	r6, r2
			buf += count;
 80014dc:	4443      	add	r3, r8
			len -= count;
 80014de:	b2a4      	uxth	r4, r4
			total += count;
 80014e0:	b2ad      	uxth	r5, r5
			totallen += iface->bLength;
 80014e2:	b2b6      	uxth	r6, r6
			if (iface->extra) {
 80014e4:	b1a9      	cbz	r1, 8001512 <usb_standard_get_descriptor+0x158>
				       count = MIN(len, iface->extralen));
 80014e6:	f8db 8011 	ldr.w	r8, [fp, #17]
 80014ea:	45a0      	cmp	r8, r4
 80014ec:	bfa8      	it	ge
 80014ee:	46a0      	movge	r8, r4
 80014f0:	fa1f f988 	uxth.w	r9, r8
				memcpy(buf, iface->extra,
 80014f4:	464a      	mov	r2, r9
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 fde0 	bl	80020bc <memcpy>
				totallen += iface->extralen;
 80014fc:	f8db 2011 	ldr.w	r2, [fp, #17]
				memcpy(buf, iface->extra,
 8001500:	4603      	mov	r3, r0
				len -= count;
 8001502:	eba4 0409 	sub.w	r4, r4, r9
				total += count;
 8001506:	444d      	add	r5, r9
				totallen += iface->extralen;
 8001508:	4416      	add	r6, r2
				buf += count;
 800150a:	444b      	add	r3, r9
				len -= count;
 800150c:	b2a4      	uxth	r4, r4
				total += count;
 800150e:	b2ad      	uxth	r5, r5
				totallen += iface->extralen;
 8001510:	b2b6      	uxth	r6, r6
{
 8001512:	f04f 0900 	mov.w	r9, #0
			for (k = 0; k < iface->bNumEndpoints; k++) {
 8001516:	f89b 1004 	ldrb.w	r1, [fp, #4]
 800151a:	fa1f f289 	uxth.w	r2, r9
 800151e:	4291      	cmp	r1, r2
 8001520:	d802      	bhi.n	8001528 <usb_standard_get_descriptor+0x16e>
 8001522:	9a05      	ldr	r2, [sp, #20]
 8001524:	3201      	adds	r2, #1
 8001526:	e7b0      	b.n	800148a <usb_standard_get_descriptor+0xd0>
				    &iface->endpoint[k];
 8001528:	f8db 2009 	ldr.w	r2, [fp, #9]
 800152c:	9206      	str	r2, [sp, #24]
				const struct usb_endpoint_descriptor *ep =
 800152e:	ebc9 1a09 	rsb	sl, r9, r9, lsl #4
 8001532:	4452      	add	r2, sl
 8001534:	9203      	str	r2, [sp, #12]
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 8001536:	9a06      	ldr	r2, [sp, #24]
 8001538:	9903      	ldr	r1, [sp, #12]
 800153a:	f812 800a 	ldrb.w	r8, [r2, sl]
 800153e:	45a0      	cmp	r8, r4
 8001540:	bf28      	it	cs
 8001542:	46a0      	movcs	r8, r4
 8001544:	4642      	mov	r2, r8
 8001546:	4618      	mov	r0, r3
 8001548:	f000 fdb8 	bl	80020bc <memcpy>
				totallen += ep->bLength;
 800154c:	9a06      	ldr	r2, [sp, #24]
 800154e:	f812 200a 	ldrb.w	r2, [r2, sl]
 8001552:	4416      	add	r6, r2
				if (ep->extra) {
 8001554:	9a03      	ldr	r2, [sp, #12]
 8001556:	f8d2 1007 	ldr.w	r1, [r2, #7]
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 800155a:	4603      	mov	r3, r0
				len -= count;
 800155c:	eba4 0408 	sub.w	r4, r4, r8
				total += count;
 8001560:	4445      	add	r5, r8
				buf += count;
 8001562:	4443      	add	r3, r8
				len -= count;
 8001564:	b2a4      	uxth	r4, r4
				total += count;
 8001566:	b2ad      	uxth	r5, r5
				totallen += ep->bLength;
 8001568:	b2b6      	uxth	r6, r6
				if (ep->extra) {
 800156a:	b1b1      	cbz	r1, 800159a <usb_standard_get_descriptor+0x1e0>
					       count = MIN(len, ep->extralen));
 800156c:	f8d2 800b 	ldr.w	r8, [r2, #11]
 8001570:	45a0      	cmp	r8, r4
 8001572:	bfa8      	it	ge
 8001574:	46a0      	movge	r8, r4
 8001576:	fa1f fa88 	uxth.w	sl, r8
					memcpy(buf, ep->extra,
 800157a:	4652      	mov	r2, sl
 800157c:	4618      	mov	r0, r3
 800157e:	f000 fd9d 	bl	80020bc <memcpy>
					totallen += ep->extralen;
 8001582:	9a03      	ldr	r2, [sp, #12]
 8001584:	f8d2 200b 	ldr.w	r2, [r2, #11]
					memcpy(buf, ep->extra,
 8001588:	4603      	mov	r3, r0
					len -= count;
 800158a:	eba4 040a 	sub.w	r4, r4, sl
					total += count;
 800158e:	4455      	add	r5, sl
					totallen += ep->extralen;
 8001590:	4416      	add	r6, r2
					buf += count;
 8001592:	4453      	add	r3, sl
					len -= count;
 8001594:	b2a4      	uxth	r4, r4
					total += count;
 8001596:	b2ad      	uxth	r5, r5
					totallen += ep->extralen;
 8001598:	b2b6      	uxth	r6, r6
 800159a:	f109 0901 	add.w	r9, r9, #1
 800159e:	e7ba      	b.n	8001516 <usb_standard_get_descriptor+0x15c>
		if (descr_idx == 0) {
 80015a0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		sd = (struct usb_string_descriptor *)usbd_dev->ctrl_buf;
 80015a4:	6904      	ldr	r4, [r0, #16]
		if (descr_idx == 0) {
 80015a6:	d10d      	bne.n	80015c4 <usb_standard_get_descriptor+0x20a>
			sd->wData[0] = USB_LANGID_ENGLISH_US;
 80015a8:	2309      	movs	r3, #9
 80015aa:	70a3      	strb	r3, [r4, #2]
 80015ac:	2304      	movs	r3, #4
 80015ae:	70e3      	strb	r3, [r4, #3]
			sd->bLength = sizeof(sd->bLength) +
 80015b0:	7023      	strb	r3, [r4, #0]
			*len = MIN(*len, sd->bLength);
 80015b2:	883b      	ldrh	r3, [r7, #0]
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	bf28      	it	cs
 80015b8:	2304      	movcs	r3, #4
 80015ba:	803b      	strh	r3, [r7, #0]
		sd->bDescriptorType = USB_DT_STRING;
 80015bc:	2303      	movs	r3, #3
 80015be:	7063      	strb	r3, [r4, #1]
		*buf = (uint8_t *)sd;
 80015c0:	6034      	str	r4, [r6, #0]
 80015c2:	e711      	b.n	80013e8 <usb_standard_get_descriptor+0x2e>
			if (!usbd_dev->strings) {
 80015c4:	6883      	ldr	r3, [r0, #8]
 80015c6:	b31b      	cbz	r3, 8001610 <usb_standard_get_descriptor+0x256>
			if (array_idx >= usbd_dev->num_strings) {
 80015c8:	68c2      	ldr	r2, [r0, #12]
			array_idx = descr_idx - 1;
 80015ca:	3d01      	subs	r5, #1
			if (array_idx >= usbd_dev->num_strings) {
 80015cc:	42aa      	cmp	r2, r5
 80015ce:	dd1f      	ble.n	8001610 <usb_standard_get_descriptor+0x256>
			if (req->wIndex != USB_LANGID_ENGLISH_US) {
 80015d0:	8889      	ldrh	r1, [r1, #4]
 80015d2:	f240 4209 	movw	r2, #1033	; 0x409
 80015d6:	4291      	cmp	r1, r2
 80015d8:	d11a      	bne.n	8001610 <usb_standard_get_descriptor+0x256>
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 80015da:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 80015de:	4628      	mov	r0, r5
 80015e0:	f000 fd7f 	bl	80020e2 <strlen>
 80015e4:	3001      	adds	r0, #1
 80015e6:	0040      	lsls	r0, r0, #1
 80015e8:	b2c0      	uxtb	r0, r0
 80015ea:	7020      	strb	r0, [r4, #0]
			*len = MIN(*len, sd->bLength);
 80015ec:	883b      	ldrh	r3, [r7, #0]
 80015ee:	4298      	cmp	r0, r3
 80015f0:	bf28      	it	cs
 80015f2:	4618      	movcs	r0, r3
 80015f4:	8038      	strh	r0, [r7, #0]
			for (i = 0; i < (*len / 2) - 1; i++) {
 80015f6:	4629      	mov	r1, r5
 80015f8:	883b      	ldrh	r3, [r7, #0]
 80015fa:	085b      	lsrs	r3, r3, #1
 80015fc:	1b4a      	subs	r2, r1, r5
 80015fe:	3b01      	subs	r3, #1
 8001600:	4293      	cmp	r3, r2
 8001602:	dddb      	ble.n	80015bc <usb_standard_get_descriptor+0x202>
				sd->wData[i] =
 8001604:	eb04 0242 	add.w	r2, r4, r2, lsl #1
					usbd_dev->strings[array_idx][i];
 8001608:	f811 3b01 	ldrb.w	r3, [r1], #1
				sd->wData[i] =
 800160c:	8053      	strh	r3, [r2, #2]
 800160e:	e7f3      	b.n	80015f8 <usb_standard_get_descriptor+0x23e>
				return USBD_REQ_NOTSUPP;
 8001610:	2000      	movs	r0, #0
 8001612:	e6ea      	b.n	80013ea <usb_standard_get_descriptor+0x30>

08001614 <usb_standard_interface_get_status>:
 8001614:	8819      	ldrh	r1, [r3, #0]
 8001616:	2902      	cmp	r1, #2
 8001618:	bf84      	itt	hi
 800161a:	2102      	movhi	r1, #2
 800161c:	8019      	strhhi	r1, [r3, #0]
 800161e:	6811      	ldr	r1, [r2, #0]
 8001620:	2300      	movs	r3, #0
 8001622:	700b      	strb	r3, [r1, #0]
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	2001      	movs	r0, #1
 8001628:	7053      	strb	r3, [r2, #1]
 800162a:	4770      	bx	lr

0800162c <usbd_register_set_config_callback>:
{
 800162c:	b510      	push	{r4, lr}
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 800162e:	2300      	movs	r3, #0
 8001630:	f100 04c8 	add.w	r4, r0, #200	; 0xc8
		if (usbd_dev->user_callback_set_config[i]) {
 8001634:	f854 2b04 	ldr.w	r2, [r4], #4
 8001638:	b12a      	cbz	r2, 8001646 <usbd_register_set_config_callback+0x1a>
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 800163a:	3301      	adds	r3, #1
 800163c:	2b04      	cmp	r3, #4
 800163e:	d1f9      	bne.n	8001634 <usbd_register_set_config_callback+0x8>
	return -1;
 8001640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001644:	bd10      	pop	{r4, pc}
		usbd_dev->user_callback_set_config[i] = callback;
 8001646:	3332      	adds	r3, #50	; 0x32
 8001648:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		return 0;
 800164c:	4610      	mov	r0, r2
 800164e:	e7f9      	b.n	8001644 <usbd_register_set_config_callback+0x18>

08001650 <_usbd_standard_request_device>:

enum usbd_request_return_codes
_usbd_standard_request_device(usbd_device *usbd_dev,
			      struct usb_setup_data *req, uint8_t **buf,
			      uint16_t *len)
{
 8001650:	b410      	push	{r4}
	enum usbd_request_return_codes (*command)(usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8001652:	784c      	ldrb	r4, [r1, #1]
 8001654:	2c09      	cmp	r4, #9
 8001656:	d813      	bhi.n	8001680 <_usbd_standard_request_device+0x30>
 8001658:	e8df f004 	tbb	[pc, r4]
 800165c:	1212120e 	.word	0x1212120e
 8001660:	120c1012 	.word	0x120c1012
 8001664:	050a      	.short	0x050a
		 * It is only processed at STATUS stage.
		 */
		command = usb_standard_set_address;
		break;
	case USB_REQ_SET_CONFIGURATION:
		command = usb_standard_set_configuration;
 8001666:	4c08      	ldr	r4, [pc, #32]	; (8001688 <_usbd_standard_request_device+0x38>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 8001668:	46a4      	mov	ip, r4
}
 800166a:	f85d 4b04 	ldr.w	r4, [sp], #4
	return command(usbd_dev, req, buf, len);
 800166e:	4760      	bx	ip
		command = usb_standard_get_configuration;
 8001670:	4c06      	ldr	r4, [pc, #24]	; (800168c <_usbd_standard_request_device+0x3c>)
		break;
 8001672:	e7f9      	b.n	8001668 <_usbd_standard_request_device+0x18>
		command = usb_standard_get_descriptor;
 8001674:	4c06      	ldr	r4, [pc, #24]	; (8001690 <_usbd_standard_request_device+0x40>)
		break;
 8001676:	e7f7      	b.n	8001668 <_usbd_standard_request_device+0x18>
		command = usb_standard_device_get_status;
 8001678:	4c06      	ldr	r4, [pc, #24]	; (8001694 <_usbd_standard_request_device+0x44>)
		break;
 800167a:	e7f5      	b.n	8001668 <_usbd_standard_request_device+0x18>
		command = usb_standard_set_address;
 800167c:	4c06      	ldr	r4, [pc, #24]	; (8001698 <_usbd_standard_request_device+0x48>)
 800167e:	e7f3      	b.n	8001668 <_usbd_standard_request_device+0x18>
}
 8001680:	2000      	movs	r0, #0
 8001682:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	080011ef 	.word	0x080011ef
 800168c:	08001285 	.word	0x08001285
 8001690:	080013bb 	.word	0x080013bb
 8001694:	080012df 	.word	0x080012df
 8001698:	08001341 	.word	0x08001341

0800169c <_usbd_standard_request_interface>:

enum usbd_request_return_codes
_usbd_standard_request_interface(usbd_device *usbd_dev,
				 struct usb_setup_data *req, uint8_t **buf,
				 uint16_t *len)
{
 800169c:	b410      	push	{r4}
	enum usbd_request_return_codes (*command)(usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 800169e:	784c      	ldrb	r4, [r1, #1]
 80016a0:	2c0a      	cmp	r4, #10
 80016a2:	d009      	beq.n	80016b8 <_usbd_standard_request_interface+0x1c>
 80016a4:	2c0b      	cmp	r4, #11
 80016a6:	d002      	beq.n	80016ae <_usbd_standard_request_interface+0x12>
 80016a8:	b944      	cbnz	r4, 80016bc <_usbd_standard_request_interface+0x20>
		break;
	case USB_REQ_SET_INTERFACE:
		command = usb_standard_set_interface;
		break;
	case USB_REQ_GET_STATUS:
		command = usb_standard_interface_get_status;
 80016aa:	4c06      	ldr	r4, [pc, #24]	; (80016c4 <_usbd_standard_request_interface+0x28>)
		break;
 80016ac:	e000      	b.n	80016b0 <_usbd_standard_request_interface+0x14>
		command = usb_standard_set_interface;
 80016ae:	4c06      	ldr	r4, [pc, #24]	; (80016c8 <_usbd_standard_request_interface+0x2c>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 80016b0:	46a4      	mov	ip, r4
}
 80016b2:	f85d 4b04 	ldr.w	r4, [sp], #4
	return command(usbd_dev, req, buf, len);
 80016b6:	4760      	bx	ip
		command = usb_standard_get_interface;
 80016b8:	4c04      	ldr	r4, [pc, #16]	; (80016cc <_usbd_standard_request_interface+0x30>)
 80016ba:	e7f9      	b.n	80016b0 <_usbd_standard_request_interface+0x14>
}
 80016bc:	2000      	movs	r0, #0
 80016be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	08001615 	.word	0x08001615
 80016c8:	08001369 	.word	0x08001369
 80016cc:	080012a7 	.word	0x080012a7

080016d0 <_usbd_standard_request_endpoint>:

enum usbd_request_return_codes
_usbd_standard_request_endpoint(usbd_device *usbd_dev,
				struct usb_setup_data *req, uint8_t **buf,
				uint16_t *len)
{
 80016d0:	b410      	push	{r4}
	enum usbd_request_return_codes (*command) (usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 80016d2:	784c      	ldrb	r4, [r1, #1]
 80016d4:	2c01      	cmp	r4, #1
 80016d6:	d006      	beq.n	80016e6 <_usbd_standard_request_endpoint+0x16>
 80016d8:	d312      	bcc.n	8001700 <_usbd_standard_request_endpoint+0x30>
 80016da:	2c03      	cmp	r4, #3
 80016dc:	d008      	beq.n	80016f0 <_usbd_standard_request_endpoint+0x20>
	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
}
 80016de:	2000      	movs	r0, #0
 80016e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016e4:	4770      	bx	lr
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 80016e6:	884c      	ldrh	r4, [r1, #2]
 80016e8:	2c00      	cmp	r4, #0
 80016ea:	d1f8      	bne.n	80016de <_usbd_standard_request_endpoint+0xe>
			command = usb_standard_endpoint_unstall;
 80016ec:	4c05      	ldr	r4, [pc, #20]	; (8001704 <_usbd_standard_request_endpoint+0x34>)
 80016ee:	e003      	b.n	80016f8 <_usbd_standard_request_endpoint+0x28>
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 80016f0:	884c      	ldrh	r4, [r1, #2]
 80016f2:	2c00      	cmp	r4, #0
 80016f4:	d1f3      	bne.n	80016de <_usbd_standard_request_endpoint+0xe>
			command = usb_standard_endpoint_stall;
 80016f6:	4c04      	ldr	r4, [pc, #16]	; (8001708 <_usbd_standard_request_endpoint+0x38>)
	return command(usbd_dev, req, buf, len);
 80016f8:	46a4      	mov	ip, r4
}
 80016fa:	f85d 4b04 	ldr.w	r4, [sp], #4
	return command(usbd_dev, req, buf, len);
 80016fe:	4760      	bx	ip
		command = usb_standard_endpoint_get_status;
 8001700:	4c02      	ldr	r4, [pc, #8]	; (800170c <_usbd_standard_request_endpoint+0x3c>)
 8001702:	e7f9      	b.n	80016f8 <_usbd_standard_request_endpoint+0x28>
 8001704:	08001331 	.word	0x08001331
 8001708:	08001321 	.word	0x08001321
 800170c:	080012f7 	.word	0x080012f7

08001710 <_usbd_standard_request>:

enum usbd_request_return_codes
_usbd_standard_request(usbd_device *usbd_dev, struct usb_setup_data *req,
		       uint8_t **buf, uint16_t *len)
{
 8001710:	b410      	push	{r4}
	/* FIXME: Have class/vendor requests as well. */
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) {
 8001712:	780c      	ldrb	r4, [r1, #0]
 8001714:	f014 0f60 	tst.w	r4, #96	; 0x60
 8001718:	d106      	bne.n	8001728 <_usbd_standard_request+0x18>
		return USBD_REQ_NOTSUPP;
	}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
 800171a:	f004 041f 	and.w	r4, r4, #31
 800171e:	2c01      	cmp	r4, #1
 8001720:	d00a      	beq.n	8001738 <_usbd_standard_request+0x28>
 8001722:	d305      	bcc.n	8001730 <_usbd_standard_request+0x20>
 8001724:	2c02      	cmp	r4, #2
 8001726:	d00b      	beq.n	8001740 <_usbd_standard_request+0x30>
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
	default:
		return USBD_REQ_NOTSUPP;
	}
}
 8001728:	2000      	movs	r0, #0
 800172a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	f85d 4b04 	ldr.w	r4, [sp], #4
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
 8001734:	f7ff bf8c 	b.w	8001650 <_usbd_standard_request_device>
}
 8001738:	f85d 4b04 	ldr.w	r4, [sp], #4
		return _usbd_standard_request_interface(usbd_dev, req,
 800173c:	f7ff bfae 	b.w	800169c <_usbd_standard_request_interface>
}
 8001740:	f85d 4b04 	ldr.w	r4, [sp], #4
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
 8001744:	f7ff bfc4 	b.w	80016d0 <_usbd_standard_request_endpoint>

08001748 <stall_transaction>:
 * According to the USB 2.0 specification, section 8.5.3, when a control
 * transfer is stalled, the pipe becomes idle. We provide one utility to stall
 * a transaction to reduce boilerplate code.
 */
static void stall_transaction(usbd_device *usbd_dev)
{
 8001748:	b510      	push	{r4, lr}
	usbd_ep_stall_set(usbd_dev, 0, 1);
 800174a:	2201      	movs	r2, #1
{
 800174c:	4604      	mov	r4, r0
	usbd_ep_stall_set(usbd_dev, 0, 1);
 800174e:	2100      	movs	r1, #0
 8001750:	f7ff fd45 	bl	80011de <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8001754:	2300      	movs	r3, #0
 8001756:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800175a:	bd10      	pop	{r4, pc}

0800175c <usb_control_recv_chunk>:
		usbd_dev->control_state.ctrl_buf = NULL;
	}
}

static int usb_control_recv_chunk(usbd_device *usbd_dev)
{
 800175c:	b570      	push	{r4, r5, r6, lr}
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 800175e:	6803      	ldr	r3, [r0, #0]
 8001760:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8001762:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 8001764:	79db      	ldrb	r3, [r3, #7]
			usbd_dev->control_state.req.wLength -
			usbd_dev->control_state.ctrl_len);
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
				       usbd_dev->control_state.ctrl_buf +
 8001766:	6b81      	ldr	r1, [r0, #56]	; 0x38
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8001768:	1aa4      	subs	r4, r4, r2
 800176a:	429c      	cmp	r4, r3
 800176c:	bfa8      	it	ge
 800176e:	461c      	movge	r4, r3
 8001770:	b2a6      	uxth	r6, r4
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 8001772:	440a      	add	r2, r1
 8001774:	4633      	mov	r3, r6
 8001776:	2100      	movs	r1, #0
{
 8001778:	4605      	mov	r5, r0
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 800177a:	f7ff fd28 	bl	80011ce <usbd_ep_read_packet>
				       usbd_dev->control_state.ctrl_len,
				       packetsize);

	if (size != packetsize) {
 800177e:	4286      	cmp	r6, r0
 8001780:	d005      	beq.n	800178e <usb_control_recv_chunk+0x32>
		stall_transaction(usbd_dev);
 8001782:	4628      	mov	r0, r5
 8001784:	f7ff ffe0 	bl	8001748 <stall_transaction>
		return -1;
 8001788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	usbd_dev->control_state.ctrl_len += size;

	return packetsize;
}
 800178c:	bd70      	pop	{r4, r5, r6, pc}
	usbd_dev->control_state.ctrl_len += size;
 800178e:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 8001790:	441e      	add	r6, r3
 8001792:	87ae      	strh	r6, [r5, #60]	; 0x3c
 8001794:	b2a0      	uxth	r0, r4
	return packetsize;
 8001796:	e7f9      	b.n	800178c <usb_control_recv_chunk+0x30>

08001798 <usb_control_send_chunk>:
{
 8001798:	b510      	push	{r4, lr}
	if (usbd_dev->desc->bMaxPacketSize0 <
 800179a:	6803      	ldr	r3, [r0, #0]
 800179c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800179e:	79d9      	ldrb	r1, [r3, #7]
			usbd_dev->control_state.ctrl_len) {
 80017a0:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
	if (usbd_dev->desc->bMaxPacketSize0 <
 80017a2:	4299      	cmp	r1, r3
{
 80017a4:	4604      	mov	r4, r0
	if (usbd_dev->desc->bMaxPacketSize0 <
 80017a6:	d20f      	bcs.n	80017c8 <usb_control_send_chunk+0x30>
		usbd_ep_write_packet(usbd_dev, 0,
 80017a8:	460b      	mov	r3, r1
 80017aa:	2100      	movs	r1, #0
 80017ac:	f7ff fd07 	bl	80011be <usbd_ep_write_packet>
		usbd_dev->control_state.state = DATA_IN;
 80017b0:	2302      	movs	r3, #2
 80017b2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			usbd_dev->desc->bMaxPacketSize0;
 80017b6:	6823      	ldr	r3, [r4, #0]
		usbd_dev->control_state.ctrl_buf +=
 80017b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
			usbd_dev->desc->bMaxPacketSize0;
 80017ba:	79d9      	ldrb	r1, [r3, #7]
		usbd_dev->control_state.ctrl_len -=
 80017bc:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf +=
 80017be:	440a      	add	r2, r1
		usbd_dev->control_state.ctrl_len -=
 80017c0:	1a5b      	subs	r3, r3, r1
		usbd_dev->control_state.ctrl_buf +=
 80017c2:	63a2      	str	r2, [r4, #56]	; 0x38
		usbd_dev->control_state.ctrl_len -=
 80017c4:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 80017c6:	bd10      	pop	{r4, pc}
		usbd_ep_write_packet(usbd_dev, 0,
 80017c8:	2100      	movs	r1, #0
 80017ca:	f7ff fcf8 	bl	80011be <usbd_ep_write_packet>
			DATA_IN : LAST_DATA_IN;
 80017ce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	bf0c      	ite	eq
 80017d6:	2303      	moveq	r3, #3
 80017d8:	2302      	movne	r3, #2
		usbd_dev->control_state.state =
 80017da:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.needs_zlp = false;
 80017de:	2300      	movs	r3, #0
 80017e0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		usbd_dev->control_state.ctrl_len = 0;
 80017e4:	87a3      	strh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf = NULL;
 80017e6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80017e8:	e7ed      	b.n	80017c6 <usb_control_send_chunk+0x2e>

080017ea <usb_control_request_dispatch>:

static enum usbd_request_return_codes
usb_control_request_dispatch(usbd_device *usbd_dev,
			     struct usb_setup_data *req)
{
 80017ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017ee:	4604      	mov	r4, r0
 80017f0:	460e      	mov	r6, r1
	int i, result = 0;
	struct user_control_callback *cb = usbd_dev->user_control_callback;
 80017f2:	f100 0548 	add.w	r5, r0, #72	; 0x48
 80017f6:	f100 0b68 	add.w	fp, r0, #104	; 0x68
 80017fa:	f100 0738 	add.w	r7, r0, #56	; 0x38
 80017fe:	f100 083c 	add.w	r8, r0, #60	; 0x3c
		if (cb[i].cb == NULL) {
			break;
		}

		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
			result = cb[i].cb(usbd_dev, req,
 8001802:	f100 0a40 	add.w	sl, r0, #64	; 0x40
		if (cb[i].cb == NULL) {
 8001806:	f8d5 9000 	ldr.w	r9, [r5]
 800180a:	f1b9 0f00 	cmp.w	r9, #0
 800180e:	d008      	beq.n	8001822 <usb_control_request_dispatch+0x38>
		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
 8001810:	7833      	ldrb	r3, [r6, #0]
 8001812:	7969      	ldrb	r1, [r5, #5]
 8001814:	792a      	ldrb	r2, [r5, #4]
 8001816:	400b      	ands	r3, r1
 8001818:	429a      	cmp	r2, r3
 800181a:	d00b      	beq.n	8001834 <usb_control_request_dispatch+0x4a>
 800181c:	3508      	adds	r5, #8
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 800181e:	455d      	cmp	r5, fp
 8001820:	d1f1      	bne.n	8001806 <usb_control_request_dispatch+0x1c>
			}
		}
	}

	/* Try standard request if not already handled. */
	return _usbd_standard_request(usbd_dev, req,
 8001822:	4643      	mov	r3, r8
 8001824:	463a      	mov	r2, r7
 8001826:	4631      	mov	r1, r6
 8001828:	4620      	mov	r0, r4
				      &(usbd_dev->control_state.ctrl_buf),
				      &(usbd_dev->control_state.ctrl_len));
}
 800182a:	b003      	add	sp, #12
 800182c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return _usbd_standard_request(usbd_dev, req,
 8001830:	f7ff bf6e 	b.w	8001710 <_usbd_standard_request>
			result = cb[i].cb(usbd_dev, req,
 8001834:	f8cd a000 	str.w	sl, [sp]
 8001838:	4643      	mov	r3, r8
 800183a:	463a      	mov	r2, r7
 800183c:	4631      	mov	r1, r6
 800183e:	4620      	mov	r0, r4
 8001840:	47c8      	blx	r9
			if (result == USBD_REQ_HANDLED ||
 8001842:	2801      	cmp	r0, #1
 8001844:	d8ea      	bhi.n	800181c <usb_control_request_dispatch+0x32>
}
 8001846:	b003      	add	sp, #12
 8001848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800184c <usb_control_setup_read>:

/* Handle commands and read requests. */
static void usb_control_setup_read(usbd_device *usbd_dev,
		struct usb_setup_data *req)
{
 800184c:	b538      	push	{r3, r4, r5, lr}
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 800184e:	6903      	ldr	r3, [r0, #16]
 8001850:	6383      	str	r3, [r0, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = req->wLength;
 8001852:	798b      	ldrb	r3, [r1, #6]
 8001854:	79ca      	ldrb	r2, [r1, #7]
 8001856:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800185a:	8783      	strh	r3, [r0, #60]	; 0x3c
{
 800185c:	4604      	mov	r4, r0
 800185e:	460d      	mov	r5, r1

	if (usb_control_request_dispatch(usbd_dev, req)) {
 8001860:	f7ff ffc3 	bl	80017ea <usb_control_request_dispatch>
 8001864:	b310      	cbz	r0, 80018ac <usb_control_setup_read+0x60>
		if (req->wLength) {
 8001866:	88eb      	ldrh	r3, [r5, #6]
 8001868:	b1bb      	cbz	r3, 800189a <usb_control_setup_read+0x4e>
			usbd_dev->control_state.needs_zlp =
				needs_zlp(usbd_dev->control_state.ctrl_len,
 800186a:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800186c:	6821      	ldr	r1, [r4, #0]
	if (len < wLength) {
 800186e:	4293      	cmp	r3, r2
				needs_zlp(usbd_dev->control_state.ctrl_len,
 8001870:	79c9      	ldrb	r1, [r1, #7]
	if (len < wLength) {
 8001872:	d90e      	bls.n	8001892 <usb_control_setup_read+0x46>
		if (len && (len % ep_size == 0)) {
 8001874:	b17a      	cbz	r2, 8001896 <usb_control_setup_read+0x4a>
 8001876:	fb92 f3f1 	sdiv	r3, r2, r1
 800187a:	fb01 2313 	mls	r3, r1, r3, r2
 800187e:	fab3 f383 	clz	r3, r3
 8001882:	095b      	lsrs	r3, r3, #5
			usbd_dev->control_state.needs_zlp =
 8001884:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
					req->wLength,
					usbd_dev->desc->bMaxPacketSize0);
			/* Go to data out stage if handled. */
			usb_control_send_chunk(usbd_dev);
 8001888:	4620      	mov	r0, r4
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
	}
}
 800188a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			usb_control_send_chunk(usbd_dev);
 800188e:	f7ff bf83 	b.w	8001798 <usb_control_send_chunk>
	return false;
 8001892:	2300      	movs	r3, #0
 8001894:	e7f6      	b.n	8001884 <usb_control_setup_read+0x38>
 8001896:	4613      	mov	r3, r2
 8001898:	e7f4      	b.n	8001884 <usb_control_setup_read+0x38>
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 800189a:	461a      	mov	r2, r3
 800189c:	4619      	mov	r1, r3
 800189e:	4620      	mov	r0, r4
 80018a0:	f7ff fc8d 	bl	80011be <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 80018a4:	2304      	movs	r3, #4
 80018a6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80018aa:	bd38      	pop	{r3, r4, r5, pc}
		stall_transaction(usbd_dev);
 80018ac:	4620      	mov	r0, r4
}
 80018ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		stall_transaction(usbd_dev);
 80018b2:	f7ff bf49 	b.w	8001748 <stall_transaction>

080018b6 <usbd_register_control_callback>:
{
 80018b6:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 80018b8:	2600      	movs	r6, #0
 80018ba:	eb00 05c6 	add.w	r5, r0, r6, lsl #3
		if (usbd_dev->user_control_callback[i].cb) {
 80018be:	6cac      	ldr	r4, [r5, #72]	; 0x48
 80018c0:	b12c      	cbz	r4, 80018ce <usbd_register_control_callback+0x18>
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 80018c2:	3601      	adds	r6, #1
 80018c4:	2e04      	cmp	r6, #4
 80018c6:	d1f8      	bne.n	80018ba <usbd_register_control_callback+0x4>
	return -1;
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80018cc:	bd70      	pop	{r4, r5, r6, pc}
		usbd_dev->user_control_callback[i].type = type;
 80018ce:	f885 104c 	strb.w	r1, [r5, #76]	; 0x4c
		usbd_dev->user_control_callback[i].type_mask = type_mask;
 80018d2:	f885 204d 	strb.w	r2, [r5, #77]	; 0x4d
		usbd_dev->user_control_callback[i].cb = callback;
 80018d6:	64ab      	str	r3, [r5, #72]	; 0x48
		return 0;
 80018d8:	4620      	mov	r0, r4
 80018da:	e7f7      	b.n	80018cc <usbd_register_control_callback+0x16>

080018dc <_usbd_control_setup>:

/* Do not appear to belong to the API, so are omitted from docs */
/**@}*/

void _usbd_control_setup(usbd_device *usbd_dev, uint8_t ea)
{
 80018dc:	b570      	push	{r4, r5, r6, lr}
	struct usb_setup_data *req = &usbd_dev->control_state.req;
 80018de:	f100 0630 	add.w	r6, r0, #48	; 0x30
	(void)ea;

	usbd_dev->control_state.complete = NULL;
 80018e2:	2500      	movs	r5, #0
 80018e4:	6405      	str	r5, [r0, #64]	; 0x40

	//usbd_ep_nak_set(usbd_dev, 0, 1);

	if (usbd_ep_read_packet(usbd_dev, 0, req, 8) != 8) {
 80018e6:	2308      	movs	r3, #8
 80018e8:	4632      	mov	r2, r6
 80018ea:	4629      	mov	r1, r5
{
 80018ec:	4604      	mov	r4, r0
	if (usbd_ep_read_packet(usbd_dev, 0, req, 8) != 8) {
 80018ee:	f7ff fc6e 	bl	80011ce <usbd_ep_read_packet>
 80018f2:	2808      	cmp	r0, #8
 80018f4:	d004      	beq.n	8001900 <_usbd_control_setup+0x24>
		stall_transaction(usbd_dev);
 80018f6:	4620      	mov	r0, r4
	} else if (req->bmRequestType & 0x80) {
		usb_control_setup_read(usbd_dev, req);
	} else {
		usb_control_setup_write(usbd_dev, req);
	}
}
 80018f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		stall_transaction(usbd_dev);
 80018fc:	f7ff bf24 	b.w	8001748 <stall_transaction>
	if (req->wLength == 0) {
 8001900:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001902:	b92b      	cbnz	r3, 8001910 <_usbd_control_setup+0x34>
		usb_control_setup_read(usbd_dev, req);
 8001904:	4631      	mov	r1, r6
 8001906:	4620      	mov	r0, r4
}
 8001908:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_control_setup_read(usbd_dev, req);
 800190c:	f7ff bf9e 	b.w	800184c <usb_control_setup_read>
	} else if (req->bmRequestType & 0x80) {
 8001910:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 8001914:	2a00      	cmp	r2, #0
 8001916:	dbf5      	blt.n	8001904 <_usbd_control_setup+0x28>
	if (req->wLength > usbd_dev->ctrl_buf_len) {
 8001918:	8aa2      	ldrh	r2, [r4, #20]
 800191a:	429a      	cmp	r2, r3
 800191c:	d3eb      	bcc.n	80018f6 <_usbd_control_setup+0x1a>
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 800191e:	6922      	ldr	r2, [r4, #16]
 8001920:	63a2      	str	r2, [r4, #56]	; 0x38
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 8001922:	6822      	ldr	r2, [r4, #0]
	usbd_dev->control_state.ctrl_len = 0;
 8001924:	87a5      	strh	r5, [r4, #60]	; 0x3c
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 8001926:	79d2      	ldrb	r2, [r2, #7]
 8001928:	429a      	cmp	r2, r3
		usbd_dev->control_state.state = DATA_OUT;
 800192a:	bf34      	ite	cc
 800192c:	2305      	movcc	r3, #5
		usbd_dev->control_state.state = LAST_DATA_OUT;
 800192e:	2306      	movcs	r3, #6
 8001930:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8001934:	bd70      	pop	{r4, r5, r6, pc}

08001936 <_usbd_control_out>:

void _usbd_control_out(usbd_device *usbd_dev, uint8_t ea)
{
	(void)ea;

	switch (usbd_dev->control_state.state) {
 8001936:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800193a:	2b06      	cmp	r3, #6
{
 800193c:	b510      	push	{r4, lr}
 800193e:	4604      	mov	r4, r0
	switch (usbd_dev->control_state.state) {
 8001940:	d012      	beq.n	8001968 <_usbd_control_out+0x32>
 8001942:	2b07      	cmp	r3, #7
 8001944:	d027      	beq.n	8001996 <_usbd_control_out+0x60>
 8001946:	2b05      	cmp	r3, #5
 8001948:	d121      	bne.n	800198e <_usbd_control_out+0x58>
	case DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 800194a:	f7ff ff07 	bl	800175c <usb_control_recv_chunk>
 800194e:	2800      	cmp	r0, #0
 8001950:	db09      	blt.n	8001966 <_usbd_control_out+0x30>
			break;
		}
		if ((usbd_dev->control_state.req.wLength -
					usbd_dev->control_state.ctrl_len) <=
 8001952:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
		if ((usbd_dev->control_state.req.wLength -
 8001954:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001956:	1a9b      	subs	r3, r3, r2
					usbd_dev->desc->bMaxPacketSize0) {
 8001958:	6822      	ldr	r2, [r4, #0]
 800195a:	79d2      	ldrb	r2, [r2, #7]
		if ((usbd_dev->control_state.req.wLength -
 800195c:	4293      	cmp	r3, r2
 800195e:	dc02      	bgt.n	8001966 <_usbd_control_out+0x30>
			usbd_dev->control_state.state = LAST_DATA_OUT;
 8001960:	2306      	movs	r3, #6
		 */
		if (usb_control_request_dispatch(usbd_dev,
					&(usbd_dev->control_state.req))) {
			/* Go to status stage on success. */
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
			usbd_dev->control_state.state = STATUS_IN;
 8001962:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.complete = NULL;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8001966:	bd10      	pop	{r4, pc}
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 8001968:	f7ff fef8 	bl	800175c <usb_control_recv_chunk>
 800196c:	2800      	cmp	r0, #0
 800196e:	dbfa      	blt.n	8001966 <_usbd_control_out+0x30>
		if (usb_control_request_dispatch(usbd_dev,
 8001970:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8001974:	4620      	mov	r0, r4
 8001976:	f7ff ff38 	bl	80017ea <usb_control_request_dispatch>
 800197a:	b138      	cbz	r0, 800198c <_usbd_control_out+0x56>
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 800197c:	2300      	movs	r3, #0
 800197e:	461a      	mov	r2, r3
 8001980:	4619      	mov	r1, r3
 8001982:	4620      	mov	r0, r4
 8001984:	f7ff fc1b 	bl	80011be <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8001988:	2304      	movs	r3, #4
 800198a:	e7ea      	b.n	8001962 <_usbd_control_out+0x2c>
			stall_transaction(usbd_dev);
 800198c:	4620      	mov	r0, r4
}
 800198e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		stall_transaction(usbd_dev);
 8001992:	f7ff bed9 	b.w	8001748 <stall_transaction>
		usbd_ep_read_packet(usbd_dev, 0, NULL, 0);
 8001996:	2300      	movs	r3, #0
 8001998:	461a      	mov	r2, r3
 800199a:	4619      	mov	r1, r3
 800199c:	f7ff fc17 	bl	80011ce <usbd_ep_read_packet>
		usbd_dev->control_state.state = IDLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (usbd_dev->control_state.complete) {
 80019a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019a8:	b11b      	cbz	r3, 80019b2 <_usbd_control_out+0x7c>
			usbd_dev->control_state.complete(usbd_dev,
 80019aa:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80019ae:	4620      	mov	r0, r4
 80019b0:	4798      	blx	r3
		usbd_dev->control_state.complete = NULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 80019b6:	e7d6      	b.n	8001966 <_usbd_control_out+0x30>

080019b8 <_usbd_control_in>:
void _usbd_control_in(usbd_device *usbd_dev, uint8_t ea)
{
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
 80019b8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80019bc:	2b03      	cmp	r3, #3
{
 80019be:	b510      	push	{r4, lr}
 80019c0:	4604      	mov	r4, r0
	switch (usbd_dev->control_state.state) {
 80019c2:	d007      	beq.n	80019d4 <_usbd_control_in+0x1c>
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d009      	beq.n	80019dc <_usbd_control_in+0x24>
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d11c      	bne.n	8001a06 <_usbd_control_in+0x4e>
		usbd_dev->control_state.state = IDLE;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 80019cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_control_send_chunk(usbd_dev);
 80019d0:	f7ff bee2 	b.w	8001798 <usb_control_send_chunk>
		usbd_dev->control_state.state = STATUS_OUT;
 80019d4:	2307      	movs	r3, #7
		usbd_dev->control_state.state = IDLE;
 80019d6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80019da:	bd10      	pop	{r4, pc}
		if (usbd_dev->control_state.complete) {
 80019dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80019de:	b113      	cbz	r3, 80019e6 <_usbd_control_in+0x2e>
			usbd_dev->control_state.complete(usbd_dev,
 80019e0:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80019e4:	4798      	blx	r3
		if ((req->bmRequestType == 0) &&
 80019e6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80019ea:	b953      	cbnz	r3, 8001a02 <_usbd_control_in+0x4a>
 80019ec:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80019f0:	2b05      	cmp	r3, #5
 80019f2:	d106      	bne.n	8001a02 <_usbd_control_in+0x4a>
			usbd_dev->driver->set_address(usbd_dev, req->wValue);
 80019f4:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 80019f6:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 80019fa:	b2c9      	uxtb	r1, r1
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	4620      	mov	r0, r4
 8001a00:	4798      	blx	r3
		usbd_dev->control_state.state = IDLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e7e7      	b.n	80019d6 <_usbd_control_in+0x1e>
}
 8001a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		stall_transaction(usbd_dev);
 8001a0a:	f7ff be9d 	b.w	8001748 <stall_transaction>
	...

08001a10 <stm32f107_usbd_init>:
	.rx_fifo_size = RX_FIFO_SIZE,
};

/** Initialize the USB device controller hardware of the STM32. */
static usbd_device *stm32f107_usbd_init(void)
{
 8001a10:	b508      	push	{r3, lr}
	rcc_periph_clock_enable(RCC_OTGFS);
 8001a12:	f240 6087 	movw	r0, #1671	; 0x687
 8001a16:	f7ff faef 	bl	8000ff8 <rcc_periph_clock_enable>
	OTG_FS_GUSBCFG |= OTG_GUSBCFG_PHYSEL;
 8001a1a:	4a25      	ldr	r2, [pc, #148]	; (8001ab0 <stm32f107_usbd_init+0xa0>)
 8001a1c:	6813      	ldr	r3, [r2, #0]
 8001a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a22:	6013      	str	r3, [r2, #0]

	/* Wait for AHB idle. */
	while (!(OTG_FS_GRSTCTL & OTG_GRSTCTL_AHBIDL));
 8001a24:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <stm32f107_usbd_init+0xa4>)
 8001a26:	4619      	mov	r1, r3
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	2a00      	cmp	r2, #0
 8001a2c:	dafc      	bge.n	8001a28 <stm32f107_usbd_init+0x18>
	/* Do core soft reset. */
	OTG_FS_GRSTCTL |= OTG_GRSTCTL_CSRST;
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	f042 0201 	orr.w	r2, r2, #1
 8001a34:	601a      	str	r2, [r3, #0]
	while (OTG_FS_GRSTCTL & OTG_GRSTCTL_CSRST);
 8001a36:	680b      	ldr	r3, [r1, #0]
 8001a38:	07db      	lsls	r3, r3, #31
 8001a3a:	d4fc      	bmi.n	8001a36 <stm32f107_usbd_init+0x26>

	if (OTG_FS_CID >= OTG_CID_HAS_VBDEN) {
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <stm32f107_usbd_init+0xa8>)

	/* Restart the PHY clock. */
	OTG_FS_PCGCCTL = 0;

	OTG_FS_GRXFSIZ = stm32f107_usb_driver.rx_fifo_size;
	usbd_dev.fifo_mem_top = stm32f107_usb_driver.rx_fifo_size;
 8001a3e:	481f      	ldr	r0, [pc, #124]	; (8001abc <stm32f107_usbd_init+0xac>)
	if (OTG_FS_CID >= OTG_CID_HAS_VBDEN) {
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a46:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <stm32f107_usbd_init+0xb0>)
		OTG_FS_GCCFG |= OTG_GCCFG_VBDEN | OTG_GCCFG_PWRDWN;
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	bf2c      	ite	cs
 8001a4c:	f442 1204 	orrcs.w	r2, r2, #2162688	; 0x210000
		OTG_FS_GCCFG |= OTG_GCCFG_VBUSBSEN | OTG_GCCFG_PWRDWN;
 8001a50:	f442 2210 	orrcc.w	r2, r2, #589824	; 0x90000
 8001a54:	601a      	str	r2, [r3, #0]
	OTG_FS_DCTL &= ~OTG_DCTL_SDIS;
 8001a56:	4a1b      	ldr	r2, [pc, #108]	; (8001ac4 <stm32f107_usbd_init+0xb4>)
 8001a58:	6813      	ldr	r3, [r2, #0]
 8001a5a:	f023 0302 	bic.w	r3, r3, #2
 8001a5e:	6013      	str	r3, [r2, #0]
	OTG_FS_GUSBCFG |= OTG_GUSBCFG_FDMOD | OTG_GUSBCFG_TRDT_MASK;
 8001a60:	f5a2 62ff 	sub.w	r2, r2, #2040	; 0x7f8
 8001a64:	6813      	ldr	r3, [r2, #0]
 8001a66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a6a:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8001a6e:	6013      	str	r3, [r2, #0]
	OTG_FS_GINTSTS = OTG_GINTSTS_MMIS;
 8001a70:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <stm32f107_usbd_init+0xb8>)
 8001a72:	2202      	movs	r2, #2
 8001a74:	601a      	str	r2, [r3, #0]
	OTG_FS_DCFG |= OTG_DCFG_DSPD;
 8001a76:	4a15      	ldr	r2, [pc, #84]	; (8001acc <stm32f107_usbd_init+0xbc>)
 8001a78:	6813      	ldr	r3, [r2, #0]
 8001a7a:	f043 0303 	orr.w	r3, r3, #3
 8001a7e:	6013      	str	r3, [r2, #0]
	OTG_FS_PCGCCTL = 0;
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <stm32f107_usbd_init+0xc0>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
	OTG_FS_GRXFSIZ = stm32f107_usb_driver.rx_fifo_size;
 8001a86:	4a13      	ldr	r2, [pc, #76]	; (8001ad4 <stm32f107_usbd_init+0xc4>)
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	6013      	str	r3, [r2, #0]
	usbd_dev.fifo_mem_top = stm32f107_usb_driver.rx_fifo_size;
 8001a8c:	f8a0 30e0 	strh.w	r3, [r0, #224]	; 0xe0

	/* Unmask interrupts for TX and RX. */
	OTG_FS_GAHBCFG |= OTG_GAHBCFG_GINT;
 8001a90:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	f842 3c1c 	str.w	r3, [r2, #-28]
	OTG_FS_GINTMSK = OTG_GINTMSK_ENUMDNEM |
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <stm32f107_usbd_init+0xc8>)
 8001a9e:	4a0f      	ldr	r2, [pc, #60]	; (8001adc <stm32f107_usbd_init+0xcc>)
 8001aa0:	601a      	str	r2, [r3, #0]
			 OTG_GINTMSK_RXFLVLM |
			 OTG_GINTMSK_IEPINT |
			 OTG_GINTMSK_USBSUSPM |
			 OTG_GINTMSK_WUIM;
	OTG_FS_DAINTMSK = 0xF;
 8001aa2:	220f      	movs	r2, #15
 8001aa4:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
	OTG_FS_DIEPMSK = OTG_DIEPMSK_XFRCM;
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f8c3 27f8 	str.w	r2, [r3, #2040]	; 0x7f8

	return &usbd_dev;
}
 8001aae:	bd08      	pop	{r3, pc}
 8001ab0:	5000000c 	.word	0x5000000c
 8001ab4:	50000010 	.word	0x50000010
 8001ab8:	5000003c 	.word	0x5000003c
 8001abc:	2000004c 	.word	0x2000004c
 8001ac0:	50000038 	.word	0x50000038
 8001ac4:	50000804 	.word	0x50000804
 8001ac8:	50000014 	.word	0x50000014
 8001acc:	50000800 	.word	0x50000800
 8001ad0:	50000e00 	.word	0x50000e00
 8001ad4:	50000024 	.word	0x50000024
 8001ad8:	50000018 	.word	0x50000018
 8001adc:	80042810 	.word	0x80042810

08001ae0 <blocking_handler>:
	}

}

void blocking_handler(void)
{
 8001ae0:	e7fe      	b.n	8001ae0 <blocking_handler>

08001ae2 <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 8001ae2:	4770      	bx	lr

08001ae4 <reset_handler>:
{
 8001ae4:	4c1a      	ldr	r4, [pc, #104]	; (8001b50 <reset_handler+0x6c>)
 8001ae6:	491b      	ldr	r1, [pc, #108]	; (8001b54 <reset_handler+0x70>)
	for (src = &_data_loadaddr, dest = &_data;
 8001ae8:	481b      	ldr	r0, [pc, #108]	; (8001b58 <reset_handler+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	1853      	adds	r3, r2, r1
 8001aee:	4283      	cmp	r3, r0
 8001af0:	d31a      	bcc.n	8001b28 <reset_handler+0x44>
	while (dest < &_ebss) {
 8001af2:	4a1a      	ldr	r2, [pc, #104]	; (8001b5c <reset_handler+0x78>)
		*dest++ = 0;
 8001af4:	2100      	movs	r1, #0
	while (dest < &_ebss) {
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d31a      	bcc.n	8001b30 <reset_handler+0x4c>
	SCB_CCR |= SCB_CCR_STKALIGN;
 8001afa:	4a19      	ldr	r2, [pc, #100]	; (8001b60 <reset_handler+0x7c>)
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001afc:	4c19      	ldr	r4, [pc, #100]	; (8001b64 <reset_handler+0x80>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 8001afe:	6813      	ldr	r3, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001b00:	4d19      	ldr	r5, [pc, #100]	; (8001b68 <reset_handler+0x84>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 8001b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b06:	6013      	str	r3, [r2, #0]
#include <libopencm3/cm3/scb.h>

static void pre_main(void)
{
	/* Enable access to Floating-Point coprocessor. */
	SCB_CPACR |= SCB_CPACR_FULL * (SCB_CPACR_CP10 | SCB_CPACR_CP11);
 8001b08:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001b0a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b0e:	6753      	str	r3, [r2, #116]	; 0x74
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001b10:	42ac      	cmp	r4, r5
 8001b12:	d310      	bcc.n	8001b36 <reset_handler+0x52>
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8001b14:	4c15      	ldr	r4, [pc, #84]	; (8001b6c <reset_handler+0x88>)
 8001b16:	4d16      	ldr	r5, [pc, #88]	; (8001b70 <reset_handler+0x8c>)
 8001b18:	42ac      	cmp	r4, r5
 8001b1a:	d310      	bcc.n	8001b3e <reset_handler+0x5a>
	main();
 8001b1c:	f7fe fd00 	bl	8000520 <main>
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8001b20:	4c14      	ldr	r4, [pc, #80]	; (8001b74 <reset_handler+0x90>)
 8001b22:	4d15      	ldr	r5, [pc, #84]	; (8001b78 <reset_handler+0x94>)
 8001b24:	42ac      	cmp	r4, r5
 8001b26:	d30e      	bcc.n	8001b46 <reset_handler+0x62>
		*dest = *src;
 8001b28:	5913      	ldr	r3, [r2, r4]
 8001b2a:	5053      	str	r3, [r2, r1]
 8001b2c:	3204      	adds	r2, #4
 8001b2e:	e7dd      	b.n	8001aec <reset_handler+0x8>
		*dest++ = 0;
 8001b30:	6019      	str	r1, [r3, #0]
 8001b32:	3304      	adds	r3, #4
 8001b34:	e7df      	b.n	8001af6 <reset_handler+0x12>
		(*fp)();
 8001b36:	f854 3b04 	ldr.w	r3, [r4], #4
 8001b3a:	4798      	blx	r3
 8001b3c:	e7e8      	b.n	8001b10 <reset_handler+0x2c>
		(*fp)();
 8001b3e:	f854 3b04 	ldr.w	r3, [r4], #4
 8001b42:	4798      	blx	r3
 8001b44:	e7e8      	b.n	8001b18 <reset_handler+0x34>
		(*fp)();
 8001b46:	f854 3b04 	ldr.w	r3, [r4], #4
 8001b4a:	4798      	blx	r3
 8001b4c:	e7ea      	b.n	8001b24 <reset_handler+0x40>
 8001b4e:	bf00      	nop
 8001b50:	08002254 	.word	0x08002254
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000028 	.word	0x20000028
 8001b5c:	20000280 	.word	0x20000280
 8001b60:	e000ed14 	.word	0xe000ed14
 8001b64:	08002254 	.word	0x08002254
 8001b68:	08002254 	.word	0x08002254
 8001b6c:	08002254 	.word	0x08002254
 8001b70:	08002254 	.word	0x08002254
 8001b74:	08002254 	.word	0x08002254
 8001b78:	08002254 	.word	0x08002254

08001b7c <nvic_enable_irq>:
 * @param[in] irqn Unsigned int8. Interrupt number @ref nvic_stm32f1_userint
 */

void nvic_enable_irq(uint8_t irqn)
{
	NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <nvic_enable_irq+0x18>)
 8001b7e:	0942      	lsrs	r2, r0, #5
 8001b80:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001b84:	f000 001f 	and.w	r0, r0, #31
 8001b88:	2201      	movs	r2, #1
 8001b8a:	fa02 f000 	lsl.w	r0, r2, r0
 8001b8e:	6018      	str	r0, [r3, #0]
}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000e100 	.word	0xe000e100

08001b98 <dwt_enable_cycle_counter>:
	return false;			/* Not supported on ARMv6M */
#endif /* defined(__ARM_ARCH_6M__) */

#if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
	/* Note TRCENA is for 7M and above*/
	SCS_DEMCR |= SCS_DEMCR_TRCENA;
 8001b98:	4a09      	ldr	r2, [pc, #36]	; (8001bc0 <dwt_enable_cycle_counter+0x28>)
 8001b9a:	6813      	ldr	r3, [r2, #0]
 8001b9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba0:	6013      	str	r3, [r2, #0]
	if (DWT_CTRL & DWT_CTRL_NOCYCCNT) {
 8001ba2:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <dwt_enable_cycle_counter+0x2c>)
 8001ba4:	6813      	ldr	r3, [r2, #0]
 8001ba6:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
		return false;		/* Not supported in implementation */
	}

	DWT_CYCCNT = 0;
 8001baa:	bf01      	itttt	eq
 8001bac:	4906      	ldreq	r1, [pc, #24]	; (8001bc8 <dwt_enable_cycle_counter+0x30>)
 8001bae:	600b      	streq	r3, [r1, #0]
	DWT_CTRL |= DWT_CTRL_CYCCNTENA;
 8001bb0:	6813      	ldreq	r3, [r2, #0]
 8001bb2:	f043 0301 	orreq.w	r3, r3, #1
	return true;
 8001bb6:	bf06      	itte	eq
 8001bb8:	2001      	moveq	r0, #1
	DWT_CTRL |= DWT_CTRL_CYCCNTENA;
 8001bba:	6013      	streq	r3, [r2, #0]
		return false;		/* Not supported in implementation */
 8001bbc:	2000      	movne	r0, #0
#endif /* defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__) */

	/* not supported on other architectures */
	return false;
}
 8001bbe:	4770      	bx	lr
 8001bc0:	e000edfc 	.word	0xe000edfc
 8001bc4:	e0001000 	.word	0xe0001000
 8001bc8:	e0001004 	.word	0xe0001004

08001bcc <dwt_read_cycle_counter>:
#if defined(__ARM_ARCH_6M__)
	return 0;		/* Not supported on ARMv6M */
#endif /* defined(__ARM_ARCH_6M__) */

#if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
	if (DWT_CTRL & DWT_CTRL_CYCCNTENA) {
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <dwt_read_cycle_counter+0x10>)
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	f010 0001 	ands.w	r0, r0, #1
		return DWT_CYCCNT;
 8001bd4:	bf18      	it	ne
 8001bd6:	6858      	ldrne	r0, [r3, #4]
	} else {
		return 0;		/* not supported or enabled */
	}
#endif /* defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__) */
}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e0001000 	.word	0xe0001000

08001be0 <pwr_set_vos_scale>:

#include <libopencm3/stm32/pwr.h>

void pwr_set_vos_scale(enum pwr_vos_scale scale)
{
	if (scale == PWR_SCALE1) {
 8001be0:	b928      	cbnz	r0, 8001bee <pwr_set_vos_scale+0xe>
		PWR_CR |= PWR_CR_VOS;
 8001be2:	4a06      	ldr	r2, [pc, #24]	; (8001bfc <pwr_set_vos_scale+0x1c>)
 8001be4:	6813      	ldr	r3, [r2, #0]
 8001be6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else if (scale == PWR_SCALE2) {
		PWR_CR &= PWR_CR_VOS;
 8001bea:	6013      	str	r3, [r2, #0]
	}
}
 8001bec:	4770      	bx	lr
	} else if (scale == PWR_SCALE2) {
 8001bee:	2801      	cmp	r0, #1
 8001bf0:	d1fc      	bne.n	8001bec <pwr_set_vos_scale+0xc>
		PWR_CR &= PWR_CR_VOS;
 8001bf2:	4a02      	ldr	r2, [pc, #8]	; (8001bfc <pwr_set_vos_scale+0x1c>)
 8001bf4:	6813      	ldr	r3, [r2, #0]
 8001bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfa:	e7f6      	b.n	8001bea <pwr_set_vos_scale+0xa>
 8001bfc:	40007000 	.word	0x40007000

08001c00 <dwc_set_address>:
#define dev_base_address (usbd_dev->driver->base_address)
#define REBASE(x)        MMIO32((x) + (dev_base_address))

void dwc_set_address(usbd_device *usbd_dev, uint8_t addr)
{
	REBASE(OTG_DCFG) = (REBASE(OTG_DCFG) & ~OTG_DCFG_DAD) | (addr << 4);
 8001c00:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8001c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c06:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 8001c0a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c0e:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 8001c12:	f8c2 1800 	str.w	r1, [r2, #2048]	; 0x800
}
 8001c16:	4770      	bx	lr

08001c18 <dwc_ep_setup>:

void dwc_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
			uint16_t max_size,
			void (*callback) (usbd_device *usbd_dev, uint8_t ep))
{
 8001c18:	f8d0 c0dc 	ldr.w	ip, [r0, #220]	; 0xdc
 8001c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	 * endpoint. Install callback function.
	 */
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;

	if (addr == 0) { /* For the default control endpoint */
 8001c20:	f011 067f 	ands.w	r6, r1, #127	; 0x7f
{
 8001c24:	9f08      	ldr	r7, [sp, #32]
 8001c26:	f8dc 502c 	ldr.w	r5, [ip, #44]	; 0x2c
 8001c2a:	f003 047f 	and.w	r4, r3, #127	; 0x7f
	if (addr == 0) { /* For the default control endpoint */
 8001c2e:	d13e      	bne.n	8001cae <dwc_ep_setup+0x96>
		/* Configure IN part. */
		if (max_size >= 64) {
 8001c30:	2b3f      	cmp	r3, #63	; 0x3f
 8001c32:	d931      	bls.n	8001c98 <dwc_ep_setup+0x80>
			REBASE(OTG_DIEPCTL0) = OTG_DIEPCTL0_MPSIZ_64;
 8001c34:	f8c5 6900 	str.w	r6, [r5, #2304]	; 0x900
			REBASE(OTG_DIEPCTL0) = OTG_DIEPCTL0_MPSIZ_16;
		} else {
			REBASE(OTG_DIEPCTL0) = OTG_DIEPCTL0_MPSIZ_8;
		}

		REBASE(OTG_DIEPTSIZ0) =
 8001c38:	f8dc 202c 	ldr.w	r2, [ip, #44]	; 0x2c
 8001c3c:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
			(max_size & OTG_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DIEPCTL0) |=
 8001c40:	f8dc 102c 	ldr.w	r1, [ip, #44]	; 0x2c
 8001c44:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8001c48:	f042 4208 	orr.w	r2, r2, #2281701376	; 0x88000000
 8001c4c:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900

		/* Configure OUT part. */
		usbd_dev->doeptsiz[0] = OTG_DIEPSIZ0_STUPCNT_1 |
			OTG_DIEPSIZ0_PKTCNT |
			(max_size & OTG_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DOEPTSIZ(0)) = usbd_dev->doeptsiz[0];
 8001c50:	f8dc 202c 	ldr.w	r2, [ip, #44]	; 0x2c
			OTG_DIEPSIZ0_PKTCNT |
 8001c54:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8001c58:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
		usbd_dev->doeptsiz[0] = OTG_DIEPSIZ0_STUPCNT_1 |
 8001c5c:	f8c0 40e8 	str.w	r4, [r0, #232]	; 0xe8
		REBASE(OTG_DOEPTSIZ(0)) = usbd_dev->doeptsiz[0];
 8001c60:	f8c2 4b10 	str.w	r4, [r2, #2832]	; 0xb10
		REBASE(OTG_DOEPCTL(0)) |=
 8001c64:	f8dc 102c 	ldr.w	r1, [ip, #44]	; 0x2c
 8001c68:	f8d1 2b00 	ldr.w	r2, [r1, #2816]	; 0xb00
 8001c6c:	f042 4208 	orr.w	r2, r2, #2281701376	; 0x88000000
 8001c70:	f8c1 2b00 	str.w	r2, [r1, #2816]	; 0xb00
		    OTG_DOEPCTL0_EPENA | OTG_DIEPCTL0_SNAK;

		REBASE(OTG_GNPTXFSIZ) = ((max_size / 4) << 16) |
 8001c74:	0899      	lsrs	r1, r3, #2
					 usbd_dev->driver->rx_fifo_size;
 8001c76:	f8bc 3032 	ldrh.w	r3, [ip, #50]	; 0x32
		REBASE(OTG_GNPTXFSIZ) = ((max_size / 4) << 16) |
 8001c7a:	f8dc 202c 	ldr.w	r2, [ip, #44]	; 0x2c
 8001c7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001c82:	6293      	str	r3, [r2, #40]	; 0x28
		usbd_dev->fifo_mem_top += max_size / 4;
 8001c84:	f8b0 30e0 	ldrh.w	r3, [r0, #224]	; 0xe0
 8001c88:	4419      	add	r1, r3
 8001c8a:	b289      	uxth	r1, r1
 8001c8c:	f8a0 10e0 	strh.w	r1, [r0, #224]	; 0xe0
		usbd_dev->fifo_mem_top_ep0 = usbd_dev->fifo_mem_top;
 8001c90:	f8a0 10e2 	strh.w	r1, [r0, #226]	; 0xe2
		if (callback) {
			usbd_dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
			    (void *)callback;
		}
	}
}
 8001c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (max_size >= 32) {
 8001c98:	2b1f      	cmp	r3, #31
 8001c9a:	d903      	bls.n	8001ca4 <dwc_ep_setup+0x8c>
			REBASE(OTG_DIEPCTL0) = OTG_DIEPCTL0_MPSIZ_32;
 8001c9c:	2201      	movs	r2, #1
			REBASE(OTG_DIEPCTL0) = OTG_DIEPCTL0_MPSIZ_8;
 8001c9e:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
 8001ca2:	e7c9      	b.n	8001c38 <dwc_ep_setup+0x20>
		} else if (max_size >= 16) {
 8001ca4:	2b0f      	cmp	r3, #15
			REBASE(OTG_DIEPCTL0) = OTG_DIEPCTL0_MPSIZ_16;
 8001ca6:	bf8c      	ite	hi
 8001ca8:	2202      	movhi	r2, #2
			REBASE(OTG_DIEPCTL0) = OTG_DIEPCTL0_MPSIZ_8;
 8001caa:	2203      	movls	r2, #3
 8001cac:	e7f7      	b.n	8001c9e <dwc_ep_setup+0x86>
	if (dir) {
 8001cae:	0609      	lsls	r1, r1, #24
 8001cb0:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8001cb4:	ea4f 4282 	mov.w	r2, r2, lsl #18
 8001cb8:	d529      	bpl.n	8001d0e <dwc_ep_setup+0xf6>
					     usbd_dev->fifo_mem_top;
 8001cba:	f8b0 90e0 	ldrh.w	r9, [r0, #224]	; 0xe0
		REBASE(OTG_DIEPTXF(addr)) = ((max_size / 4) << 16) |
 8001cbe:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8001cc2:	f106 0140 	add.w	r1, r6, #64	; 0x40
 8001cc6:	ea49 4a0e 	orr.w	sl, r9, lr, lsl #16
 8001cca:	f845 a021 	str.w	sl, [r5, r1, lsl #2]
		REBASE(OTG_DIEPTSIZ(addr)) =
 8001cce:	f8dc 502c 	ldr.w	r5, [ip, #44]	; 0x2c
 8001cd2:	f505 6511 	add.w	r5, r5, #2320	; 0x910
		usbd_dev->fifo_mem_top += max_size / 4;
 8001cd6:	44ce      	add	lr, r9
 8001cd8:	f8a0 e0e0 	strh.w	lr, [r0, #224]	; 0xe0
		REBASE(OTG_DIEPTSIZ(addr)) =
 8001cdc:	f845 4008 	str.w	r4, [r5, r8]
		    | OTG_DIEPCTL0_USBAEP | OTG_DIEPCTLX_SD0PID
 8001ce0:	f042 4118 	orr.w	r1, r2, #2550136832	; 0x98000000
		REBASE(OTG_DIEPCTL(addr)) |=
 8001ce4:	f508 6810 	add.w	r8, r8, #2304	; 0x900
 8001ce8:	f8dc 402c 	ldr.w	r4, [ip, #44]	; 0x2c
		    | OTG_DIEPCTL0_USBAEP | OTG_DIEPCTLX_SD0PID
 8001cec:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
		REBASE(OTG_DIEPCTL(addr)) |=
 8001cf0:	f858 5004 	ldr.w	r5, [r8, r4]
		    | (addr << 22) | max_size;
 8001cf4:	4319      	orrs	r1, r3
 8001cf6:	ea41 5186 	orr.w	r1, r1, r6, lsl #22
		REBASE(OTG_DIEPCTL(addr)) |=
 8001cfa:	4329      	orrs	r1, r5
 8001cfc:	f848 1004 	str.w	r1, [r8, r4]
		if (callback) {
 8001d00:	2f00      	cmp	r7, #0
 8001d02:	d0c7      	beq.n	8001c94 <dwc_ep_setup+0x7c>
			usbd_dev->user_callback_ctr[addr][USB_TRANSACTION_IN] =
 8001d04:	230c      	movs	r3, #12
 8001d06:	fb03 0006 	mla	r0, r3, r6, r0
 8001d0a:	6687      	str	r7, [r0, #104]	; 0x68
 8001d0c:	e7c2      	b.n	8001c94 <dwc_ep_setup+0x7c>
		usbd_dev->doeptsiz[addr] = OTG_DIEPSIZ0_PKTCNT |
 8001d0e:	f106 013a 	add.w	r1, r6, #58	; 0x3a
		REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
 8001d12:	f505 6531 	add.w	r5, r5, #2832	; 0xb10
		usbd_dev->doeptsiz[addr] = OTG_DIEPSIZ0_PKTCNT |
 8001d16:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001d1a:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
		REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
 8001d1e:	f845 4008 	str.w	r4, [r5, r8]
		REBASE(OTG_DOEPCTL(addr)) |= OTG_DOEPCTL0_EPENA |
 8001d22:	f508 6130 	add.w	r1, r8, #2816	; 0xb00
 8001d26:	f8dc 402c 	ldr.w	r4, [ip, #44]	; 0x2c
		    OTG_DOEPCTLX_SD0PID | (type << 18) | max_size;
 8001d2a:	f042 4214 	orr.w	r2, r2, #2483027968	; 0x94000000
		REBASE(OTG_DOEPCTL(addr)) |= OTG_DOEPCTL0_EPENA |
 8001d2e:	590d      	ldr	r5, [r1, r4]
		    OTG_DOEPCTLX_SD0PID | (type << 18) | max_size;
 8001d30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d34:	431a      	orrs	r2, r3
		REBASE(OTG_DOEPCTL(addr)) |= OTG_DOEPCTL0_EPENA |
 8001d36:	432a      	orrs	r2, r5
 8001d38:	510a      	str	r2, [r1, r4]
		if (callback) {
 8001d3a:	2f00      	cmp	r7, #0
 8001d3c:	d0aa      	beq.n	8001c94 <dwc_ep_setup+0x7c>
			usbd_dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
 8001d3e:	230c      	movs	r3, #12
 8001d40:	fb03 0006 	mla	r0, r3, r6, r0
 8001d44:	66c7      	str	r7, [r0, #108]	; 0x6c
 8001d46:	e7a5      	b.n	8001c94 <dwc_ep_setup+0x7c>

08001d48 <dwc_endpoints_reset>:

void dwc_endpoints_reset(usbd_device *usbd_dev)
{
	int i;
	/* The core resets the endpoints automatically on reset. */
	usbd_dev->fifo_mem_top = usbd_dev->fifo_mem_top_ep0;
 8001d48:	f8b0 30e2 	ldrh.w	r3, [r0, #226]	; 0xe2

	/* Disable any currently active endpoints */
	for (i = 1; i < 4; i++) {
		if (REBASE(OTG_DOEPCTL(i)) & OTG_DOEPCTL0_EPENA) {
 8001d4c:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
{
 8001d50:	b510      	push	{r4, lr}
	usbd_dev->fifo_mem_top = usbd_dev->fifo_mem_top_ep0;
 8001d52:	f8a0 30e0 	strh.w	r3, [r0, #224]	; 0xe0
		if (REBASE(OTG_DOEPCTL(i)) & OTG_DOEPCTL0_EPENA) {
 8001d56:	f44f 6332 	mov.w	r3, #2848	; 0xb20
 8001d5a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d5c:	5858      	ldr	r0, [r3, r1]
 8001d5e:	2800      	cmp	r0, #0
			REBASE(OTG_DOEPCTL(i)) |= OTG_DOEPCTL0_EPDIS;
 8001d60:	bfbe      	ittt	lt
 8001d62:	5858      	ldrlt	r0, [r3, r1]
 8001d64:	f040 4080 	orrlt.w	r0, r0, #1073741824	; 0x40000000
 8001d68:	5058      	strlt	r0, [r3, r1]
		}
		if (REBASE(OTG_DIEPCTL(i)) & OTG_DIEPCTL0_EPENA) {
 8001d6a:	f5a3 7000 	sub.w	r0, r3, #512	; 0x200
 8001d6e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d70:	5844      	ldr	r4, [r0, r1]
 8001d72:	2c00      	cmp	r4, #0
			REBASE(OTG_DIEPCTL(i)) |= OTG_DIEPCTL0_EPDIS;
 8001d74:	bfb8      	it	lt
 8001d76:	5844      	ldrlt	r4, [r0, r1]
 8001d78:	f103 0320 	add.w	r3, r3, #32
 8001d7c:	bfbc      	itt	lt
 8001d7e:	f044 4480 	orrlt.w	r4, r4, #1073741824	; 0x40000000
 8001d82:	5044      	strlt	r4, [r0, r1]
	for (i = 1; i < 4; i++) {
 8001d84:	f5b3 6f38 	cmp.w	r3, #2944	; 0xb80
 8001d88:	d1e7      	bne.n	8001d5a <dwc_endpoints_reset+0x12>
		}
	}

	/* Flush all tx/rx fifos */
	REBASE(OTG_GRSTCTL) = OTG_GRSTCTL_TXFFLSH | OTG_GRSTCTL_TXFNUM_ALL
 8001d8a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d8c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8001d90:	611a      	str	r2, [r3, #16]
			      | OTG_GRSTCTL_RXFFLSH;
}
 8001d92:	bd10      	pop	{r4, pc}

08001d94 <dwc_ep_stall_set>:

void dwc_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
 8001d94:	b510      	push	{r4, lr}
 8001d96:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
	if (addr == 0) {
 8001d9a:	b939      	cbnz	r1, 8001dac <dwc_ep_stall_set+0x18>
 8001d9c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		if (stall) {
			REBASE(OTG_DIEPCTL(addr)) |= OTG_DIEPCTL0_STALL;
 8001d9e:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
		if (stall) {
 8001da2:	b18a      	cbz	r2, 8001dc8 <dwc_ep_stall_set+0x34>
			REBASE(OTG_DIEPCTL(addr)) |= OTG_DIEPCTL0_STALL;
 8001da4:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
		} else {
			REBASE(OTG_DIEPCTL(addr)) &= ~OTG_DIEPCTL0_STALL;
 8001da8:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
		}
	}

	if (addr & 0x80) {
 8001dac:	060c      	lsls	r4, r1, #24
 8001dae:	bf46      	itte	mi
 8001db0:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8001db4:	3148      	addmi	r1, #72	; 0x48
 8001db6:	3158      	addpl	r1, #88	; 0x58
 8001db8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001dba:	0149      	lsls	r1, r1, #5
		} else {
			REBASE(OTG_DIEPCTL(addr)) &= ~OTG_DIEPCTL0_STALL;
			REBASE(OTG_DIEPCTL(addr)) |= OTG_DIEPCTLX_SD0PID;
		}
	} else {
		if (stall) {
 8001dbc:	b13a      	cbz	r2, 8001dce <dwc_ep_stall_set+0x3a>
			REBASE(OTG_DOEPCTL(addr)) |= OTG_DOEPCTL0_STALL;
 8001dbe:	58ca      	ldr	r2, [r1, r3]
 8001dc0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001dc4:	50ca      	str	r2, [r1, r3]
		} else {
			REBASE(OTG_DOEPCTL(addr)) &= ~OTG_DOEPCTL0_STALL;
			REBASE(OTG_DOEPCTL(addr)) |= OTG_DOEPCTLX_SD0PID;
		}
	}
}
 8001dc6:	bd10      	pop	{r4, pc}
			REBASE(OTG_DIEPCTL(addr)) &= ~OTG_DIEPCTL0_STALL;
 8001dc8:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
 8001dcc:	e7ec      	b.n	8001da8 <dwc_ep_stall_set+0x14>
			REBASE(OTG_DOEPCTL(addr)) &= ~OTG_DOEPCTL0_STALL;
 8001dce:	58ca      	ldr	r2, [r1, r3]
 8001dd0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001dd4:	50ca      	str	r2, [r1, r3]
			REBASE(OTG_DOEPCTL(addr)) |= OTG_DOEPCTLX_SD0PID;
 8001dd6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001dd8:	588b      	ldr	r3, [r1, r2]
 8001dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dde:	508b      	str	r3, [r1, r2]
}
 8001de0:	e7f1      	b.n	8001dc6 <dwc_ep_stall_set+0x32>

08001de2 <dwc_ep_stall_get>:

uint8_t dwc_ep_stall_get(usbd_device *usbd_dev, uint8_t addr)
{
	/* Return non-zero if STALL set. */
	if (addr & 0x80) {
 8001de2:	060a      	lsls	r2, r1, #24
 8001de4:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
		return (REBASE(OTG_DIEPCTL(addr & 0x7f)) &
 8001de8:	bf46      	itte	mi
 8001dea:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8001dee:	3148      	addmi	r1, #72	; 0x48
				OTG_DIEPCTL0_STALL) ? 1 : 0;
	} else {
		return (REBASE(OTG_DOEPCTL(addr)) &
 8001df0:	3158      	addpl	r1, #88	; 0x58
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	0149      	lsls	r1, r1, #5
 8001df6:	58c8      	ldr	r0, [r1, r3]
				OTG_DOEPCTL0_STALL) ? 1 : 0;
 8001df8:	f3c0 5040 	ubfx	r0, r0, #21, #1
	}
}
 8001dfc:	4770      	bx	lr

08001dfe <dwc_ep_nak_set>:

void dwc_ep_nak_set(usbd_device *usbd_dev, uint8_t addr, uint8_t nak)
{
	/* It does not make sense to force NAK on IN endpoints. */
	if (addr & 0x80) {
 8001dfe:	060b      	lsls	r3, r1, #24
 8001e00:	d40c      	bmi.n	8001e1c <dwc_ep_nak_set+0x1e>
		return;
	}

	usbd_dev->force_nak[addr] = nak;
 8001e02:	1843      	adds	r3, r0, r1
 8001e04:	3158      	adds	r1, #88	; 0x58
 8001e06:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8001e0a:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8001e0e:	0149      	lsls	r1, r1, #5
 8001e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	if (nak) {
 8001e12:	b122      	cbz	r2, 8001e1e <dwc_ep_nak_set+0x20>
		REBASE(OTG_DOEPCTL(addr)) |= OTG_DOEPCTL0_SNAK;
 8001e14:	58ca      	ldr	r2, [r1, r3]
 8001e16:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
	} else {
		REBASE(OTG_DOEPCTL(addr)) |= OTG_DOEPCTL0_CNAK;
 8001e1a:	50ca      	str	r2, [r1, r3]
	}
}
 8001e1c:	4770      	bx	lr
		REBASE(OTG_DOEPCTL(addr)) |= OTG_DOEPCTL0_CNAK;
 8001e1e:	58ca      	ldr	r2, [r1, r3]
 8001e20:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001e24:	e7f9      	b.n	8001e1a <dwc_ep_nak_set+0x1c>

08001e26 <dwc_ep_write_packet>:

uint16_t dwc_ep_write_packet(usbd_device *usbd_dev, uint8_t addr,
			      const void *buf, uint16_t len)
{
 8001e26:	b570      	push	{r4, r5, r6, lr}
	int i;

	addr &= 0x7F;

	/* Return if endpoint is already enabled. */
	if (REBASE(OTG_DIEPTSIZ(addr)) & OTG_DIEPSIZ0_PKTCNT) {
 8001e28:	f8d0 50dc 	ldr.w	r5, [r0, #220]	; 0xdc
 8001e2c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	addr &= 0x7F;
 8001e2e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	if (REBASE(OTG_DIEPTSIZ(addr)) & OTG_DIEPSIZ0_PKTCNT) {
 8001e32:	014c      	lsls	r4, r1, #5
 8001e34:	f500 6011 	add.w	r0, r0, #2320	; 0x910
 8001e38:	5906      	ldr	r6, [r0, r4]
 8001e3a:	0336      	lsls	r6, r6, #12
 8001e3c:	d416      	bmi.n	8001e6c <dwc_ep_write_packet+0x46>
		return 0;
	}

	/* Enable endpoint for transmission. */
	REBASE(OTG_DIEPTSIZ(addr)) = OTG_DIEPSIZ0_PKTCNT | len;
 8001e3e:	f443 2600 	orr.w	r6, r3, #524288	; 0x80000
 8001e42:	5106      	str	r6, [r0, r4]
	REBASE(OTG_DIEPCTL(addr)) |= OTG_DIEPCTL0_EPENA |
 8001e44:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 8001e48:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 8001e4a:	59a0      	ldr	r0, [r4, r6]

	/* Copy buffer to endpoint FIFO, note - memcpy does not work.
	 * ARMv7M supports non-word-aligned accesses, ARMv6M does not. */
#if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
	for (i = len; i > 0; i -= 4) {
		REBASE(OTG_FIFO(addr)) = *buf32++;
 8001e4c:	3101      	adds	r1, #1
	REBASE(OTG_DIEPCTL(addr)) |= OTG_DIEPCTL0_EPENA |
 8001e4e:	f040 4004 	orr.w	r0, r0, #2214592512	; 0x84000000
 8001e52:	51a0      	str	r0, [r4, r6]
		REBASE(OTG_FIFO(addr)) = *buf32++;
 8001e54:	0309      	lsls	r1, r1, #12
	for (i = len; i > 0; i -= 4) {
 8001e56:	18d4      	adds	r4, r2, r3
 8001e58:	1aa0      	subs	r0, r4, r2
 8001e5a:	2800      	cmp	r0, #0
 8001e5c:	dc01      	bgt.n	8001e62 <dwc_ep_write_packet+0x3c>
		}
	}
#endif /* defined(__ARM_ARCH_6M__) */

	return len;
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	bd70      	pop	{r4, r5, r6, pc}
		REBASE(OTG_FIFO(addr)) = *buf32++;
 8001e62:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001e64:	f852 6b04 	ldr.w	r6, [r2], #4
 8001e68:	500e      	str	r6, [r1, r0]
 8001e6a:	e7f5      	b.n	8001e58 <dwc_ep_write_packet+0x32>
		return 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e7f6      	b.n	8001e5e <dwc_ep_write_packet+0x38>

08001e70 <dwc_ep_read_packet>:

uint16_t dwc_ep_read_packet(usbd_device *usbd_dev, uint8_t addr,
				  void *buf, uint16_t len)
{
 8001e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001e72:	4601      	mov	r1, r0
 8001e74:	4610      	mov	r0, r2

	/* We do not need to know the endpoint address since there is only one
	 * receive FIFO for all endpoints.
	 */
	(void) addr;
	len = MIN(len, usbd_dev->rxbcnt);
 8001e76:	f8b1 40f8 	ldrh.w	r4, [r1, #248]	; 0xf8
 8001e7a:	429c      	cmp	r4, r3
 8001e7c:	bf28      	it	cs
 8001e7e:	461c      	movcs	r4, r3

	/* ARMv7M supports non-word-aligned accesses, ARMv6M does not. */
#if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
	for (i = len; i >= 4; i -= 4) {
 8001e80:	1915      	adds	r5, r2, r4
	uint32_t *buf32 = buf;
 8001e82:	4613      	mov	r3, r2
	for (i = len; i >= 4; i -= 4) {
 8001e84:	1aea      	subs	r2, r5, r3
 8001e86:	2a03      	cmp	r2, #3
 8001e88:	dc1c      	bgt.n	8001ec4 <dwc_ep_read_packet+0x54>
 8001e8a:	08a3      	lsrs	r3, r4, #2
 8001e8c:	f06f 0203 	mvn.w	r2, #3
 8001e90:	fb02 4203 	mla	r2, r2, r3, r4
 8001e94:	eb00 0083 	add.w	r0, r0, r3, lsl #2
		/* buf32 needs to be updated as it is used for extra */
		buf32 = (uint32_t *)buf8;
	}
#endif /* defined(__ARM_ARCH_6M__) */

	if (i) {
 8001e98:	b18a      	cbz	r2, 8001ebe <dwc_ep_read_packet+0x4e>
		extra = REBASE(OTG_FIFO(0));
 8001e9a:	f8d1 30dc 	ldr.w	r3, [r1, #220]	; 0xdc
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	9301      	str	r3, [sp, #4]
		/* we read 4 bytes from the fifo, so update rxbcnt */
		if (usbd_dev->rxbcnt < 4) {
 8001ea8:	f8b1 30f8 	ldrh.w	r3, [r1, #248]	; 0xf8
 8001eac:	2b03      	cmp	r3, #3
			/* Be careful not to underflow (rxbcnt is unsigned) */
			usbd_dev->rxbcnt = 0;
 8001eae:	bf94      	ite	ls
 8001eb0:	2300      	movls	r3, #0
		} else {
			usbd_dev->rxbcnt -= 4;
 8001eb2:	3b04      	subhi	r3, #4
 8001eb4:	f8a1 30f8 	strh.w	r3, [r1, #248]	; 0xf8
		}
		memcpy(buf32, &extra, i);
 8001eb8:	a901      	add	r1, sp, #4
 8001eba:	f000 f8ff 	bl	80020bc <memcpy>
	}

	return len;
}
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	b003      	add	sp, #12
 8001ec2:	bd30      	pop	{r4, r5, pc}
		*buf32++ = REBASE(OTG_FIFO(0));
 8001ec4:	f8d1 20dc 	ldr.w	r2, [r1, #220]	; 0xdc
 8001ec8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001eca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	f843 2b04 	str.w	r2, [r3], #4
		usbd_dev->rxbcnt -= 4;
 8001ed4:	f8b1 20f8 	ldrh.w	r2, [r1, #248]	; 0xf8
 8001ed8:	3a04      	subs	r2, #4
 8001eda:	f8a1 20f8 	strh.w	r2, [r1, #248]	; 0xf8
 8001ede:	e7d1      	b.n	8001e84 <dwc_ep_read_packet+0x14>

08001ee0 <dwc_poll>:
		/* idle */
	}
}

void dwc_poll(usbd_device *usbd_dev)
{
 8001ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/* Read interrupt status register. */
	uint32_t intsts = REBASE(OTG_GINTSTS);
 8001ee4:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8001ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eea:	6955      	ldr	r5, [r2, #20]
	int i;

	if (intsts & OTG_GINTSTS_ENUMDNE) {
 8001eec:	f415 5600 	ands.w	r6, r5, #8192	; 0x2000
{
 8001ef0:	4604      	mov	r4, r0
	if (intsts & OTG_GINTSTS_ENUMDNE) {
 8001ef2:	d009      	beq.n	8001f08 <dwc_poll+0x28>
		/* Handle USB RESET condition. */
		REBASE(OTG_GINTSTS) = OTG_GINTSTS_ENUMDNE;
		usbd_dev->fifo_mem_top = usbd_dev->driver->rx_fifo_size;
 8001ef4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
		REBASE(OTG_GINTSTS) = OTG_GINTSTS_ENUMDNE;
 8001ef6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001efa:	6151      	str	r1, [r2, #20]
		usbd_dev->fifo_mem_top = usbd_dev->driver->rx_fifo_size;
 8001efc:	f8a0 30e0 	strh.w	r3, [r0, #224]	; 0xe0
	if (usbd_dev->user_callback_sof) {
		REBASE(OTG_GINTMSK) |= OTG_GINTMSK_SOFM;
	} else {
		REBASE(OTG_GINTMSK) &= ~OTG_GINTMSK_SOFM;
	}
}
 8001f00:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		_usbd_reset(usbd_dev);
 8001f04:	f7ff b942 	b.w	800118c <_usbd_reset>
						       [USB_TRANSACTION_IN]) {
 8001f08:	f04f 080c 	mov.w	r8, #12
			REBASE(OTG_DIEPINT(i)) = OTG_DIEPINTX_XFRC;
 8001f0c:	f04f 0901 	mov.w	r9, #1
		if (REBASE(OTG_DIEPINT(i)) & OTG_DIEPINTX_XFRC) {
 8001f10:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	0177      	lsls	r7, r6, #5
 8001f18:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8001f1c:	59db      	ldr	r3, [r3, r7]
 8001f1e:	07da      	lsls	r2, r3, #31
 8001f20:	d50d      	bpl.n	8001f3e <dwc_poll+0x5e>
						       [USB_TRANSACTION_IN]) {
 8001f22:	fb08 4306 	mla	r3, r8, r6, r4
 8001f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
			if (usbd_dev->user_callback_ctr[i]
 8001f28:	b113      	cbz	r3, 8001f30 <dwc_poll+0x50>
				usbd_dev->user_callback_ctr[i]
 8001f2a:	b2f1      	uxtb	r1, r6
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	4798      	blx	r3
			REBASE(OTG_DIEPINT(i)) = OTG_DIEPINTX_XFRC;
 8001f30:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8001f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f36:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8001f3a:	f843 9007 	str.w	r9, [r3, r7]
	for (i = 0; i < 4; i++) { /* Iterate over endpoints. */
 8001f3e:	3601      	adds	r6, #1
 8001f40:	2e04      	cmp	r6, #4
 8001f42:	d1e5      	bne.n	8001f10 <dwc_poll+0x30>
	if (intsts & OTG_GINTSTS_RXFLVL) {
 8001f44:	06eb      	lsls	r3, r5, #27
 8001f46:	d548      	bpl.n	8001fda <dwc_poll+0xfa>
		uint32_t rxstsp = REBASE(OTG_GRXSTSP);
 8001f48:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
 8001f4c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001f4e:	6a1a      	ldr	r2, [r3, #32]
		uint32_t pktsts = rxstsp & OTG_GRXSTSP_PKTSTS_MASK;
 8001f50:	f402 16f0 	and.w	r6, r2, #1966080	; 0x1e0000
		if (pktsts == OTG_GRXSTSP_PKTSTS_OUT_COMP
 8001f54:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
		uint8_t ep = rxstsp & OTG_GRXSTSP_EPNUM_MASK;
 8001f58:	f002 010f 	and.w	r1, r2, #15
		if (pktsts == OTG_GRXSTSP_PKTSTS_OUT_COMP
 8001f5c:	d002      	beq.n	8001f64 <dwc_poll+0x84>
			|| pktsts == OTG_GRXSTSP_PKTSTS_SETUP_COMP)  {
 8001f5e:	f5b6 2f00 	cmp.w	r6, #524288	; 0x80000
 8001f62:	d118      	bne.n	8001f96 <dwc_poll+0xb6>
			REBASE(OTG_DOEPTSIZ(ep)) = usbd_dev->doeptsiz[ep];
 8001f64:	f101 053a 	add.w	r5, r1, #58	; 0x3a
 8001f68:	014a      	lsls	r2, r1, #5
 8001f6a:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 8001f6e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8001f72:	509d      	str	r5, [r3, r2]
				(usbd_dev->force_nak[ep] ?
 8001f74:	4421      	add	r1, r4
			REBASE(OTG_DOEPCTL(ep)) |= OTG_DOEPCTL0_EPENA |
 8001f76:	f502 6330 	add.w	r3, r2, #2816	; 0xb00
 8001f7a:	f891 10e4 	ldrb.w	r1, [r1, #228]	; 0xe4
 8001f7e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001f80:	2900      	cmp	r1, #0
 8001f82:	581a      	ldr	r2, [r3, r0]
 8001f84:	bf0c      	ite	eq
 8001f86:	f04f 4104 	moveq.w	r1, #2214592512	; 0x84000000
 8001f8a:	f04f 4108 	movne.w	r1, #2281701376	; 0x88000000
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	501a      	str	r2, [r3, r0]
}
 8001f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ((pktsts != OTG_GRXSTSP_PKTSTS_OUT) &&
 8001f96:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 8001f9a:	d073      	beq.n	8002084 <dwc_poll+0x1a4>
 8001f9c:	f5b6 2f40 	cmp.w	r6, #786432	; 0xc0000
 8001fa0:	d1f7      	bne.n	8001f92 <dwc_poll+0xb2>
			&& (REBASE(OTG_DIEPTSIZ(ep)) & OTG_DIEPSIZ0_PKTCNT)) {
 8001fa2:	014e      	lsls	r6, r1, #5
 8001fa4:	f503 6711 	add.w	r7, r3, #2320	; 0x910
 8001fa8:	59bf      	ldr	r7, [r7, r6]
 8001faa:	033f      	lsls	r7, r7, #12
 8001fac:	d440      	bmi.n	8002030 <dwc_poll+0x150>
			type = USB_TRANSACTION_SETUP;
 8001fae:	2002      	movs	r0, #2
		if (usbd_dev->user_callback_ctr[ep][type]) {
 8001fb0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8001fb4:	4403      	add	r3, r0
 8001fb6:	331a      	adds	r3, #26
		usbd_dev->rxbcnt = (rxstsp & OTG_GRXSTSP_BCNT_MASK) >> 4;
 8001fb8:	f3c2 120a 	ubfx	r2, r2, #4, #11
		if (usbd_dev->user_callback_ctr[ep][type]) {
 8001fbc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
		usbd_dev->rxbcnt = (rxstsp & OTG_GRXSTSP_BCNT_MASK) >> 4;
 8001fc0:	f8a4 20f8 	strh.w	r2, [r4, #248]	; 0xf8
		if (usbd_dev->user_callback_ctr[ep][type]) {
 8001fc4:	b10b      	cbz	r3, 8001fca <dwc_poll+0xea>
			usbd_dev->user_callback_ctr[ep][type] (usbd_dev, ep);
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	4798      	blx	r3
		for (i = 0; i < usbd_dev->rxbcnt; i += 4) {
 8001fca:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 8001fce:	2300      	movs	r3, #0
 8001fd0:	4299      	cmp	r1, r3
 8001fd2:	dc59      	bgt.n	8002088 <dwc_poll+0x1a8>
		usbd_dev->rxbcnt = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
	if (intsts & OTG_GINTSTS_USBSUSP) {
 8001fda:	052a      	lsls	r2, r5, #20
 8001fdc:	d508      	bpl.n	8001ff0 <dwc_poll+0x110>
		if (usbd_dev->user_callback_suspend) {
 8001fde:	6a23      	ldr	r3, [r4, #32]
 8001fe0:	b103      	cbz	r3, 8001fe4 <dwc_poll+0x104>
			usbd_dev->user_callback_suspend();
 8001fe2:	4798      	blx	r3
		REBASE(OTG_GINTSTS) = OTG_GINTSTS_USBSUSP;
 8001fe4:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fee:	615a      	str	r2, [r3, #20]
	if (intsts & OTG_GINTSTS_WKUPINT) {
 8001ff0:	2d00      	cmp	r5, #0
 8001ff2:	da08      	bge.n	8002006 <dwc_poll+0x126>
		if (usbd_dev->user_callback_resume) {
 8001ff4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ff6:	b103      	cbz	r3, 8001ffa <dwc_poll+0x11a>
			usbd_dev->user_callback_resume();
 8001ff8:	4798      	blx	r3
		REBASE(OTG_GINTSTS) = OTG_GINTSTS_WKUPINT;
 8001ffa:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002004:	615a      	str	r2, [r3, #20]
	if (intsts & OTG_GINTSTS_SOF) {
 8002006:	072b      	lsls	r3, r5, #28
 8002008:	d507      	bpl.n	800201a <dwc_poll+0x13a>
 800200a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		if (usbd_dev->user_callback_sof) {
 800200c:	b103      	cbz	r3, 8002010 <dwc_poll+0x130>
			usbd_dev->user_callback_sof();
 800200e:	4798      	blx	r3
		REBASE(OTG_GINTSTS) = OTG_GINTSTS_SOF;
 8002010:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8002014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002016:	2208      	movs	r2, #8
 8002018:	615a      	str	r2, [r3, #20]
 800201a:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	if (usbd_dev->user_callback_sof) {
 800201e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002022:	2a00      	cmp	r2, #0
 8002024:	d038      	beq.n	8002098 <dwc_poll+0x1b8>
		REBASE(OTG_GINTMSK) |= OTG_GINTMSK_SOFM;
 8002026:	699a      	ldr	r2, [r3, #24]
 8002028:	f042 0208 	orr.w	r2, r2, #8
		REBASE(OTG_GINTMSK) &= ~OTG_GINTMSK_SOFM;
 800202c:	619a      	str	r2, [r3, #24]
 800202e:	e7b0      	b.n	8001f92 <dwc_poll+0xb2>
	REBASE(OTG_DIEPCTL(ep)) |= OTG_DIEPCTL0_SNAK;
 8002030:	f506 6c10 	add.w	ip, r6, #2304	; 0x900
 8002034:	f853 700c 	ldr.w	r7, [r3, ip]
 8002038:	f047 6700 	orr.w	r7, r7, #134217728	; 0x8000000
 800203c:	f843 700c 	str.w	r7, [r3, ip]
	while (!(REBASE(OTG_DIEPINT(ep)) & OTG_DIEPINTX_INEPNE)) {
 8002040:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8002042:	f607 1308 	addw	r3, r7, #2312	; 0x908
 8002046:	4433      	add	r3, r6
 8002048:	f8d3 e000 	ldr.w	lr, [r3]
 800204c:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8002050:	d0fa      	beq.n	8002048 <dwc_poll+0x168>
	fifo = (REBASE(OTG_DIEPCTL(ep)) & OTG_DIEPCTL0_TXFNUM_MASK) >> 22;
 8002052:	f85c 3007 	ldr.w	r3, [ip, r7]
 8002056:	0d9b      	lsrs	r3, r3, #22
	while (!(REBASE(OTG_GRSTCTL) & OTG_GRSTCTL_AHBIDL)) {
 8002058:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800205c:	f1be 0f00 	cmp.w	lr, #0
 8002060:	dafa      	bge.n	8002058 <dwc_poll+0x178>
	REBASE(OTG_GRSTCTL) = (fifo << 6) | OTG_GRSTCTL_TXFFLSH;
 8002062:	019b      	lsls	r3, r3, #6
 8002064:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
 8002068:	f043 0320 	orr.w	r3, r3, #32
 800206c:	613b      	str	r3, [r7, #16]
	REBASE(OTG_DIEPTSIZ(ep)) = 0;
 800206e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002070:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8002074:	2700      	movs	r7, #0
 8002076:	519f      	str	r7, [r3, r6]
	while ((REBASE(OTG_GRSTCTL) & OTG_GRSTCTL_TXFFLSH)) {
 8002078:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800207a:	3310      	adds	r3, #16
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	0680      	lsls	r0, r0, #26
 8002080:	d4fc      	bmi.n	800207c <dwc_poll+0x19c>
 8002082:	e794      	b.n	8001fae <dwc_poll+0xce>
			type = USB_TRANSACTION_OUT;
 8002084:	2001      	movs	r0, #1
 8002086:	e793      	b.n	8001fb0 <dwc_poll+0xd0>
			(void)REBASE(OTG_FIFO(0));
 8002088:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
 800208c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800208e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
		for (i = 0; i < usbd_dev->rxbcnt; i += 4) {
 8002092:	3304      	adds	r3, #4
			(void)REBASE(OTG_FIFO(0));
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	e79b      	b.n	8001fd0 <dwc_poll+0xf0>
		REBASE(OTG_GINTMSK) &= ~OTG_GINTMSK_SOFM;
 8002098:	699a      	ldr	r2, [r3, #24]
 800209a:	f022 0208 	bic.w	r2, r2, #8
 800209e:	e7c5      	b.n	800202c <dwc_poll+0x14c>

080020a0 <dwc_disconnect>:

void dwc_disconnect(usbd_device *usbd_dev, bool disconnected)
{
 80020a0:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	if (disconnected) {
		REBASE(OTG_DCTL) |= OTG_DCTL_SDIS;
 80020a6:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
	if (disconnected) {
 80020aa:	b121      	cbz	r1, 80020b6 <dwc_disconnect+0x16>
		REBASE(OTG_DCTL) |= OTG_DCTL_SDIS;
 80020ac:	f042 0202 	orr.w	r2, r2, #2
	} else {
		REBASE(OTG_DCTL) &= ~OTG_DCTL_SDIS;
 80020b0:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
	}
}
 80020b4:	4770      	bx	lr
		REBASE(OTG_DCTL) &= ~OTG_DCTL_SDIS;
 80020b6:	f022 0202 	bic.w	r2, r2, #2
 80020ba:	e7f9      	b.n	80020b0 <dwc_disconnect+0x10>

080020bc <memcpy>:
 80020bc:	b510      	push	{r4, lr}
 80020be:	1e43      	subs	r3, r0, #1
 80020c0:	440a      	add	r2, r1
 80020c2:	4291      	cmp	r1, r2
 80020c4:	d100      	bne.n	80020c8 <memcpy+0xc>
 80020c6:	bd10      	pop	{r4, pc}
 80020c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80020cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80020d0:	e7f7      	b.n	80020c2 <memcpy+0x6>

080020d2 <memset>:
 80020d2:	4402      	add	r2, r0
 80020d4:	4603      	mov	r3, r0
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d100      	bne.n	80020dc <memset+0xa>
 80020da:	4770      	bx	lr
 80020dc:	f803 1b01 	strb.w	r1, [r3], #1
 80020e0:	e7f9      	b.n	80020d6 <memset+0x4>

080020e2 <strlen>:
 80020e2:	4603      	mov	r3, r0
 80020e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80020e8:	2a00      	cmp	r2, #0
 80020ea:	d1fb      	bne.n	80020e4 <strlen+0x2>
 80020ec:	1a18      	subs	r0, r3, r0
 80020ee:	3801      	subs	r0, #1
 80020f0:	4770      	bx	lr
	...

080020f4 <dev_descr>:
 80020f4:	0112 0200 0000 4000 0483 5710 0200 0201     .......@...W....
 8002104:	0103 0000                                   ....

08002108 <hid_report_descriptor>:
 8002108:	0006 09ff a101 1501 2600 00ff 0875 2095     .........&..u.. 
 8002118:	0009 0282 1501 2600 00ff 0875 0495 0009     .......&..u.....
 8002128:	02b2 c001                                   ....

0800212c <hid_function>:
 800212c:	2109 0100 0100 2422 0000 0000               .!...."$....

08002138 <hid_endpoint>:
 8002138:	0507 0381 0022 0001 0000 0000 0000 0000     ...."...........

08002148 <hid_iface>:
 8002148:	0409 0000 0301 0000 3800 0021 2c08 0021     .........8!..,!.
 8002158:	0908 0000 0000 0000                         ........

08002160 <ifaces>:
 8002160:	0000 0000 0001 0000 0000 0000 2148 0800     ............H!..

08002170 <config>:
 8002170:	0209 0000 0101 c000 6032 0021 0008 0000     ........2`!.....
 8002180:	6c42 6361 206b 7053 6568 6572 5420 6365     Black Sphere Tec
 8002190:	6e68 6c6f 676f 6569 0073 0000 4948 2044     hnologies...HID 
 80021a0:	6544 6f6d 0000 0000 4544 4f4d 0000 0000     Demo....DEMO....

080021b0 <rcc_hse_8mhz_3v3>:
 80021b0:	0008 0060 0202 0000 0603 0000 0500 0104     ..`.............
 80021c0:	6c00 02dc 1b00 00b7 3600 016e 0008 0150     .l.......6n...P.
 80021d0:	0704 0000 0602 0000 0400 0000 bd00 0501     ................
 80021e0:	de80 0280 bd00 0501 0008 00f0 0502 0000     ................
 80021f0:	0603 0000 0500 0104 0e00 0727 c380 01c9     ..........'.....
 8002200:	8700 0393 0008 0150 0702 0000 0605 0000     ......P.........
 8002210:	0500 0004 7a00 0a03 de80 0280 bd00 0501     .....z..........

08002220 <stm32f107_usb_driver>:
 8002220:	1a11 0800 1c01 0800 1c19 0800 1d49 0800     ............I...
 8002230:	1d95 0800 1dff 0800 1de3 0800 1e27 0800     ............'...
 8002240:	1e71 0800 1ee1 0800 20a1 0800 0000 5000     q........ .....P
 8002250:	0001 0080                                   ....
